---
issues:
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=5
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 13:43:19 2009
        inner:
          - key: Labels
            value: -Type-Defect Type-Enhancement
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:01:36 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Oct 29, 2007 <!-- Mon Oct 29 22:14:44 2007 -->
      
      <pre>
      I think I didn&#39;t see an easy way to ask &quot;was I
      redirected?&quot; Also, the documentation that says that
      if you want to do complex things with forms, you
      should be reading up on HTML::Form might want to be
      a bit clearer. I spent a bunch of time figuring out
      how to find out what fields my forms had.
      
      
      From: 	ask@develooper.com
      FWIW: I&#39;d love to have this feature too. To be most useful to me it&#39;d be
      able to return a list of
      the URLs that redirected and which HTTP status they were redirected with.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 5](http://code.google.com/p/www-mechanize/issues/detail?id=5) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=5)
      
      * **Type**:      Enhancement
      * **Date**:      Oct 29, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 13:43:19 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `-Type-Defect Type-Enhancement`
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:01:36 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Oct 29, 2007'
        timestamp: Mon Oct 29 22:14:44 2007
      description: |-
        <pre>
        I think I didn&#39;t see an easy way to ask &quot;was I
        redirected?&quot; Also, the documentation that says that
        if you want to do complex things with forms, you
        should be reading up on HTML::Form might want to be
        a bit clearer. I spent a bunch of time figuring out
        how to find out what fields my forms had.
        
        
        From: 	ask@develooper.com
        FWIW: I&#39;d love to have this feature too. To be most useful to me it&#39;d be
        able to return a list of
        the URLs that redirected and which HTTP status they were redirected with.
        
        </pre>
      reporter: petda...@gmail.com
    issue: 5
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Enhancement
    title: "WM: Allow Mech to know if it's been redirected"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=5
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=12
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 9, 2007'
        date_long: Fri Nov  9 10:36:00 2007
        inner:
          - key: Labels
            value: -Type-Defect Type-Enhancement
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 13:42:39 2009
        inner:
          - key: Summary
            value: 'WM: better explanation of how to click a radio button'
          - key: Labels
            value: Component-Docs
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:01:49 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 10:34:21 2007 -->
      
      <pre>
       WM docs: better explanation of how to click a radio button
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 12](http://code.google.com/p/www-mechanize/issues/detail?id=12) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=12)
      
      * **Type**:      Enhancement
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 9, 2007 <!-- Fri Nov  9 10:36:00 2007 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `-Type-Defect Type-Enhancement`
      
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 13:42:39 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: better explanation of how to click a radio button
      * Labels : `Component-Docs`
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:01:49 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 10:34:21 2007
      description: |-
        <pre>
         WM docs: better explanation of how to click a radio button
        </pre>
      reporter: petda...@gmail.com
    issue: 12
    meta:
      Component: Docs
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Enhancement
    title: 'WM: better explanation of how to click a radio button'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=12
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=14
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 13, 2007'
        date_long: Tue Nov 13 09:56:41 2007
        inner:
          - key: Summary
            value: 'WM: $mech-&gt;find_all_inputs (and $mech-&gt;find_all_submits) doesn&#39;t'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:02:00 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 10:39:03 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=29317" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=29317</a>
      
      Attached is an example of this failure. I was orginally using v1.20,
      using $mech-&gt;inputs to try and find why a &#39;next&#39; button couldn&#39;t be
      found. Have now upgraded to 1.30 and added the $mech-&gt;find_all_inputs
      (find_all_submits has the same fault), and it&#39;s failing to find all the
      imputs/submits for this particular form.
      
      If you look at the view source for the page I&#39;m looking at
      (<a href="http://vienna.yapceurope.org/ye2007/search" rel="nofollow">http://vienna.yapceurope.org/ye2007/search</a>), you&#39;ll see that there is
      only one form, and that it terminates at the end of the page with a
      further hidden field and a second submit button. On subsequent pages
      there is another hidden field and a third submit button. Unfortunately
      all the above functions failed to find any of the extra inputs/submits,
      such that trying to submit the form with the named button fails.
      
      I&#39;m guessing that because there is other HTML code between the two, a
      closing tag within that form also closes the form automatically, even
      though it is still nested hasn&#39;t been closed.
      
      
      #!/usr/bin/perl -w
      use strict;
      
      #############################################################################
      #Library Modules #
      #############################################################################
      
      use WWW::Mechanize;
      
      #############################################################################
      #Global Variables #
      #############################################################################
      
      my $BASE = &#39;<a href="http://vienna.yapceurope.org/ye2007/search&#39;" rel="nofollow">http://vienna.yapceurope.org/ye2007/search&#39;;</a>
      
      my $mech = WWW::Mechanize-&gt;new();
      $mech-&gt;agent_alias( &#39;Linux Mozilla&#39; );
      
      #############################################################################
      #Code Block #
      #############################################################################
      
      $mech-&gt;get( $BASE );
      
      while($mech-&gt;success()) {
      my @forms = $mech-&gt;forms;
      for my $form (@forms) {
      print STDERR &quot;FORM: &quot;.$form-&gt;attr( &#39;name&#39; ).&#39;/&#39;.$form-&gt;attr( &#39;id&#39; ).&quot;\n&quot;;
      my @inputs = $form-&gt;inputs;
      for my $input (@inputs) {
      print STDERR &quot; INPUT: &quot;.$input-&gt;type().&#39;/&#39;.$input-&gt;name().&quot;\n&quot;;
      }
      }
      
      my @submits = $mech-&gt;find_all_submits();
      for my $submit (@submits) {
      print STDERR &quot; INPUT: &quot;.$submit-&gt;type().&#39;/&#39;.$submit-&gt;name().&quot;\n&quot;;
      }
      
      $mech-&gt;click_button( name =&gt; &#39;next&#39; );
      }
      
      
       
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 14](http://code.google.com/p/www-mechanize/issues/detail?id=14) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=14)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 13, 2007 <!-- Tue Nov 13 09:56:41 2007 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: $mech-&gt;find_all_inputs (and $mech-&gt;find_all_submits) doesn&#39;t
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:02:00 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 10:39:03 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=29317" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=29317</a>
        
        Attached is an example of this failure. I was orginally using v1.20,
        using $mech-&gt;inputs to try and find why a &#39;next&#39; button couldn&#39;t be
        found. Have now upgraded to 1.30 and added the $mech-&gt;find_all_inputs
        (find_all_submits has the same fault), and it&#39;s failing to find all the
        imputs/submits for this particular form.
        
        If you look at the view source for the page I&#39;m looking at
        (<a href="http://vienna.yapceurope.org/ye2007/search" rel="nofollow">http://vienna.yapceurope.org/ye2007/search</a>), you&#39;ll see that there is
        only one form, and that it terminates at the end of the page with a
        further hidden field and a second submit button. On subsequent pages
        there is another hidden field and a third submit button. Unfortunately
        all the above functions failed to find any of the extra inputs/submits,
        such that trying to submit the form with the named button fails.
        
        I&#39;m guessing that because there is other HTML code between the two, a
        closing tag within that form also closes the form automatically, even
        though it is still nested hasn&#39;t been closed.
        
        
        #!/usr/bin/perl -w
        use strict;
        
        #############################################################################
        #Library Modules #
        #############################################################################
        
        use WWW::Mechanize;
        
        #############################################################################
        #Global Variables #
        #############################################################################
        
        my $BASE = &#39;<a href="http://vienna.yapceurope.org/ye2007/search&#39;" rel="nofollow">http://vienna.yapceurope.org/ye2007/search&#39;;</a>
        
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;agent_alias( &#39;Linux Mozilla&#39; );
        
        #############################################################################
        #Code Block #
        #############################################################################
        
        $mech-&gt;get( $BASE );
        
        while($mech-&gt;success()) {
        my @forms = $mech-&gt;forms;
        for my $form (@forms) {
        print STDERR &quot;FORM: &quot;.$form-&gt;attr( &#39;name&#39; ).&#39;/&#39;.$form-&gt;attr( &#39;id&#39; ).&quot;\n&quot;;
        my @inputs = $form-&gt;inputs;
        for my $input (@inputs) {
        print STDERR &quot; INPUT: &quot;.$input-&gt;type().&#39;/&#39;.$input-&gt;name().&quot;\n&quot;;
        }
        }
        
        my @submits = $mech-&gt;find_all_submits();
        for my $submit (@submits) {
        print STDERR &quot; INPUT: &quot;.$submit-&gt;type().&#39;/&#39;.$submit-&gt;name().&quot;\n&quot;;
        }
        
        $mech-&gt;click_button( name =&gt; &#39;next&#39; );
        }
        
        
         
        </pre>
      reporter: petda...@gmail.com
    issue: 14
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: "WM: $mech->find_all_inputs (and $mech->find_all_submits) doesn't"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=14
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=15
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:02:08 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 10:50:04 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=22891" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=22891</a>
      
      From:  	henrywong@yahoo.com
      Download (untitled) [text/plain 1.6k]
      OK, the real problem turned out to be
      
      Mechanize seemed to discard the first URL after this &lt;a ame=&quot;anchor&quot;/&gt;
      tag in a html page.
      
      &lt;h1&gt; hello world&lt;/h1&gt; &lt;a name=&quot;anchor&quot;/&gt;
      &lt;p&gt;&lt;a href=&quot;<a href="http://www.url1.com/gi1?a=1&quot;&gt;test1&lt;/a&gt;&lt;p&gt;" rel="nofollow">http://www.url1.com/gi1?a=1&quot;&gt;test1&lt;/a&gt;&lt;p&gt;</a>
      &lt;p&gt;&lt;a href=&quot;<a href="http://www.url2.com/gi2?a=2&quot;&gt;test2&lt;/a&gt;&lt;p&gt;" rel="nofollow">http://www.url2.com/gi2?a=2&quot;&gt;test2&lt;/a&gt;&lt;p&gt;</a>
      
      
      mech-dump -links for above html code returns
      <a href="http://www.url2.com/gi2?a=2" rel="nofollow">http://www.url2.com/gi2?a=2</a>
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 15](http://code.google.com/p/www-mechanize/issues/detail?id=15) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=15)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:02:08 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 10:50:04 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=22891" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=22891</a>
        
        From:  	henrywong@yahoo.com
        Download (untitled) [text/plain 1.6k]
        OK, the real problem turned out to be
        
        Mechanize seemed to discard the first URL after this &lt;a ame=&quot;anchor&quot;/&gt;
        tag in a html page.
        
        &lt;h1&gt; hello world&lt;/h1&gt; &lt;a name=&quot;anchor&quot;/&gt;
        &lt;p&gt;&lt;a href=&quot;<a href="http://www.url1.com/gi1?a=1&quot;&gt;test1&lt;/a&gt;&lt;p&gt;" rel="nofollow">http://www.url1.com/gi1?a=1&quot;&gt;test1&lt;/a&gt;&lt;p&gt;</a>
        &lt;p&gt;&lt;a href=&quot;<a href="http://www.url2.com/gi2?a=2&quot;&gt;test2&lt;/a&gt;&lt;p&gt;" rel="nofollow">http://www.url2.com/gi2?a=2&quot;&gt;test2&lt;/a&gt;&lt;p&gt;</a>
        
        
        mech-dump -links for above html code returns
        <a href="http://www.url2.com/gi2?a=2" rel="nofollow">http://www.url2.com/gi2?a=2</a>
        
        </pre>
      reporter: petda...@gmail.com
    issue: 15
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Mechanize seemed to discard the first URL after this <a name="anchor"/> tag in a html page'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=15
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=19
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:07:29 2011
        inner:
          - key: Owner
            value: ---
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 11:33:22 2007 -->
      
      <pre>
      Originally at <a href="http://rt.cpan.org/Ticket/Display.html?id=27751" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=27751</a>
      
      From:  	&quot;Krieg, Jeremy&quot; &lt;Jeremy.Krieg@youramigo.com&gt;
      Download (untitled) [text/plain 506b]
      I ran into a page which had a meta refresh tag looking something like as
      follows:
      
      &lt;meta content=&quot;0; url=&#39;<a href="http://www.mysite.com/&#39;" rel="nofollow">http://www.mysite.com/&#39;</a>&quot; http-equiv=&quot;refresh&quot;&gt;
      
      Mechanize successfully parsed out the URL, however it did not strip the
      single quotes from it. So when I went to follow the link, I ended up at:
      
      <a href="http://www.mysite.com&#39;" rel="nofollow">http://www.origsite.com/&#39;http://www.mysite.com&#39;</a>
      
      Firefox handles this correctly.
      
      It would be nice if Mechanize stripped the quotes out too.
      
      The version of Mechanize that I am reporting against is 1.18
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 19](http://code.google.com/p/www-mechanize/issues/detail?id=19) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=19)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:07:29 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Owner : ---
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 11:33:22 2007
      description: |-
        <pre>
        Originally at <a href="http://rt.cpan.org/Ticket/Display.html?id=27751" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=27751</a>
        
        From:  	&quot;Krieg, Jeremy&quot; &lt;Jeremy.Krieg@youramigo.com&gt;
        Download (untitled) [text/plain 506b]
        I ran into a page which had a meta refresh tag looking something like as
        follows:
        
        &lt;meta content=&quot;0; url=&#39;<a href="http://www.mysite.com/&#39;" rel="nofollow">http://www.mysite.com/&#39;</a>&quot; http-equiv=&quot;refresh&quot;&gt;
        
        Mechanize successfully parsed out the URL, however it did not strip the
        single quotes from it. So when I went to follow the link, I ended up at:
        
        <a href="http://www.mysite.com&#39;" rel="nofollow">http://www.origsite.com/&#39;http://www.mysite.com&#39;</a>
        
        Firefox handles this correctly.
        
        It would be nice if Mechanize stripped the quotes out too.
        
        The version of Mechanize that I am reporting against is 1.18
        </pre>
      reporter: petda...@gmail.com
    issue: 19
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: "WM: doesn't strip quotes from url in meta refresh"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=19
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=21
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:07:44 2011
        inner:
          - key: Owner
            value: ---
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 11:44:24 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=19595" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19595</a>
      
      Not sure if anyone else has the same issue. I have been really trying to
      get this module to work for me. I can get LWP working with http and
      https but can&#39;t get Medch to work. Used ethereal to analyse the issue
      and came up with this.
      
      With LWP I get the following:
      GET / HTTP/1.1
      TE: deflate,gzip;q=0.3
      Connection: TE, close
      Host: www-my-server
      User-Agent: MyApp/0.1 libwww-perl/5.805
      
      Result:
      
      HTTP/1.1 200 OK
      Server: Sun-ONE-Server
      Date: Tue, 30 May 2006 06:43:17 GMT
      Content-length: 3043
      Content-type: text/html
      Last-modified: Thu, 23 Mar 2006 02:42:57 GMT
      Connection: close
      
      
      With Mech I get the following:
      
      GET http://www-my-server/ HTTP/1.1
      TE: deflate,gzip;q=0.3
      Connection: TE, close
      Accept-Encoding: identity
      Host: www-my-server
      User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
      
      Result: Time out on proxy server. Proxy could not resolve it. I have no
      access to the proxy tables so can&#39;t change that.
      
      Here is my code
      #!/usr/bin/perl -w
      use strict;
      use warnings;
      use WWW::Mechanize;
      
      my $url = &quot;http://www-my-server/&quot;;
      my $m = WWW::Mechanize-&gt;new();
      $m-&gt;agent_alias(&#39;Windows IE 6&#39;);
      $m-&gt;proxy([&#39;http&#39;,&#39;ftp&#39;], &#39;http://proxy:8080/&#39;);
      $m-&gt;get($url);
      print $m-&gt;content;
      
      comments:
      LWP issues the command &quot;GET /&quot; while Mech issues the command
      &quot;GET HTTP://www-my-server/&quot;
      Why is that? Is this a bug or is it supposed to work like this? My
      thoughts are that since it&#39;s a derived class it should issue the same
      http protocol calls.
      
      Thanks Digit
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 21](http://code.google.com/p/www-mechanize/issues/detail?id=21) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=21)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:07:44 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Owner : ---
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 11:44:24 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=19595" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19595</a>
        
        Not sure if anyone else has the same issue. I have been really trying to
        get this module to work for me. I can get LWP working with http and
        https but can&#39;t get Medch to work. Used ethereal to analyse the issue
        and came up with this.
        
        With LWP I get the following:
        GET / HTTP/1.1
        TE: deflate,gzip;q=0.3
        Connection: TE, close
        Host: www-my-server
        User-Agent: MyApp/0.1 libwww-perl/5.805
        
        Result:
        
        HTTP/1.1 200 OK
        Server: Sun-ONE-Server
        Date: Tue, 30 May 2006 06:43:17 GMT
        Content-length: 3043
        Content-type: text/html
        Last-modified: Thu, 23 Mar 2006 02:42:57 GMT
        Connection: close
        
        
        With Mech I get the following:
        
        GET http://www-my-server/ HTTP/1.1
        TE: deflate,gzip;q=0.3
        Connection: TE, close
        Accept-Encoding: identity
        Host: www-my-server
        User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
        
        Result: Time out on proxy server. Proxy could not resolve it. I have no
        access to the proxy tables so can&#39;t change that.
        
        Here is my code
        #!/usr/bin/perl -w
        use strict;
        use warnings;
        use WWW::Mechanize;
        
        my $url = &quot;http://www-my-server/&quot;;
        my $m = WWW::Mechanize-&gt;new();
        $m-&gt;agent_alias(&#39;Windows IE 6&#39;);
        $m-&gt;proxy([&#39;http&#39;,&#39;ftp&#39;], &#39;http://proxy:8080/&#39;);
        $m-&gt;get($url);
        print $m-&gt;content;
        
        comments:
        LWP issues the command &quot;GET /&quot; while Mech issues the command
        &quot;GET HTTP://www-my-server/&quot;
        Why is that? Is this a bug or is it supposed to work like this? My
        thoughts are that since it&#39;s a derived class it should issue the same
        http protocol calls.
        
        Thanks Digit
        </pre>
      reporter: petda...@gmail.com
    issue: 21
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Possible HTTP protocol issue - checked with ethereal'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=21
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=22
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:08:02 2011
        inner:
          - key: Owner
            value: ---
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 12:17:45 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=19308" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19308</a>
      
      The base_href parameter for the content method works by doing
      
      $content=~s/&lt;head&gt;/&lt;head&gt;\n&lt;base href=&quot;$arg&quot;&gt;/;
      
      (line 509 of Mechanize.pm v 1.18)
      
      You need at least to add the i flag to the regexp, and most likely to be
      able to cope with cases when there is no head tag. Accounting for cases
      where the head has attributes is probably slightly overkill (but easy).
      
      The fix below replaces line 509, the attached file conatins tests.
      
      Note that a real fix would entail using an HTML parser to capture the
      real head element.
      
      if( $content=~ /&lt;head/i) {
      $content=~ s/(&lt;head[^&gt;]*&gt;)/$1\n&lt;base href=&quot;$arg&quot;&gt;/i;
      }
      elsif( $content=~ /&lt;html/) {
      $content=~ s/(&lt;html[^&gt;]*&gt;)/$1\n&lt;head&gt;&lt;base
      href=&quot;$arg&quot;&gt;&lt;\/head&gt;/i;
      }
      else {
      $content= qq{&lt;html&gt;&lt;head&gt;&lt;base
      href=&quot;$arg&quot;&gt;&lt;/head&gt;$content&lt;/html&gt;};
      }
      
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 22](http://code.google.com/p/www-mechanize/issues/detail?id=22) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=22)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:08:02 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Owner : ---
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 12:17:45 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=19308" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19308</a>
        
        The base_href parameter for the content method works by doing
        
        $content=~s/&lt;head&gt;/&lt;head&gt;\n&lt;base href=&quot;$arg&quot;&gt;/;
        
        (line 509 of Mechanize.pm v 1.18)
        
        You need at least to add the i flag to the regexp, and most likely to be
        able to cope with cases when there is no head tag. Accounting for cases
        where the head has attributes is probably slightly overkill (but easy).
        
        The fix below replaces line 509, the attached file conatins tests.
        
        Note that a real fix would entail using an HTML parser to capture the
        real head element.
        
        if( $content=~ /&lt;head/i) {
        $content=~ s/(&lt;head[^&gt;]*&gt;)/$1\n&lt;base href=&quot;$arg&quot;&gt;/i;
        }
        elsif( $content=~ /&lt;html/) {
        $content=~ s/(&lt;html[^&gt;]*&gt;)/$1\n&lt;head&gt;&lt;base
        href=&quot;$arg&quot;&gt;&lt;\/head&gt;/i;
        }
        else {
        $content= qq{&lt;html&gt;&lt;head&gt;&lt;base
        href=&quot;$arg&quot;&gt;&lt;/head&gt;$content&lt;/html&gt;};
        }
        
        
        
        </pre>
      reporter: petda...@gmail.com
    issue: 22
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: base_href works only if <head> can be found in the html'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=22
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=23
    comments:
      - author: HQZ...@gmail.com
        comment: |-
          I meet the same issue with your and the <SELECT> field have two diffrences state in 
          perl when the tag of <SELECT> AND <SELECT multiple>. Could your tell me how to do it 
          . 
          
          Thanks
          
          ER
        date: 'Mar 19, 2008'
        date_long: Wed Mar 19 10:01:45 2008
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:08:16 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:00:54 2007 -->
      
      <pre>
      From:  	&quot;Erik Rantapaa&quot; &lt;erantapaa@gmail.com&gt;
      Download (untitled) [text/plain 319b]
      Hi,
      
      I like WWW::Mechanize a lot, but I&#39;d like to request one small feature...
      
      it turns out I need to set a &lt;SELECT&gt; field to a value not represented
      by an &lt;OPTION&gt; tag. The method -&gt;field(name, value) won&#39;t let me do
      this. Can you add another method to by-pass that check or suggest
      another work-around?
      
      Thanks,
      
      ER
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 23](http://code.google.com/p/www-mechanize/issues/detail?id=23) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=23)
      
      * **Type**:      Enhancement
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **HQZ...@gmail.com** commented on Mar 19, 2008 <!-- Wed Mar 19 10:01:45 2008 -->:
      
      <pre>
      I meet the same issue with your and the <SELECT> field have two diffrences state in 
      perl when the tag of <SELECT> AND <SELECT multiple>. Could your tell me how to do it 
      . 
      
      Thanks
      
      ER
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:08:16 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:00:54 2007
      description: |-
        <pre>
        From:  	&quot;Erik Rantapaa&quot; &lt;erantapaa@gmail.com&gt;
        Download (untitled) [text/plain 319b]
        Hi,
        
        I like WWW::Mechanize a lot, but I&#39;d like to request one small feature...
        
        it turns out I need to set a &lt;SELECT&gt; field to a value not represented
        by an &lt;OPTION&gt; tag. The method -&gt;field(name, value) won&#39;t let me do
        this. Can you add another method to by-pass that check or suggest
        another work-around?
        
        Thanks,
        
        ER
        </pre>
      reporter: petda...@gmail.com
    issue: 23
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Enhancement
    title: 'WM: set a <SELECT> field to a value not represented in an <OPTION>'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=23
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=24
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:56:50 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:02:38 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=25494" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=25494</a>
      
      From:  	Kake L Pugh &lt;kake@earth.li&gt;
      Download (untitled) [text/plain 1k]
      Hello! I don&#39;t know if this is a bug in WWW::Mechanize or in me, but
      I noticed that Mechanize doesn&#39;t seem to be using the right
      line-endings for multi-line textareas. Normally this wouldn&#39;t really
      be noticeable, but I have a web app (OpenGuides, it&#39;s on CPAN) that
      lets people enter categories one-per-line in a textbox. The CGI
      standard is to represent a newline with \r\n (regardless of platform),
      so OpenGuides splits on \r\n to get the individual categories.
      
      The problem is that when I use -&gt;submit_form in Mechanize to alter
      some data in an edit form that already has a couple of categories
      filled in, the categories get mangled from e.g. &quot;Category A&quot;,
      &quot;Category B&quot; to &quot;Category A%0ACategory B&quot;. I think this is because
      Mechanize is sending back the data with just \n instead of \r\n.
      
      Anyway, I don&#39;t know if this is something you&#39;d like to
      address/change, or indeed if it&#39;s me being broken, but I thought I&#39;d
      let you know.
      
      Can you let me know when you&#39;ve seen this, please? Just a quick reply
      saying &quot;yes, have seen it&quot; is fine; I&#39;m happy to wait for a longer reply.
      
      Thanks for your time!
      
      Kake
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 24](http://code.google.com/p/www-mechanize/issues/detail?id=24) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=24)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:56:50 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:02:38 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=25494" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=25494</a>
        
        From:  	Kake L Pugh &lt;kake@earth.li&gt;
        Download (untitled) [text/plain 1k]
        Hello! I don&#39;t know if this is a bug in WWW::Mechanize or in me, but
        I noticed that Mechanize doesn&#39;t seem to be using the right
        line-endings for multi-line textareas. Normally this wouldn&#39;t really
        be noticeable, but I have a web app (OpenGuides, it&#39;s on CPAN) that
        lets people enter categories one-per-line in a textbox. The CGI
        standard is to represent a newline with \r\n (regardless of platform),
        so OpenGuides splits on \r\n to get the individual categories.
        
        The problem is that when I use -&gt;submit_form in Mechanize to alter
        some data in an edit form that already has a couple of categories
        filled in, the categories get mangled from e.g. &quot;Category A&quot;,
        &quot;Category B&quot; to &quot;Category A%0ACategory B&quot;. I think this is because
        Mechanize is sending back the data with just \n instead of \r\n.
        
        Anyway, I don&#39;t know if this is something you&#39;d like to
        address/change, or indeed if it&#39;s me being broken, but I thought I&#39;d
        let you know.
        
        Can you let me know when you&#39;ve seen this, please? Just a quick reply
        saying &quot;yes, have seen it&quot; is fine; I&#39;m happy to wait for a longer reply.
        
        Thanks for your time!
        
        Kake
        </pre>
      reporter: petda...@gmail.com
    issue: 24
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Possible problem with multi-line textareas'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=24
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=25
    comments:
      - author: rou...@gmail.com
        comment: Are there any known workarounds or fixes to this issue?
        date: 'Mar 14, 2008'
        date_long: Fri Mar 14 12:12:54 2008
        inner: ~
      - author: asender....@gmail.com
        comment: |-
          $mech->form_number(1)->push_input ('hidden', { id => '__EVENTTARGET',
                                                          name =>
          '__EVENTTARGET',
                                                          value =>
          'chkFileSystem'}); 
          
          It really helped save me from pulling my hair out.
          
          asender
          
          On Oct 2 2008, 11:53 am, Eric <eric.har...@gmail.com> wrote:
          > I upgraded Mechanize 1.34 and found a few issues.  One of the sites I
          > use Mechanize for is a .NET application and I used to fill in the
          > __EVENTTARGET and __EVENTARGUMENT using
          > 
          > $agent->field ('__EVENTTARGET', 'chkFileSystem');
          > 
          > This, however, crashes the script with a nasty message "No such field
          > __EVENTTARGET ... "
          > I had to change it to
          > 
          > $form->push_input ('hidden', { id => '__EVENTTARGET',
          >                                                 name =>
          > '__EVENTTARGET',
          >                                                 value =>
          > 'chkFileSystem'});
          > 
          > where form is the current form being populated.  Hopefully, this helps
          > someone from pulling their hair out.
          > 
          > Then I found out that all my basic authentication has broken on all of
          > my scripts.  I used to use
          > 
          > my $agent = WWW::Mechanize->new ();
          > $agent->credentials ($blah, $blah2, $user => $password);
          > $agent->get ($protected_page);
          > 
          > This now fails with
          > 
          > Use of uninitialized value in concatenation (.) or string at /usr/lib/
          > perl5/site_perl/5.8.8/LWP/Authen/Basic.pm line 8.
          > 
          > I got a new libwww, and this doesn't fix the problem.  I finally found
          > a way using Base64::encode  that was documented somewhere.
          > 
          >         my $agent = WWW::Mechanize->new();
          >        my @args = (
          >              Authorization => "Basic " .
          >              MIME::Base64::encode( $USER . ':' . $PASSWORD )
          >     );
          > 
          >         $agent->get( $protected_page", @args );
          > 
          > And this gives me the page, however, when I do a submit of a form on
          > the page, I get HTTP 401.  Is there a way to pass the credentials or
          > set the credentials for the site/page so I can submit the form?
          > 
          > So Mechanize gurus, how should I be accessing pages protected by basic
          > authentication so that I can submit forms and work on them?  Does this
          > version of Mechanize handle NTLM protected pages?  How can I do that?
        date: 'Mar 18, 2010'
        date_long: Thu Mar 18 10:37:59 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
      - author: thyt...@gmail.com
        comment: |-
          <input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="/wEWFwKLzJLoBwKQvJPWDQKQvO/WDQKQvPvWDQKQvPfWDQKQvOPWDQKQvP/WDQKQvMvWDQKQvMfWDQL+tqPmDAKVn4GbCQKMpfaTCwKQvJPWDQKQvO/WDQKQvPvWDQKQvPfWDQKQvOPWDQKQvP/WDQKQvMvWDQKQvMfWDQL+tqPmDAKVn4GbCQKMpfaTC5Mp0D49tCrX0OwZwTEebzy2rPHK" />
          
          please help
        date: 'Mar 6, 2012'
        date_long: Tue Mar  6 19:11:40 2012
        inner: ~
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:13:47 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=18521" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18521</a>
      
      Best way to show this is with an example:
      
      In this HTML snippet:
      &lt;form name=&quot;aspnetForm&quot; method=&quot;post&quot; action=&quot;Browse.aspx?
      MyToken=632797078501515540&quot; id=&quot;aspnetForm&quot;&gt;
      &lt;div&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;__EVENTTARGET&quot; id=&quot;__EVENTTARGET&quot; value=&quot;&quot; /&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;__EVENTARGUMENT&quot; id=&quot;__EVENTARGUMENT&quot; value=&quot;&quot; /&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;/wEPDwUJ&quot; /&gt;
      &lt;/div&gt;
      [...]
      &lt;/form&gt;
      
      One should see three fields in a $mech-&gt;current_form-&gt;dump, but one only sees
      &quot;__VIEWSTATE&quot;.
      
      And of course if one tries to do this:
      
      $mech-&gt;set_fields( &#39;__EVENTTARGET&#39; =&gt; &#39;mynewvalue&#39; );
      
      WWW::Mechanize dies:
      No such field &#39;__EVENTTARGET&#39; at /Library/Perl/5.8.6/WWW/Mechanize.pm line 1178
      
      
      I can see why this would be coded, because why store an empty hidden field?
      In this case, the site uses javascript to set the field, so they include it
      in the form as an empty
      hiden field, then use JavaScript to fill in the value and do the submit
      (hack hack).
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 25](http://code.google.com/p/www-mechanize/issues/detail?id=25) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=25)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **rou...@gmail.com** commented on Mar 14, 2008 <!-- Fri Mar 14 12:12:54 2008 -->:
      
      <pre>
      Are there any known workarounds or fixes to this issue?
      </pre>
      
      
      **asender....@gmail.com** commented on Mar 18, 2010 <!-- Thu Mar 18 10:37:59 2010 -->:
      
      <pre>
      $mech->form_number(1)->push_input ('hidden', { id => '__EVENTTARGET',
                                                      name =>
      '__EVENTTARGET',
                                                      value =>
      'chkFileSystem'}); 
      
      It really helped save me from pulling my hair out.
      
      asender
      
      On Oct 2 2008, 11:53 am, Eric <eric.har...@gmail.com> wrote:
      > I upgraded Mechanize 1.34 and found a few issues.  One of the sites I
      > use Mechanize for is a .NET application and I used to fill in the
      > __EVENTTARGET and __EVENTARGUMENT using
      > 
      > $agent->field ('__EVENTTARGET', 'chkFileSystem');
      > 
      > This, however, crashes the script with a nasty message "No such field
      > __EVENTTARGET ... "
      > I had to change it to
      > 
      > $form->push_input ('hidden', { id => '__EVENTTARGET',
      >                                                 name =>
      > '__EVENTTARGET',
      >                                                 value =>
      > 'chkFileSystem'});
      > 
      > where form is the current form being populated.  Hopefully, this helps
      > someone from pulling their hair out.
      > 
      > Then I found out that all my basic authentication has broken on all of
      > my scripts.  I used to use
      > 
      > my $agent = WWW::Mechanize->new ();
      > $agent->credentials ($blah, $blah2, $user => $password);
      > $agent->get ($protected_page);
      > 
      > This now fails with
      > 
      > Use of uninitialized value in concatenation (.) or string at /usr/lib/
      > perl5/site_perl/5.8.8/LWP/Authen/Basic.pm line 8.
      > 
      > I got a new libwww, and this doesn't fix the problem.  I finally found
      > a way using Base64::encode  that was documented somewhere.
      > 
      >         my $agent = WWW::Mechanize->new();
      >        my @args = (
      >              Authorization => "Basic " .
      >              MIME::Base64::encode( $USER . ':' . $PASSWORD )
      >     );
      > 
      >         $agent->get( $protected_page", @args );
      > 
      > And this gives me the page, however, when I do a submit of a form on
      > the page, I get HTTP 401.  Is there a way to pass the credentials or
      > set the credentials for the site/page so I can submit the form?
      > 
      > So Mechanize gurus, how should I be accessing pages protected by basic
      > authentication so that I can submit forms and work on them?  Does this
      > version of Mechanize handle NTLM protected pages?  How can I do that?
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **thyt...@gmail.com** commented on Mar 6, 2012 <!-- Tue Mar  6 19:11:40 2012 -->:
      
      <pre>
      <input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="/wEWFwKLzJLoBwKQvJPWDQKQvO/WDQKQvPvWDQKQvPfWDQKQvOPWDQKQvP/WDQKQvMvWDQKQvMfWDQL+tqPmDAKVn4GbCQKMpfaTCwKQvJPWDQKQvO/WDQKQvPvWDQKQvPfWDQKQvOPWDQKQvP/WDQKQvMvWDQKQvMfWDQL+tqPmDAKVn4GbCQKMpfaTC5Mp0D49tCrX0OwZwTEebzy2rPHK" />
      
      please help
      </pre>
      

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:13:47 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=18521" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18521</a>
        
        Best way to show this is with an example:
        
        In this HTML snippet:
        &lt;form name=&quot;aspnetForm&quot; method=&quot;post&quot; action=&quot;Browse.aspx?
        MyToken=632797078501515540&quot; id=&quot;aspnetForm&quot;&gt;
        &lt;div&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;__EVENTTARGET&quot; id=&quot;__EVENTTARGET&quot; value=&quot;&quot; /&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;__EVENTARGUMENT&quot; id=&quot;__EVENTARGUMENT&quot; value=&quot;&quot; /&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;/wEPDwUJ&quot; /&gt;
        &lt;/div&gt;
        [...]
        &lt;/form&gt;
        
        One should see three fields in a $mech-&gt;current_form-&gt;dump, but one only sees
        &quot;__VIEWSTATE&quot;.
        
        And of course if one tries to do this:
        
        $mech-&gt;set_fields( &#39;__EVENTTARGET&#39; =&gt; &#39;mynewvalue&#39; );
        
        WWW::Mechanize dies:
        No such field &#39;__EVENTTARGET&#39; at /Library/Perl/5.8.6/WWW/Mechanize.pm line 1178
        
        
        I can see why this would be coded, because why store an empty hidden field?
        In this case, the site uses javascript to set the field, so they include it
        in the form as an empty
        hiden field, then use JavaScript to fill in the value and do the submit
        (hack hack).
        </pre>
      reporter: petda...@gmail.com
    issue: 25
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: Hidden fields don't appear in current_form if their value=\"\""
    url: http://code.google.com/p/www-mechanize/issues/detail?id=25
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=26
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 13, 2007'
        date_long: Tue Nov 13 09:54:48 2007
        inner:
          - key: Summary
            value: 'WM: value() doesn&#39;t support multiple checkboxes with the same name.'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:16:52 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=18399" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18399</a>
      
      I appear to be having difficulty attaching files, so I&#39;ll include some
      cut and paste here as well.
      
      I&#39;m attempting to walk through a tick every checkbox with a given name.
      I don&#39;t care what the value is, I want to tick all of them. I thought
      I&#39;d start by getting the value, so that I could pass the name and value
      to tick. The HTML is pretty straight forward:
      
      &lt;form method=&quot;POST&quot; action=&quot;test.cgi&quot;&gt;
      &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;1111&quot; &gt;1111
      &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;2222&quot; &gt;2222
      &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;3333&quot; &gt;3333
      &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;4444&quot; &gt;4444
      &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;5555&quot; &gt;5555
      &lt;/form&gt;
      
      And the code is as well:
      
      #!/usr/bin/perl -w
      use strict;
      use WWW::Mechanize;
      use Data::Dumper;
      
      my $mech = WWW::Mechanize-&gt;new();
      $mech-&gt;get(&quot;http://localhost/~jarich/abc.html&quot;);
      
      print Dumper $mech-&gt;forms();
      print scalar $mech-&gt;value(&quot;check&quot;, 1);
      
      Unfortunately for all field numbers I pass to value I get a undefined
      value, when I expected to receive &quot;1111&quot; or &quot;2222&quot;. Interestingly, if I
      edit the HTML to say that the field is &quot;checked&quot; then value returns the
      expected value &quot;1111&quot; etc.
      
      The data dump for each unchecked data dump looks like:
      
      bless( {
      &#39;current&#39; =&gt; 0,
      &#39;menu&#39; =&gt; [
      {
      &#39;seen&#39; =&gt; 1,
      &#39;value&#39; =&gt; undef,
      &#39;name&#39; =&gt; &#39;off&#39;
      },
      {
      &#39;value&#39; =&gt; &#39;1111&#39;,
      &#39;name&#39; =&gt; &#39;1111&#39;
      }
      ],
      &#39;name&#39; =&gt; &#39;check&#39;,
      &#39;type&#39; =&gt; &#39;checkbox&#39;
      }, &#39;HTML::Form::ListInput&#39; ),
      
      If the checkbox is checked however it looks like:
      
      bless( {
      &#39;current&#39; =&gt; 1,
      &#39;menu&#39; =&gt; [
      {
      &#39;value&#39; =&gt; undef,
      &#39;name&#39; =&gt; &#39;off&#39;
      },
      {
      &#39;seen&#39; =&gt; 1,
      &#39;value&#39; =&gt; &#39;3333&#39;,
      &#39;name&#39; =&gt; &#39;3333&#39;
      }
      ],
      &#39;name&#39; =&gt; &#39;check&#39;,
      &#39;type&#39; =&gt; &#39;checkbox&#39;
      }, &#39;HTML::Form::ListInput&#39; ),
      
      where the value of current and the hash with the &quot;seen&quot; value appears to
      map to whether the checkbox is checked upon loading.
      
      I&#39;m hoping a work around will be to walk through the structure and set
      current =&gt; 1 for each element with the name &quot;check&quot;.
      
      ----
      
      &gt; I&#39;m hoping a work around will be to walk through the structure and set
      &gt; current =&gt; 1 for each element with the name &quot;check&quot;.
      
      For the curious this work around seemed to do all I needed it to do.
      
      &lt;pre&gt;
      # Grab the first form out.
      my @forms = $mech-&gt;forms();
      my $form = $forms[0];
      
      # Check all the boxes
      foreach my $input ( @{$form-&gt;{inputs}} ) {
      next unless $input-&gt;{name} eq &quot;check&quot;;
      
      $input-&gt;{current} = 1;
      }
      &lt;/pre&gt;
      
      
      ----
      
      &gt; # Grab the first form out.
      &gt; my @forms = $mech-&gt;forms();
      &gt; my $form = $forms[0];
      &gt;
      &gt; # Check all the boxes
      &gt; foreach my $input ( @{$form-&gt;{inputs}} ) {
      &gt; next unless $input-&gt;{name} eq &quot;check&quot;;
      &gt;
      &gt; $input-&gt;{current} = 1;
      &gt; }
      
      A better solution is to use the HTML::Form interface:
      
      # Grab the first form out.
      my ($form) = $mech-&gt;forms;
      
      # Check all the boxes
      foreach my $input ($form-&gt;inputs) {
      my $name = $input-&gt;name || next;
      next unless $input-&gt;type eq &#39;checkbox&#39;;
      next unless $name eq &quot;check&quot;;
      $input-&gt;check;
      }
      
      I&#39;ve been thinking about whether this is a problem with value() not
      working as expected, or whether this is a problem with the word value
      having two meanings.
      
      On one hand it makes sense for the value() method to return undef if the
      checkbox is unchecked, as that&#39;s what will will be passed through to the
      web server when the form is submitted. On the other hand, in the HTML
      the keyword value is used to specify the value that would be passed
      through if the check box was checked. value() appears to act as the
      former suggests; returning undef for all unchecked check boxes and
      returning the value for all checked check boxes.
      
      Unfortunately I&#39;m still unclear as to how (using Mech) to get the value
      I need to pass into tick().
      
      I think essentially that this is really a documentation bug regarding
      the purpose of value() (and maybe regarding the use of tick) than a code
      bug. Assuming that value is supposed to behave the way it does. ;)
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 26](http://code.google.com/p/www-mechanize/issues/detail?id=26) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=26)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 13, 2007 <!-- Tue Nov 13 09:54:48 2007 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: value() doesn&#39;t support multiple checkboxes with the same name.
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:16:52 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=18399" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18399</a>
        
        I appear to be having difficulty attaching files, so I&#39;ll include some
        cut and paste here as well.
        
        I&#39;m attempting to walk through a tick every checkbox with a given name.
        I don&#39;t care what the value is, I want to tick all of them. I thought
        I&#39;d start by getting the value, so that I could pass the name and value
        to tick. The HTML is pretty straight forward:
        
        &lt;form method=&quot;POST&quot; action=&quot;test.cgi&quot;&gt;
        &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;1111&quot; &gt;1111
        &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;2222&quot; &gt;2222
        &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;3333&quot; &gt;3333
        &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;4444&quot; &gt;4444
        &lt;input type=&quot;checkbox&quot; name=&quot;check&quot; value=&quot;5555&quot; &gt;5555
        &lt;/form&gt;
        
        And the code is as well:
        
        #!/usr/bin/perl -w
        use strict;
        use WWW::Mechanize;
        use Data::Dumper;
        
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;http://localhost/~jarich/abc.html&quot;);
        
        print Dumper $mech-&gt;forms();
        print scalar $mech-&gt;value(&quot;check&quot;, 1);
        
        Unfortunately for all field numbers I pass to value I get a undefined
        value, when I expected to receive &quot;1111&quot; or &quot;2222&quot;. Interestingly, if I
        edit the HTML to say that the field is &quot;checked&quot; then value returns the
        expected value &quot;1111&quot; etc.
        
        The data dump for each unchecked data dump looks like:
        
        bless( {
        &#39;current&#39; =&gt; 0,
        &#39;menu&#39; =&gt; [
        {
        &#39;seen&#39; =&gt; 1,
        &#39;value&#39; =&gt; undef,
        &#39;name&#39; =&gt; &#39;off&#39;
        },
        {
        &#39;value&#39; =&gt; &#39;1111&#39;,
        &#39;name&#39; =&gt; &#39;1111&#39;
        }
        ],
        &#39;name&#39; =&gt; &#39;check&#39;,
        &#39;type&#39; =&gt; &#39;checkbox&#39;
        }, &#39;HTML::Form::ListInput&#39; ),
        
        If the checkbox is checked however it looks like:
        
        bless( {
        &#39;current&#39; =&gt; 1,
        &#39;menu&#39; =&gt; [
        {
        &#39;value&#39; =&gt; undef,
        &#39;name&#39; =&gt; &#39;off&#39;
        },
        {
        &#39;seen&#39; =&gt; 1,
        &#39;value&#39; =&gt; &#39;3333&#39;,
        &#39;name&#39; =&gt; &#39;3333&#39;
        }
        ],
        &#39;name&#39; =&gt; &#39;check&#39;,
        &#39;type&#39; =&gt; &#39;checkbox&#39;
        }, &#39;HTML::Form::ListInput&#39; ),
        
        where the value of current and the hash with the &quot;seen&quot; value appears to
        map to whether the checkbox is checked upon loading.
        
        I&#39;m hoping a work around will be to walk through the structure and set
        current =&gt; 1 for each element with the name &quot;check&quot;.
        
        ----
        
        &gt; I&#39;m hoping a work around will be to walk through the structure and set
        &gt; current =&gt; 1 for each element with the name &quot;check&quot;.
        
        For the curious this work around seemed to do all I needed it to do.
        
        &lt;pre&gt;
        # Grab the first form out.
        my @forms = $mech-&gt;forms();
        my $form = $forms[0];
        
        # Check all the boxes
        foreach my $input ( @{$form-&gt;{inputs}} ) {
        next unless $input-&gt;{name} eq &quot;check&quot;;
        
        $input-&gt;{current} = 1;
        }
        &lt;/pre&gt;
        
        
        ----
        
        &gt; # Grab the first form out.
        &gt; my @forms = $mech-&gt;forms();
        &gt; my $form = $forms[0];
        &gt;
        &gt; # Check all the boxes
        &gt; foreach my $input ( @{$form-&gt;{inputs}} ) {
        &gt; next unless $input-&gt;{name} eq &quot;check&quot;;
        &gt;
        &gt; $input-&gt;{current} = 1;
        &gt; }
        
        A better solution is to use the HTML::Form interface:
        
        # Grab the first form out.
        my ($form) = $mech-&gt;forms;
        
        # Check all the boxes
        foreach my $input ($form-&gt;inputs) {
        my $name = $input-&gt;name || next;
        next unless $input-&gt;type eq &#39;checkbox&#39;;
        next unless $name eq &quot;check&quot;;
        $input-&gt;check;
        }
        
        I&#39;ve been thinking about whether this is a problem with value() not
        working as expected, or whether this is a problem with the word value
        having two meanings.
        
        On one hand it makes sense for the value() method to return undef if the
        checkbox is unchecked, as that&#39;s what will will be passed through to the
        web server when the form is submitted. On the other hand, in the HTML
        the keyword value is used to specify the value that would be passed
        through if the check box was checked. value() appears to act as the
        former suggests; returning undef for all unchecked check boxes and
        returning the value for all checked check boxes.
        
        Unfortunately I&#39;m still unclear as to how (using Mech) to get the value
        I need to pass into tick().
        
        I think essentially that this is really a documentation bug regarding
        the purpose of value() (and maybe regarding the use of tick) than a code
        bug. Assuming that value is supposed to behave the way it does. ;)
        
        
        </pre>
      reporter: petda...@gmail.com
    issue: 26
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: value() doesn't support multiple checkboxes with the same name."
    url: http://code.google.com/p/www-mechanize/issues/detail?id=26
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=27
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:20:39 2007 -->
      
      <pre>
      
      
      For the -&gt;fields method, please document what the return values are for
      this method, and what happens if -&gt;fields is called on a field name that
      does not exist.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 27](http://code.google.com/p/www-mechanize/issues/detail?id=27) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=27)
      
      * **Type**:      Enhancement
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:20:39 2007
      description: |-
        <pre>
        
        
        For the -&gt;fields method, please document what the return values are for
        this method, and what happens if -&gt;fields is called on a field name that
        does not exist.
        </pre>
      reporter: petda...@gmail.com
    issue: 27
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Enhancement
    title: 'WM: Document ->fields return values and error conditions'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=27
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=28
    comments:
      - author: petda...@gmail.com
        comment: 'I like the idea, but it needs to be more arbitrary, not just hidden fields.'
        date: 'Nov 20, 2008'
        date_long: Thu Nov 20 08:25:00 2008
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:23:39 2007 -->
      
      <pre>
      From Peter Scott at <a href="http://rt.cpan.org/Ticket/Display.html?id=16690" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=16690</a>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 28](http://code.google.com/p/www-mechanize/issues/detail?id=28) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=28)
      
      * **Type**:      Enhancement
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 20, 2008 <!-- Thu Nov 20 08:25:00 2008 -->:
      
      <pre>
      I like the idea, but it needs to be more arbitrary, not just hidden fields.
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:23:39 2007
      description: |-
        <pre>
        From Peter Scott at <a href="http://rt.cpan.org/Ticket/Display.html?id=16690" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=16690</a>
        
        
        </pre>
      reporter: petda...@gmail.com
    issue: 28
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Enhancement
    title: 'WM: add_fields, delete_fields methods'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=28
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=30
    comments:
      - author: siddardh...@gmail.com
        comment: |-
          I am also having the same problem with this link ..
          http://seopen.com/seopen-tools/pagerank.php
        date: 'Oct 14, 2009'
        date_long: Wed Oct 14 03:11:21 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:29:49 2007 -->
      
      <pre>
      From:  	&quot;Peteris Krumins [Newsgroups]&quot; &lt;pknewsgroups@gmail.com&gt;
      
      Suppose a form is located at an URL <a href="http://host.com/path/to/form" rel="nofollow">http://host.com/path/to/form</a> and the
      form&#39;s action path is relative, like this:
      &lt;form action=&quot;path/to/form&quot; ...&gt;.
      
      If I submit this form, the WWW::Mechanize will POST the data to
      <a href="http://host.com/path/to/path/to/form" rel="nofollow">http://host.com/path/to/path/to/form</a> which seems right at the first
      glance but compared to what real browsers are doing is wrong.
      
      The Internet Explorer and FireFox both submit the data to
      <a href="http://host.com/path/to/form" rel="nofollow">http://host.com/path/to/form</a>, treating the form&#39;s action path absolute.
      I could not find the specification on how the form&#39;s action should be
      treated but it seems that if there is a slash in the action, then it
      should be treated as absolute.
      
      For example, the registration form located at
      <a href="http://www.flurl.com/user/join" rel="nofollow">http://www.flurl.com/user/join</a> has the action=&quot;user/join&quot;.
      If I submit this form using a browser, the data is posted to
      <a href="http://www.flurl.com/user/join" rel="nofollow">http://www.flurl.com/user/join</a>, but if I submit it using Mech, the data
      is posted to <a href="http://www.flurl.com/user/user/join" rel="nofollow">http://www.flurl.com/user/user/join</a>.
      
      
      P.Krumins
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 30](http://code.google.com/p/www-mechanize/issues/detail?id=30) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=30)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **siddardh...@gmail.com** commented on Oct 14, 2009 <!-- Wed Oct 14 03:11:21 2009 -->:
      
      <pre>
      I am also having the same problem with this link ..
      http://seopen.com/seopen-tools/pagerank.php
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:29:49 2007
      description: |-
        <pre>
        From:  	&quot;Peteris Krumins [Newsgroups]&quot; &lt;pknewsgroups@gmail.com&gt;
        
        Suppose a form is located at an URL <a href="http://host.com/path/to/form" rel="nofollow">http://host.com/path/to/form</a> and the
        form&#39;s action path is relative, like this:
        &lt;form action=&quot;path/to/form&quot; ...&gt;.
        
        If I submit this form, the WWW::Mechanize will POST the data to
        <a href="http://host.com/path/to/path/to/form" rel="nofollow">http://host.com/path/to/path/to/form</a> which seems right at the first
        glance but compared to what real browsers are doing is wrong.
        
        The Internet Explorer and FireFox both submit the data to
        <a href="http://host.com/path/to/form" rel="nofollow">http://host.com/path/to/form</a>, treating the form&#39;s action path absolute.
        I could not find the specification on how the form&#39;s action should be
        treated but it seems that if there is a slash in the action, then it
        should be treated as absolute.
        
        For example, the registration form located at
        <a href="http://www.flurl.com/user/join" rel="nofollow">http://www.flurl.com/user/join</a> has the action=&quot;user/join&quot;.
        If I submit this form using a browser, the data is posted to
        <a href="http://www.flurl.com/user/join" rel="nofollow">http://www.flurl.com/user/join</a>, but if I submit it using Mech, the data
        is posted to <a href="http://www.flurl.com/user/user/join" rel="nofollow">http://www.flurl.com/user/user/join</a>.
        
        
        P.Krumins
        
        
        </pre>
      reporter: petda...@gmail.com
    issue: 30
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: Submitting a form with relative path specified in form's action using WWW::Mechanize"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=30
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=31
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:32:15 2007 -->
      
      <pre>
      Some of the form methods have confusingly inconsistent behavior. These
      should be normalized if feasible. I would prefer that none of them die,
      but instead return empty on failure. However, any consistent behavior
      would be an improvement.
      
      The field() method dies if passed the name of a non-existent input. It
      has no documented return value. It accesses $self-&gt;{form}.
      
      The select() method returns boolean indicating whether the value was
      set. It accesses $self-&gt;{form}.
      
      The set_fields() method dies if any of the passed input names do not
      exist. It accesses $self-&gt;current_form() or dies.
      
      The set_visible() method returns the number of inputs set. It does not
      die if there are too few form inputs. It accesses $self-&gt;current_form()
      
      The tick() method dies if the named input does not exist. It has no
      defined return value. It accesses $self-&gt;current_form()
      
      The value() method dies if the named input does not exist. It accesses
      $self-&gt;{form}.
      
      Thanks,
      Chris
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 31](http://code.google.com/p/www-mechanize/issues/detail?id=31) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=31)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:32:15 2007
      description: |-
        <pre>
        Some of the form methods have confusingly inconsistent behavior. These
        should be normalized if feasible. I would prefer that none of them die,
        but instead return empty on failure. However, any consistent behavior
        would be an improvement.
        
        The field() method dies if passed the name of a non-existent input. It
        has no documented return value. It accesses $self-&gt;{form}.
        
        The select() method returns boolean indicating whether the value was
        set. It accesses $self-&gt;{form}.
        
        The set_fields() method dies if any of the passed input names do not
        exist. It accesses $self-&gt;current_form() or dies.
        
        The set_visible() method returns the number of inputs set. It does not
        die if there are too few form inputs. It accesses $self-&gt;current_form()
        
        The tick() method dies if the named input does not exist. It has no
        defined return value. It accesses $self-&gt;current_form()
        
        The value() method dies if the named input does not exist. It accesses
        $self-&gt;{form}.
        
        Thanks,
        Chris
        </pre>
      reporter: petda...@gmail.com
    issue: 31
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Form input methods are inconsistent'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=31
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=32
    comments:
      - author: ProtiSlo...@gmail.com
        comment: |-
          I have a problem which appears related (I am using version 1.34 installed from a
          debian package). In my case the submit is defined as 
          
          <button name="login" class="gfx" type="submit" title="Log in"   accesskey="S" >
          <div class="gfx_button"><img src="themes/aqua/button.left.png" alt=""/>Log in<img
          src="themes/aqua/button.right.png" alt=""/></div>
          </button>
          
          which find_all_submits also doesn't find, and I don't even seem to be able to click
          on it.
        date: 'Apr 12, 2008'
        date_long: Sat Apr 12 08:03:51 2008
        inner: ~
      - author: dariusjo...@gmail.com
        comment: |-
          I have just come across this problem while writing tests for my webapp, running:
          
          $mech->submit_form_ok({
              with_fields => { push_to_live => 'live' },
              button => 'push_to_live',
          });
          
          where push_to_live is:
          <input type="image" name="push_to_live" value="live" id="push_to_live"
          src="[%c.uri_for('/static/images/icons/transmit.png')%]" />
          
          WM doesn't seem to submit the form correctly.
          
          I noticed this issue was reported about a year and a half ago, and the latest release
          of WWW::Mechanize was in July, 2009, while the latest release of Test::WWW::Mechanize
          was in January 2009. Are there any plans on implementing this patch in an upcoming
          release?
        date: 'Mar 18, 2010'
        date_long: Thu Mar 18 08:32:57 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:41:51 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=21781" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=21781</a>
      
      From:  	Spencer Christensen &lt;schristensen@backcountry.com&gt;
      Download (untitled) [text/plain 1.8k]
      Hello all,
      
      I have run into a situation where I need to click on a button for a
      form and use $mech-&gt;click_button(value =&gt; &#39;Add to Cart&#39;);. The problem
      comes in where, this button may be an &lt;input type=&quot;submit .../&gt; tag or
      it could be &lt;input type=&quot;image&quot; .../&gt; tag (meaning it isn&#39;t always the
      same).
      I have WWW::Mechanize version 1.20 installed and found that when
      trying to click by value, Mech will only look at input objects of type
      &#39;submit&#39; and doesn&#39;t look at objects of type &#39;image&#39;.
      I made some changes to my copy of WWW::Mechanize to handle image
      buttons as well as submit buttons for this case. Below is the patch for
      version 1.20 that I made. Let me know if there is a preferred method
      for posting bugs/fixes like this. Thanks.
      
      
      
      --- /usr/lib/perl5/site_perl/5.8.7/WWW/Mechanize.pm 2006-08-19
      00:07:57.000000000 -0600
      +++ /fedora/usr/lib/perl5/site_perl/5.8.8/WWW/Mechanize.pm
      2006-09-29 11:37:22.000000000 -0600
      @@ -1469,16 +1469,16 @@
      $request = $args{input}-&gt;click( $form, $args{x}, $args{y} );
      }
      elsif ( $args{value} ) {
      - my $i = 1;
      - while ( my $input = $form-&gt;find_input(undef, &#39;submit&#39;, $i) ) {
      - if ( $args{value} &amp;&amp; ($args{value} eq $input-&gt;value) ) {
      + my @inputs = ( $form-&gt;find_input(undef, &#39;submit&#39;),
      $form-&gt;find_input(undef, &#39;image&#39;) );
      + foreach my $input (@inputs) {
      + if ( $input-&gt;value &amp;&amp; ($args{value} eq $input-&gt;value) ) {
      $request = $input-&gt;click( $form, $args{x}, $args{y} );
      last;
      }
      - $i++;
      - } # while
      + } # foreach
      } # $args{value}
      
      + $self-&gt;warn( qq{No button found for click_button} ) unless ($request);
      return $self-&gt;request( $request );
      }
      
      
      
      
      -- 
      Spencer Christensen
      Infrastructure Engineering Team Leader
      (801) 746-7580 x101
      www.Backcountry.com
      We use the gear we sell
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 32](http://code.google.com/p/www-mechanize/issues/detail?id=32) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=32)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **ProtiSlo...@gmail.com** commented on Apr 12, 2008 <!-- Sat Apr 12 08:03:51 2008 -->:
      
      <pre>
      I have a problem which appears related (I am using version 1.34 installed from a
      debian package). In my case the submit is defined as 
      
      <button name="login" class="gfx" type="submit" title="Log in"   accesskey="S" >
      <div class="gfx_button"><img src="themes/aqua/button.left.png" alt=""/>Log in<img
      src="themes/aqua/button.right.png" alt=""/></div>
      </button>
      
      which find_all_submits also doesn't find, and I don't even seem to be able to click
      on it.
      </pre>
      
      
      **dariusjo...@gmail.com** commented on Mar 18, 2010 <!-- Thu Mar 18 08:32:57 2010 -->:
      
      <pre>
      I have just come across this problem while writing tests for my webapp, running:
      
      $mech->submit_form_ok({
          with_fields => { push_to_live => 'live' },
          button => 'push_to_live',
      });
      
      where push_to_live is:
      <input type="image" name="push_to_live" value="live" id="push_to_live"
      src="[%c.uri_for('/static/images/icons/transmit.png')%]" />
      
      WM doesn't seem to submit the form correctly.
      
      I noticed this issue was reported about a year and a half ago, and the latest release
      of WWW::Mechanize was in July, 2009, while the latest release of Test::WWW::Mechanize
      was in January 2009. Are there any plans on implementing this patch in an upcoming
      release?
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:41:51 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=21781" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=21781</a>
        
        From:  	Spencer Christensen &lt;schristensen@backcountry.com&gt;
        Download (untitled) [text/plain 1.8k]
        Hello all,
        
        I have run into a situation where I need to click on a button for a
        form and use $mech-&gt;click_button(value =&gt; &#39;Add to Cart&#39;);. The problem
        comes in where, this button may be an &lt;input type=&quot;submit .../&gt; tag or
        it could be &lt;input type=&quot;image&quot; .../&gt; tag (meaning it isn&#39;t always the
        same).
        I have WWW::Mechanize version 1.20 installed and found that when
        trying to click by value, Mech will only look at input objects of type
        &#39;submit&#39; and doesn&#39;t look at objects of type &#39;image&#39;.
        I made some changes to my copy of WWW::Mechanize to handle image
        buttons as well as submit buttons for this case. Below is the patch for
        version 1.20 that I made. Let me know if there is a preferred method
        for posting bugs/fixes like this. Thanks.
        
        
        
        --- /usr/lib/perl5/site_perl/5.8.7/WWW/Mechanize.pm 2006-08-19
        00:07:57.000000000 -0600
        +++ /fedora/usr/lib/perl5/site_perl/5.8.8/WWW/Mechanize.pm
        2006-09-29 11:37:22.000000000 -0600
        @@ -1469,16 +1469,16 @@
        $request = $args{input}-&gt;click( $form, $args{x}, $args{y} );
        }
        elsif ( $args{value} ) {
        - my $i = 1;
        - while ( my $input = $form-&gt;find_input(undef, &#39;submit&#39;, $i) ) {
        - if ( $args{value} &amp;&amp; ($args{value} eq $input-&gt;value) ) {
        + my @inputs = ( $form-&gt;find_input(undef, &#39;submit&#39;),
        $form-&gt;find_input(undef, &#39;image&#39;) );
        + foreach my $input (@inputs) {
        + if ( $input-&gt;value &amp;&amp; ($args{value} eq $input-&gt;value) ) {
        $request = $input-&gt;click( $form, $args{x}, $args{y} );
        last;
        }
        - $i++;
        - } # while
        + } # foreach
        } # $args{value}
        
        + $self-&gt;warn( qq{No button found for click_button} ) unless ($request);
        return $self-&gt;request( $request );
        }
        
        
        
        
        -- 
        Spencer Christensen
        Infrastructure Engineering Team Leader
        (801) 746-7580 x101
        www.Backcountry.com
        We use the gear we sell
        </pre>
      reporter: petda...@gmail.com
    issue: 32
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Problem using click_button(value => ...) to get image buttons'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=32
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=33
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
      - author: cuddeb...@gmail.com
        comment: I believe I have encountered this problem also.
        date: 'Nov 21, 2011'
        date_long: Mon Nov 21 23:17:36 2011
        inner: ~
    data: |+
      petda...@gmail.com reported on Nov 9, 2007 <!-- Fri Nov  9 19:43:56 2007 -->
      
      <pre>
      From <a href="http://rt.cpan.org/Ticket/Display.html?id=19034" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19034</a>
      
      HTML::Form-&gt;value has trouble handling &lt;select multiple&gt; (see
      <a href="http://rt.cpan.org/Ticket/Display.html?id=18962" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18962</a>). This in turn gives
      WWW::Mechanize trouble. Attached is a test which demonstrates the
      problem (place it in t/local). By having Mechanize use
      HTML::Form-&gt;param the problem can be worked around but I don&#39;t know if
      this is a good idea for all form values.
      
      Its an HTML::Form bug but Mechanize should be aware of the problem.
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 33](http://code.google.com/p/www-mechanize/issues/detail?id=33) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=33)
      
      * **Type**:      Defect
      * **Date**:      Nov 9, 2007
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **cuddeb...@gmail.com** commented on Nov 21, 2011 <!-- Mon Nov 21 23:17:36 2011 -->:
      
      <pre>
      I believe I have encountered this problem also.
      </pre>
      

    description:
      date:
        date: 'Nov 9, 2007'
        timestamp: Fri Nov  9 19:43:56 2007
      description: |-
        <pre>
        From <a href="http://rt.cpan.org/Ticket/Display.html?id=19034" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=19034</a>
        
        HTML::Form-&gt;value has trouble handling &lt;select multiple&gt; (see
        <a href="http://rt.cpan.org/Ticket/Display.html?id=18962" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18962</a>). This in turn gives
        WWW::Mechanize trouble. Attached is a test which demonstrates the
        problem (place it in t/local). By having Mechanize use
        HTML::Form-&gt;param the problem can be worked around but I don&#39;t know if
        this is a good idea for all form values.
        
        Its an HTML::Form bug but Mechanize should be aware of the problem.
        
        
        </pre>
      reporter: petda...@gmail.com
    issue: 33
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Problems filling out <select multiple>'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=33
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=41
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 12, 2008'
        date_long: Wed Mar 12 20:58:48 2008
        inner:
          - key: Summary
            value: 'WM: Select multiple field not being shown in Mechanize'
      - author: jordan.m...@gmail.com
        comment: Works for me.  Attached is the document I used to test.
        date: 'Jul 10, 2008'
        date_long: Thu Jul 10 04:38:39 2008
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      prasad...@gmail.com reported on Dec 13, 2007 <!-- Thu Dec 13 06:45:28 2007 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. I have a HTML page which has 6 selects and last 2 are select mutiples.
      The last select mutiple is not being shown into the Mechanize form dump.
      <b>2.</b>
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      
      
      <b>What version of the product are you using? On what operating system?</b>
      
      I am working on Linux and using WWW-Mechanize 1.34.
      
      <b>Please provide any additional information below.</b>
      
       
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 41](http://code.google.com/p/www-mechanize/issues/detail?id=41) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=41)
      
      * **Type**:      Defect
      * **Date**:      Dec 13, 2007
      * **Reporter**:  prasad...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Mar 12, 2008 <!-- Wed Mar 12 20:58:48 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Select multiple field not being shown in Mechanize
      
      **jordan.m...@gmail.com** commented on Jul 10, 2008 <!-- Thu Jul 10 04:38:39 2008 -->:
      
      <pre>
      Works for me.  Attached is the document I used to test.
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Dec 13, 2007'
        timestamp: Thu Dec 13 06:45:28 2007
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. I have a HTML page which has 6 selects and last 2 are select mutiples.
        The last select mutiple is not being shown into the Mechanize form dump.
        <b>2.</b>
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        
        
        <b>What version of the product are you using? On what operating system?</b>
        
        I am working on Linux and using WWW-Mechanize 1.34.
        
        <b>Please provide any additional information below.</b>
        
         
        </pre>
      reporter: prasad...@gmail.com
    issue: 41
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Select multiple field not being shown in Mechanize'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=41
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=42
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 12, 2008'
        date_long: Wed Mar 12 20:59:36 2008
        inner:
          - key: Summary
            value: 'WM: Behaviour of content() not specified if before fetching'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
      - author: mark.sto...@gmail.com
        comment: 'This request sounds reasonable. Could you contribute a formal test which shows that content() returns undef in this case, and patch the pod as well. The project is now hosted on Github:  https://github.com/libwww-perl/WWW-Mechanize'
        date: 'Feb 4, 2013'
        date_long: Mon Feb  4 13:32:12 2013
        inner: ~
    data: |+
      ed.at.me...@gmail.com reported on Jan 21, 2008 <!-- Mon Jan 21 06:21:37 2008 -->
      
      <pre>
      The pod documentation says that content() is normally the same as
      response()-&gt;content() but this is not quite true:
      
      #!/usr/bin/perl
      use warnings;
      use strict;
      use WWW::Mechanize;
      use Data::Dumper;
      my $mech = new WWW::Mechanize(autocheck =&gt; 1);
      my $c = $mech-&gt;content;
      print Dumper $c;
      my $rc = $mech-&gt;response-&gt;content;
      print Dumper $rc;
      
      $mech-&gt;content returns undef whereas response-&gt;content dies.
      
      I think it needs to be specified what happens if you call content() before
      anything has been fetched.  Perhaps it should throw an exception if
      autocheck is on, and return undef otherwise.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 42](http://code.google.com/p/www-mechanize/issues/detail?id=42) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=42)
      
      * **Type**:      Defect
      * **Date**:      Jan 21, 2008
      * **Reporter**:  ed.at.me...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Mar 12, 2008 <!-- Wed Mar 12 20:59:36 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Behaviour of content() not specified if before fetching
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **mark.sto...@gmail.com** commented on Feb 4, 2013 <!-- Mon Feb  4 13:32:12 2013 -->:
      
      <pre>
      This request sounds reasonable. Could you contribute a formal test which shows that content() returns undef in this case, and patch the pod as well. The project is now hosted on Github:  https://github.com/libwww-perl/WWW-Mechanize
      </pre>
      

    description:
      date:
        date: 'Jan 21, 2008'
        timestamp: Mon Jan 21 06:21:37 2008
      description: |-
        <pre>
        The pod documentation says that content() is normally the same as
        response()-&gt;content() but this is not quite true:
        
        #!/usr/bin/perl
        use warnings;
        use strict;
        use WWW::Mechanize;
        use Data::Dumper;
        my $mech = new WWW::Mechanize(autocheck =&gt; 1);
        my $c = $mech-&gt;content;
        print Dumper $c;
        my $rc = $mech-&gt;response-&gt;content;
        print Dumper $rc;
        
        $mech-&gt;content returns undef whereas response-&gt;content dies.
        
        I think it needs to be specified what happens if you call content() before
        anything has been fetched.  Perhaps it should throw an exception if
        autocheck is on, and return undef otherwise.
        </pre>
      reporter: ed.at.me...@gmail.com
    issue: 42
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Behaviour of content() not specified if before fetching'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=42
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=44
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 25, 2008'
        date_long: Tue Nov 25 07:50:14 2008
        inner:
          - key: Summary
            value: 'WM: illogical click_button behaviour when more than one of name/number/input/value are supplied'
      - author: mkell...@gmail.com
        comment: "Or, even better, if it could be made to combine all of those options to find something to click. It seems unlikely, but you could have a case where you have one button named 'foo', value 'Click Me', and two other buttons named 'bar', one 'Click Me' and the other \"Don't Click Me\". If you just gave value => 'Click Me', you could get the wrong one clicked."
        date: 'Oct 18, 2010'
        date_long: Mon Oct 18 12:30:08 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      wdha...@gmail.com reported on Mar 26, 2008 <!-- Wed Mar 26 09:58:51 2008 -->
      
      <pre>
      I have a form with two buttons named &quot;_cmd&quot;, each with different
      values. It took me a while to realise why the wrong button got clicked
      when I did $mech-&gt;click_button( name =&gt; &quot;_cmd&quot;, value =&gt; &quot;Foo&quot; ). Then
      I re-read the docs and saw that
      <a href="http://search.cpan.org/~petdance/WWW-Mechanize/lib/WWW/Mechanize.pm#$..." rel="nofollow">http://search.cpan.org/~petdance/WWW-Mechanize/lib/WWW/Mechanize.pm#$...</a>)
      says &quot;Only one of name, number, input or value must be specified in
      the keys.&quot;
      
      I&#39;m thinking it might be useful if click_button could be made to
      complain if more than one key is specified, to protect others who
      don&#39;t read the docs properly from themselves :-) 
      
      <b>What steps will reproduce the problem?</b>
      1. Create a form with multiple buttons called &#39;_cmd&#39; (or any other name).
      2. Ensure each button has a different value attribute.
      3. call -&gt;click_button( name =&gt; &#39;_cmd&#39;, value =&gt; &#39;Foo&#39; )
      
      <b>What is the expected output? What do you see instead?</b>
      Logically I would expect the first button with name=&quot;_cmd&quot; and value=&quot;Foo&quot;
      to be clicked, but click_button simulates a click on the first button
      matching name=&quot;_cmd&quot; and it&#39;s therefore pot luck as to whether this is the
      right one or not. The docs do state &quot;Only one of name, number, input or
      value must be specified in the keys.&quot;, so I would expect click_button
      either to warn/die if multiple attributes are supplied, or to perform
      matching on both name and value (plus others if supplied).
      
      <b>What version of the product are you using? On what operating system?</b>
      1.34 on FreeBSD 6.4
      
      <b>Please provide any additional information below.</b>
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 44](http://code.google.com/p/www-mechanize/issues/detail?id=44) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=44)
      
      * **Type**:      Defect
      * **Date**:      Mar 26, 2008
      * **Reporter**:  wdha...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 25, 2008 <!-- Tue Nov 25 07:50:14 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: illogical click_button behaviour when more than one of name/number/input/value are supplied
      
      **mkell...@gmail.com** commented on Oct 18, 2010 <!-- Mon Oct 18 12:30:08 2010 -->:
      
      <pre>
      Or, even better, if it could be made to combine all of those options to find something to click. It seems unlikely, but you could have a case where you have one button named 'foo', value 'Click Me', and two other buttons named 'bar', one 'Click Me' and the other "Don't Click Me". If you just gave value => 'Click Me', you could get the wrong one clicked.
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Mar 26, 2008'
        timestamp: Wed Mar 26 09:58:51 2008
      description: |-
        <pre>
        I have a form with two buttons named &quot;_cmd&quot;, each with different
        values. It took me a while to realise why the wrong button got clicked
        when I did $mech-&gt;click_button( name =&gt; &quot;_cmd&quot;, value =&gt; &quot;Foo&quot; ). Then
        I re-read the docs and saw that
        <a href="http://search.cpan.org/~petdance/WWW-Mechanize/lib/WWW/Mechanize.pm#$..." rel="nofollow">http://search.cpan.org/~petdance/WWW-Mechanize/lib/WWW/Mechanize.pm#$...</a>)
        says &quot;Only one of name, number, input or value must be specified in
        the keys.&quot;
        
        I&#39;m thinking it might be useful if click_button could be made to
        complain if more than one key is specified, to protect others who
        don&#39;t read the docs properly from themselves :-) 
        
        <b>What steps will reproduce the problem?</b>
        1. Create a form with multiple buttons called &#39;_cmd&#39; (or any other name).
        2. Ensure each button has a different value attribute.
        3. call -&gt;click_button( name =&gt; &#39;_cmd&#39;, value =&gt; &#39;Foo&#39; )
        
        <b>What is the expected output? What do you see instead?</b>
        Logically I would expect the first button with name=&quot;_cmd&quot; and value=&quot;Foo&quot;
        to be clicked, but click_button simulates a click on the first button
        matching name=&quot;_cmd&quot; and it&#39;s therefore pot luck as to whether this is the
        right one or not. The docs do state &quot;Only one of name, number, input or
        value must be specified in the keys.&quot;, so I would expect click_button
        either to warn/die if multiple attributes are supplied, or to perform
        matching on both name and value (plus others if supplied).
        
        <b>What version of the product are you using? On what operating system?</b>
        1.34 on FreeBSD 6.4
        
        <b>Please provide any additional information below.</b>
        </pre>
      reporter: wdha...@gmail.com
    issue: 44
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: illogical click_button behaviour when more than one of name/number/input/value are supplied'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=44
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=45
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 21, 2008'
        date_long: Fri Nov 21 18:34:03 2008
        inner:
          - key: Summary
            value: 'WM: click_button does not check for zero matching inputs'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      wdha...@gmail.com reported on Mar 26, 2008 <!-- Wed Mar 26 10:31:03 2008 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Create a form with a tag like &lt;button type=&quot;submit&quot; name=&quot;foo&quot; value=&quot;bar&quot;&gt;
      2. call -&gt;click_button( name =&gt; &quot;foo&quot; )
      
      <b>What is the expected output? What do you see instead?</b>
      HTML::Form doesn&#39;t support the &lt;button&gt; tag, so the call to
      $form-&gt;find_input in click_button() doesn&#39;t return anything and $request
      never gets assigned to. The call to $self-&gt;request a few lines later then
      causes an error like this:
      
      Can&#39;t call method &quot;header&quot; on an undefined value at
      /usr/local/lib/perl5/5.8.8/WWW/Mechanize.pm line 2227.
      
      Ideally click_button should give an error/warning if no matching inputs are
      found.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.34 on FreeBSD 6.4
      
      <b>Please provide any additional information below.</b>
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 45](http://code.google.com/p/www-mechanize/issues/detail?id=45) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=45)
      
      * **Type**:      Defect
      * **Date**:      Mar 26, 2008
      * **Reporter**:  wdha...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 21, 2008 <!-- Fri Nov 21 18:34:03 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: click_button does not check for zero matching inputs
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Mar 26, 2008'
        timestamp: Wed Mar 26 10:31:03 2008
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Create a form with a tag like &lt;button type=&quot;submit&quot; name=&quot;foo&quot; value=&quot;bar&quot;&gt;
        2. call -&gt;click_button( name =&gt; &quot;foo&quot; )
        
        <b>What is the expected output? What do you see instead?</b>
        HTML::Form doesn&#39;t support the &lt;button&gt; tag, so the call to
        $form-&gt;find_input in click_button() doesn&#39;t return anything and $request
        never gets assigned to. The call to $self-&gt;request a few lines later then
        causes an error like this:
        
        Can&#39;t call method &quot;header&quot; on an undefined value at
        /usr/local/lib/perl5/5.8.8/WWW/Mechanize.pm line 2227.
        
        Ideally click_button should give an error/warning if no matching inputs are
        found.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.34 on FreeBSD 6.4
        
        <b>Please provide any additional information below.</b>
        </pre>
      reporter: wdha...@gmail.com
    issue: 45
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: click_button does not check for zero matching inputs'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=45
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=46
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 25, 2008'
        date_long: Tue Nov 25 07:50:02 2008
        inner:
          - key: Summary
            value: 'WM: failed $mech-&gt;follow_link(text =&gt; &#39;nonexistent&#39;) makes $mech-&gt;success still return true!'
      - author: pmuhlc...@gmail.com
        comment: |-
          I've written some code to find links to speeches by Presidential candidate John
          McCain on the NYTimes.  The page returns results of a query on the NYTimes search
          engine.  This particular page does not have a 'next' page link on it, so the
          follow_link should return not successful, but it returns successful.  Also, the $mech
          object should become undefined, instead it continues to contain the first page loaded
          into it.  This is a serious problem.  I'll try followable links to see if that can
          provide a workaround. 
          
          My perl version:
          
          This is perl, v5.10.0 built for x86_64-linux-gnu-thread-multi
        date: 'Mar 1, 2009'
        date_long: Sun Mar  1 13:00:14 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 23, 2009'
        date_long: Tue Jun 23 21:39:29 2009
        inner:
          - key: Status
            value: Accepted
          - key: Labels
            value: -Priority-Medium Priority-Critical
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 15:32:30 2009
        inner:
          - key: Labels
            value: WM
    data: |+
      peteris....@gmail.com reported on Mar 31, 2008 <!-- Mon Mar 31 10:59:52 2008 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. perl -MWWW::Mechanize -wle &#39;$mech = WWW::Mechanize-&gt;new;
      $mech-&gt;get(q|http://reddit.com|); $mech-&gt;follow_link(text =&gt; q|this is
      nonexistent!|); print $mech-&gt;success ? qq|true\n| : qq|false\n|&#39;
      
      <b>What is the expected output? What do you see instead?</b>
      Expected output is &#39;false&#39;. I see &#39;true&#39; instead.
      
      <b>What version of the product are you using? On what operating system?</b>
      I am using Mech 1.34 on Unix and Windows.
      
      <b>Please provide any additional information below.</b>
      I did not yet check the source to see why it happens this way, and as you said:
      [19:57:52] &lt;alester&gt; Be careful when you say it&#39;s a &quot;bug&quot; that success
      still returns true.
      [19:58:01] &lt;alester&gt; To you it&#39;s unexpected.
      [19:58:06] &lt;alester&gt; To someone else, it might be right.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 46](http://code.google.com/p/www-mechanize/issues/detail?id=46) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=46)
      
      * **Type**:      Defect
      * **Date**:      Mar 31, 2008
      * **Reporter**:  peteris....@gmail.com
      * **Owner**:     ----
      * **Priority**:  Critical
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 25, 2008 <!-- Tue Nov 25 07:50:02 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: failed $mech-&gt;follow_link(text =&gt; &#39;nonexistent&#39;) makes $mech-&gt;success still return true!
      
      **pmuhlc...@gmail.com** commented on Mar 1, 2009 <!-- Sun Mar  1 13:00:14 2009 -->:
      
      <pre>
      I've written some code to find links to speeches by Presidential candidate John
      McCain on the NYTimes.  The page returns results of a query on the NYTimes search
      engine.  This particular page does not have a 'next' page link on it, so the
      follow_link should return not successful, but it returns successful.  Also, the $mech
      object should become undefined, instead it continues to contain the first page loaded
      into it.  This is a serious problem.  I'll try followable links to see if that can
      provide a workaround. 
      
      My perl version:
      
      This is perl, v5.10.0 built for x86_64-linux-gnu-thread-multi
      </pre>
      
      
      **petda...@gmail.com** commented on Jun 23, 2009 <!-- Tue Jun 23 21:39:29 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Status : Accepted
      * Labels : `-Priority-Medium Priority-Critical`
      
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 15:32:30 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Mar 31, 2008'
        timestamp: Mon Mar 31 10:59:52 2008
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. perl -MWWW::Mechanize -wle &#39;$mech = WWW::Mechanize-&gt;new;
        $mech-&gt;get(q|http://reddit.com|); $mech-&gt;follow_link(text =&gt; q|this is
        nonexistent!|); print $mech-&gt;success ? qq|true\n| : qq|false\n|&#39;
        
        <b>What is the expected output? What do you see instead?</b>
        Expected output is &#39;false&#39;. I see &#39;true&#39; instead.
        
        <b>What version of the product are you using? On what operating system?</b>
        I am using Mech 1.34 on Unix and Windows.
        
        <b>Please provide any additional information below.</b>
        I did not yet check the source to see why it happens this way, and as you said:
        [19:57:52] &lt;alester&gt; Be careful when you say it&#39;s a &quot;bug&quot; that success
        still returns true.
        [19:58:01] &lt;alester&gt; To you it&#39;s unexpected.
        [19:58:06] &lt;alester&gt; To someone else, it might be right.
        </pre>
      reporter: peteris....@gmail.com
    issue: 46
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Critical
      Status: Accepted
      Type: Defect
    title: "WM: failed $mech->follow_link(text => 'nonexistent') makes $mech->success still return true!"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=46
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=48
    comments:
      - author: hael...@gmail.com
        comment: |-
          This is not just a geographical problem.  There are cases where people in any country
          may want to install this module on a computer that has very limited access to the
          public internet -- for example, for testing web applications running on internal
          networks.
          
          Perhaps the live tests could simply be skipped if the Wikipedia server cannot be
          reached, and only fail if they reach the server but return incorrect results?
        date: 'Jun 20, 2008'
        date_long: Fri Jun 20 13:57:50 2008
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 25, 2008'
        date_long: Tue Nov 25 07:51:47 2008
        inner:
          - key: Summary
            value: 'WM: Live tests fail in China'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
      - author: mark.sto...@gmail.com
        comment: |-
          From Makefile.PL, it appears that only local tests are run default, and local and live tests have been split up. 
          
          Does this Issue still apply?
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 09:59:16 2013
        inner: ~
    data: |+
      petda...@gmail.com reported on Apr 3, 2008 <!-- Thu Apr  3 15:21:39 2008 -->
      
      <pre>
      
      The tests for this module try to access wikipedia.org, which is blocked
      in some countries (eg mainland China), resulting in false test failures.
      
      
      
      Also the tests fail by timing out, so they take a long long long time...
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 48](http://code.google.com/p/www-mechanize/issues/detail?id=48) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=48)
      
      * **Type**:      Defect
      * **Date**:      Apr 3, 2008
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **hael...@gmail.com** commented on Jun 20, 2008 <!-- Fri Jun 20 13:57:50 2008 -->:
      
      <pre>
      This is not just a geographical problem.  There are cases where people in any country
      may want to install this module on a computer that has very limited access to the
      public internet -- for example, for testing web applications running on internal
      networks.
      
      Perhaps the live tests could simply be skipped if the Wikipedia server cannot be
      reached, and only fail if they reach the server but return incorrect results?
      </pre>
      
      
      **petda...@gmail.com** commented on Nov 25, 2008 <!-- Tue Nov 25 07:51:47 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Live tests fail in China
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 09:59:16 2013 -->:
      
      <pre>
      From Makefile.PL, it appears that only local tests are run default, and local and live tests have been split up. 
      
      Does this Issue still apply?
      </pre>
      

    description:
      date:
        date: 'Apr 3, 2008'
        timestamp: Thu Apr  3 15:21:39 2008
      description: |-
        <pre>
        
        The tests for this module try to access wikipedia.org, which is blocked
        in some countries (eg mainland China), resulting in false test failures.
        
        
        
        Also the tests fail by timing out, so they take a long long long time...
        </pre>
      reporter: petda...@gmail.com
    issue: 48
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Live tests fail in China'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=48
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=51
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 25, 2008'
        date_long: Tue Nov 25 07:48:54 2008
        inner:
          - key: Summary
            value: 'WM: form_with_fields should check for legal values'
          - key: Labels
            value: -Type-Defect Type-Enhancement
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      m...@summersault.com reported on May 5, 2008 <!-- Mon May  5 08:31:53 2008 -->
      
      <pre>
      
      <b>What steps will reproduce the problem?</b>
      1. Set up a form with  multiple &lt;select&gt; tags which have the same name, but
      different user legal values. 
      2. Use the &quot;with_fields&quot; function to target the second form element
      3. Notice &quot;illegal value&quot; error
      
      &gt; What is the expected output? What do you see instead?
      
      This &quot;Do What I Mean&quot; code could be even smarter by checking for legal
      values. If the first potential match does not accept the value as a legal
      value, move on to the next one. 
      
      Currently, it seems the case above requires a painful process of
      calculating the right array index value to pass to Mech. 
      
      This issued to be less of an issue before a bug in LWP was fixed which made
      &lt;select&gt; parsing stricter, and I assume more correct. 
      
      <a href="http://rt.cpan.org/Ticket/Display.html?id=18993" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18993</a>
      
      &gt; What version of the product are you using? On what operating system?
      
      Mechanize 1.34
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 51](http://code.google.com/p/www-mechanize/issues/detail?id=51) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=51)
      
      * **Type**:      Enhancement
      * **Date**:      May 5, 2008
      * **Reporter**:  m...@summersault.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 25, 2008 <!-- Tue Nov 25 07:48:54 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: form_with_fields should check for legal values
      * Labels : `-Type-Defect Type-Enhancement`
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'May 5, 2008'
        timestamp: Mon May  5 08:31:53 2008
      description: |-
        <pre>
        
        <b>What steps will reproduce the problem?</b>
        1. Set up a form with  multiple &lt;select&gt; tags which have the same name, but
        different user legal values. 
        2. Use the &quot;with_fields&quot; function to target the second form element
        3. Notice &quot;illegal value&quot; error
        
        &gt; What is the expected output? What do you see instead?
        
        This &quot;Do What I Mean&quot; code could be even smarter by checking for legal
        values. If the first potential match does not accept the value as a legal
        value, move on to the next one. 
        
        Currently, it seems the case above requires a painful process of
        calculating the right array index value to pass to Mech. 
        
        This issued to be less of an issue before a bug in LWP was fixed which made
        &lt;select&gt; parsing stricter, and I assume more correct. 
        
        <a href="http://rt.cpan.org/Ticket/Display.html?id=18993" rel="nofollow">http://rt.cpan.org/Ticket/Display.html?id=18993</a>
        
        &gt; What version of the product are you using? On what operating system?
        
        Mechanize 1.34
        
        </pre>
      reporter: m...@summersault.com
    issue: 51
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Enhancement
    title: 'WM: form_with_fields should check for legal values'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=51
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=74
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Nov 25, 2008'
        date_long: Tue Nov 25 07:50:51 2008
        inner:
          - key: Summary
            value: 'WM: follow_link doesn&#39;t html decode links before following them'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      ImageofN...@gmail.com reported on Nov 21, 2008 <!-- Fri Nov 21 09:28:23 2008 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Use the follow_link method to follow an html-encoded link with at least
      2 GET parameters on it.
      
      <b>What is the expected output? What do you see instead?</b>
      
      The same url a browser would navigate to by clicking the link is followed.
      Instead the literal encoded string is used.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      
      <b>Please provide any additional information below.</b>
      
      Example page that would display this bug:
      
      &lt;html&gt;
      &lt;head&gt;&lt;title&gt;Encoded url test&lt;/title&gt;&lt;/head&gt;
      &lt;body&gt;
      &lt;a
      href=&quot;<a href="http://www.google.com/search?hl=en&amp;q=WWW%3A%3AMechanize&amp;btnG=Google+Search&amp;aq=f&amp;oq=&quot;&gt;Non-html" rel="nofollow">http://www.google.com/search?hl=en&amp;q=WWW%3A%3AMechanize&amp;btnG=Google+Search&amp;aq=f&amp;oq=&quot;&gt;Non-html</a>
      encoded url (malformed html)&lt;/a&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;a
      href=&quot;<a href="http://www.google.com/search?hl=en&amp;amp;q=WWW%3A%3AMechanize&amp;amp;btnG=Google+Search&amp;amp;aq=f&amp;amp;oq=&quot;&gt;Html" rel="nofollow">http://www.google.com/search?hl=en&amp;amp;q=WWW%3A%3AMechanize&amp;amp;btnG=Google+Search&amp;amp;aq=f&amp;amp;oq=&quot;&gt;Html</a>
      encoded url (well-formed 
      
      html)&lt;/a&gt;
      
      &lt;/body&gt;
      &lt;/html&gt;
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 74](http://code.google.com/p/www-mechanize/issues/detail?id=74) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=74)
      
      * **Type**:      Defect
      * **Date**:      Nov 21, 2008
      * **Reporter**:  ImageofN...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Nov 25, 2008 <!-- Tue Nov 25 07:50:51 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: follow_link doesn&#39;t html decode links before following them
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 21, 2008'
        timestamp: Fri Nov 21 09:28:23 2008
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Use the follow_link method to follow an html-encoded link with at least
        2 GET parameters on it.
        
        <b>What is the expected output? What do you see instead?</b>
        
        The same url a browser would navigate to by clicking the link is followed.
        Instead the literal encoded string is used.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        
        <b>Please provide any additional information below.</b>
        
        Example page that would display this bug:
        
        &lt;html&gt;
        &lt;head&gt;&lt;title&gt;Encoded url test&lt;/title&gt;&lt;/head&gt;
        &lt;body&gt;
        &lt;a
        href=&quot;<a href="http://www.google.com/search?hl=en&amp;q=WWW%3A%3AMechanize&amp;btnG=Google+Search&amp;aq=f&amp;oq=&quot;&gt;Non-html" rel="nofollow">http://www.google.com/search?hl=en&amp;q=WWW%3A%3AMechanize&amp;btnG=Google+Search&amp;aq=f&amp;oq=&quot;&gt;Non-html</a>
        encoded url (malformed html)&lt;/a&gt;
        &lt;br /&gt;
        &lt;br /&gt;
        &lt;a
        href=&quot;<a href="http://www.google.com/search?hl=en&amp;amp;q=WWW%3A%3AMechanize&amp;amp;btnG=Google+Search&amp;amp;aq=f&amp;amp;oq=&quot;&gt;Html" rel="nofollow">http://www.google.com/search?hl=en&amp;amp;q=WWW%3A%3AMechanize&amp;amp;btnG=Google+Search&amp;amp;aq=f&amp;amp;oq=&quot;&gt;Html</a>
        encoded url (well-formed 
        
        html)&lt;/a&gt;
        
        &lt;/body&gt;
        &lt;/html&gt;
        
        
        </pre>
      reporter: ImageofN...@gmail.com
    issue: 74
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: follow_link doesn't html decode links before following them"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=74
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=79
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Dec 22, 2008'
        date_long: Mon Dec 22 08:42:39 2008
        inner:
          - key: Labels
            value: FAQ
    data: |+
      petda...@gmail.com reported on Dec 10, 2008 <!-- Wed Dec 10 21:41:30 2008 -->
      
      <pre>
      A common hack is to fudge your HTML and then call $mech-&gt;update_html(). 
      Explain how and why to do this in the FAQ.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 79](http://code.google.com/p/www-mechanize/issues/detail?id=79) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=79)
      
      * **Type**:      Enhancement
      * **Date**:      Dec 10, 2008
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `FAQ`
      
      
      ### Comments
      **petda...@gmail.com** commented on Dec 22, 2008 <!-- Mon Dec 22 08:42:39 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `FAQ`

    description:
      date:
        date: 'Dec 10, 2008'
        timestamp: Wed Dec 10 21:41:30 2008
      description: |-
        <pre>
        A common hack is to fudge your HTML and then call $mech-&gt;update_html(). 
        Explain how and why to do this in the FAQ.
        </pre>
      reporter: petda...@gmail.com
    issue: 79
    meta:
      Labels:
        - FAQ
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Enhancement
    title: 'WM: Add update_html() to the FAQ'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=79
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=80
    comments:
      - author: petda...@gmail.com
        comment: We want %HTML::Tagset::linkElements
        date: 'Jun 23, 2009'
        date_long: Tue Jun 23 21:52:29 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 8, 2009'
        date_long: Wed Jul  8 22:34:30 2009
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Dec 10, 2008 <!-- Wed Dec 10 21:42:08 2008 -->
      
      <pre>
      Mech should use the HTML::Tagset list of linky tags, not its own.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 80](http://code.google.com/p/www-mechanize/issues/detail?id=80) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=80)
      
      * **Type**:      Task
      * **Date**:      Dec 10, 2008
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  High
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jun 23, 2009 <!-- Tue Jun 23 21:52:29 2009 -->:
      
      <pre>
      We want %HTML::Tagset::linkElements
      </pre>
      
      
      **petda...@gmail.com** commented on Jul 8, 2009 <!-- Wed Jul  8 22:34:30 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Dec 10, 2008'
        timestamp: Wed Dec 10 21:42:08 2008
      description: |-
        <pre>
        Mech should use the HTML::Tagset list of linky tags, not its own.
        </pre>
      reporter: petda...@gmail.com
    issue: 80
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: High
      Status: Accepted
      Type: Task
    title: 'WM: Use HTML::Tagset'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=80
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=83
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Dec 22, 2008'
        date_long: Mon Dec 22 08:42:20 2008
        inner:
          - key: Summary
            value: 'WM: Using back() no longer preserves form data'
          - key: Labels
            value: WM forms
      - author: mark.sto...@gmail.com
        comment: |-
          James,
          
          Could you add a test case to t/local/back.t which confirms that the problem you reported is still present?
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 08:49:36 2013
        inner: ~
    data: |+
      neo...@gmail.com reported on Dec 16, 2008 <!-- Tue Dec 16 11:37:27 2008 -->
      
      <pre>
      1. Fill out a form with set_fields()
      2. Submit the form
      3. Use back()
      4. Verify the value of the fields with value().  They will be empty.
      
      Before, in version 1.50, using back() would preserve form data.  This is
      how my browser behaves when I use the back button.
      
      Now, using back() resets the form data.
      
      I am using the following configuration:
      
      WWW::Mechanize version 1.52
      Perl version 5.8.8
      Ubuntu 8.04 kernel 2.6.24-21-generic #1 SMP i686
      
      It appears that back() calls _update_page(), which then calls _reset_page()
      and deletes the form data.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 83](http://code.google.com/p/www-mechanize/issues/detail?id=83) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=83)
      
      * **Type**:      Defect
      * **Date**:      Dec 16, 2008
      * **Reporter**:  neo...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`, `forms`
      
      
      ### Comments
      **petda...@gmail.com** commented on Dec 22, 2008 <!-- Mon Dec 22 08:42:20 2008 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Using back() no longer preserves form data
      * Labels : `WM forms`
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 08:49:36 2013 -->:
      
      <pre>
      James,
      
      Could you add a test case to t/local/back.t which confirms that the problem you reported is still present?
      </pre>
      

    description:
      date:
        date: 'Dec 16, 2008'
        timestamp: Tue Dec 16 11:37:27 2008
      description: |-
        <pre>
        1. Fill out a form with set_fields()
        2. Submit the form
        3. Use back()
        4. Verify the value of the fields with value().  They will be empty.
        
        Before, in version 1.50, using back() would preserve form data.  This is
        how my browser behaves when I use the back button.
        
        Now, using back() resets the form data.
        
        I am using the following configuration:
        
        WWW::Mechanize version 1.52
        Perl version 5.8.8
        Ubuntu 8.04 kernel 2.6.24-21-generic #1 SMP i686
        
        It appears that back() calls _update_page(), which then calls _reset_page()
        and deletes the form data.
        </pre>
      reporter: neo...@gmail.com
    issue: 83
    meta:
      Labels:
        - WM
        - forms
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Using back() no longer preserves form data'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=83
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=98
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 13:53:00 2009
        inner:
          - key: Summary
            value: 'WM: Cannot set the input with mechanize at all'
          - key: Labels
            value: WM
    data: |+
      csan...@gmail.com reported on May 30, 2009 <!-- Sat May 30 21:16:31 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      <b>1.</b>
      <b>2.</b>
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      
      
      <b>What version of the product are you using? On what operating system?</b>
      WINDOWS - Perl 5.10 - 
      
      I am trying to set the simple username in a login page to ease my routine 
      work. Following is the code for the HTML - If I check the maxlenght is not 
      specified at all. 
      I am accessing the correct form already in the context and trying to set 
      the varibles like below - 
      
      my $first_field = &quot;var\/user.id&quot;;
      my $second_field = &quot;var\/old.password&quot;;
      
      $mech-&gt;field($first_field, $username );
      $mech-&gt;field($second_field, $password);
      
      But everytime I gets an error &quot;Input &#39;var/user.id&#39; has maxlength &#39;&#39; at 
      C:/Perl/lib/WWW/Mechanize.pm line 1247&quot; - If the maxlength is not defined 
      in the input form at all - I dont know why I am getting this and how to 
      overcome this. Please help if anyone knows this.
      
      The extract of the html form is as follows - 
      
      &lt;label for=&quot;X2&quot;&gt;E-mail Address:&lt;/label&gt;&lt;/span&gt;
      &lt;div id=&quot;X2Border&quot; MyAttrib=&quot;EditBorder&quot; style=&quot;position:absolute;
      				
      						top:22px;
      					
      				
      				left:113px; 
      				width:153px; 
      				height:19px;
      				
      				&quot;&gt;
      &lt;input type=&quot;text&quot; id=&quot;X2&quot; name=&quot;var/user.id&quot; dvdVar=&quot;&quot; ButtonId=&quot;Text7&quot; 
      dataType=&quot;&quot; scType=&quot;Text&quot; tabindex=&quot;1&quot; style=&quot;width:153px; height:19px;&quot; 
      maxlength=&quot;&quot; onkeydown=&quot;lockForm();void(0);&quot; onkeyup=&quot;checkLastRow(this);&quot; 
      onfocus=&quot;handleOnFocus(this, event);&quot; onchange=&quot;handleOnChange(this, 
      event);&quot; onclick=&quot;handleOnClick(this, event);&quot; value=&quot;&quot; scripttype=&quot;text&quot;&gt;
      
      &lt;/div&gt;
      
      <b>Please provide any additional information below.</b>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 98](http://code.google.com/p/www-mechanize/issues/detail?id=98) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=98)
      
      * **Type**:      Defect
      * **Date**:      May 30, 2009
      * **Reporter**:  csan...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 13:53:00 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Cannot set the input with mechanize at all
      * Labels : `WM`

    description:
      date:
        date: 'May 30, 2009'
        timestamp: Sat May 30 21:16:31 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        <b>1.</b>
        <b>2.</b>
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        
        
        <b>What version of the product are you using? On what operating system?</b>
        WINDOWS - Perl 5.10 - 
        
        I am trying to set the simple username in a login page to ease my routine 
        work. Following is the code for the HTML - If I check the maxlenght is not 
        specified at all. 
        I am accessing the correct form already in the context and trying to set 
        the varibles like below - 
        
        my $first_field = &quot;var\/user.id&quot;;
        my $second_field = &quot;var\/old.password&quot;;
        
        $mech-&gt;field($first_field, $username );
        $mech-&gt;field($second_field, $password);
        
        But everytime I gets an error &quot;Input &#39;var/user.id&#39; has maxlength &#39;&#39; at 
        C:/Perl/lib/WWW/Mechanize.pm line 1247&quot; - If the maxlength is not defined 
        in the input form at all - I dont know why I am getting this and how to 
        overcome this. Please help if anyone knows this.
        
        The extract of the html form is as follows - 
        
        &lt;label for=&quot;X2&quot;&gt;E-mail Address:&lt;/label&gt;&lt;/span&gt;
        &lt;div id=&quot;X2Border&quot; MyAttrib=&quot;EditBorder&quot; style=&quot;position:absolute;
        				
        						top:22px;
        					
        				
        				left:113px; 
        				width:153px; 
        				height:19px;
        				
        				&quot;&gt;
        &lt;input type=&quot;text&quot; id=&quot;X2&quot; name=&quot;var/user.id&quot; dvdVar=&quot;&quot; ButtonId=&quot;Text7&quot; 
        dataType=&quot;&quot; scType=&quot;Text&quot; tabindex=&quot;1&quot; style=&quot;width:153px; height:19px;&quot; 
        maxlength=&quot;&quot; onkeydown=&quot;lockForm();void(0);&quot; onkeyup=&quot;checkLastRow(this);&quot; 
        onfocus=&quot;handleOnFocus(this, event);&quot; onchange=&quot;handleOnChange(this, 
        event);&quot; onclick=&quot;handleOnClick(this, event);&quot; value=&quot;&quot; scripttype=&quot;text&quot;&gt;
        
        &lt;/div&gt;
        
        <b>Please provide any additional information below.</b>
        
        
        </pre>
      reporter: csan...@gmail.com
    issue: 98
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Cannot set the input with mechanize at all'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=98
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=101
    comments: []
    data: |+2
       reported on  <!--  -->
      
      
      
      ### Details
      
      Imported from [Google Code issue 101](http://code.google.com/p/www-mechanize/issues/detail?id=101) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=101)
      
      * **Type**:      
      * **Date**:      
      * **Reporter**:  
      * **Owner**:     
      * **Priority**:  
      * **Status**:    
      

    description: ~
    issue: 101
    meta: ~
    title: ~
    url: http://code.google.com/p/www-mechanize/issues/detail?id=101
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=102
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:02:20 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Jun 11, 2009 <!-- Thu Jun 11 10:00:42 2009 -->
      
      <pre>
      Say you have a radio button, and it has two values, Y or N.  You can submit
      the form with the value &quot;X&quot; if you want.  That&#39;s tragic.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 102](http://code.google.com/p/www-mechanize/issues/detail?id=102) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=102)
      
      * **Type**:      Defect
      * **Date**:      Jun 11, 2009
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:02:20 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Jun 11, 2009'
        timestamp: Thu Jun 11 10:00:42 2009
      description: |-
        <pre>
        Say you have a radio button, and it has two values, Y or N.  You can submit
        the form with the value &quot;X&quot; if you want.  That&#39;s tragic.
        </pre>
      reporter: petda...@gmail.com
    issue: 102
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: "WM: You can click radio buttons that don't exist"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=102
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=105
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 23, 2009'
        date_long: Tue Jun 23 13:25:16 2009
        inner:
          - key: Summary
            value: 'WM: submit_form() with invalid input field throws a warning'
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Jun 23, 2009 <!-- Tue Jun 23 13:24:59 2009 -->
      
      <pre>
      If you have an invalid input field, you get &quot;can&#39;t call -&gt;value() on
      undef&quot;, instead of reporting the real problem, which is that it can&#39;t find
      the field, and then dies.
      
      Reported by Pete Krawczyk.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 105](http://code.google.com/p/www-mechanize/issues/detail?id=105) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=105)
      
      * **Type**:      Defect
      * **Date**:      Jun 23, 2009
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Critical
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jun 23, 2009 <!-- Tue Jun 23 13:25:16 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: submit_form() with invalid input field throws a warning
      * Labels : `WM`

    description:
      date:
        date: 'Jun 23, 2009'
        timestamp: Tue Jun 23 13:24:59 2009
      description: |-
        <pre>
        If you have an invalid input field, you get &quot;can&#39;t call -&gt;value() on
        undef&quot;, instead of reporting the real problem, which is that it can&#39;t find
        the field, and then dies.
        
        Reported by Pete Krawczyk.
        
        </pre>
      reporter: petda...@gmail.com
    issue: 105
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Critical
      Status: Accepted
      Type: Defect
    title: 'WM: submit_form() with invalid input field throws a warning'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=105
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=108
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 15:35:13 2009
        inner:
          - key: Summary
            value: 'WM: DNS resolver set to search a domain with wildcard DNS makes several tests fail'
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: Is this still a bummer against 1.54 or later?
        date: 'Jul 8, 2009'
        date_long: Wed Jul  8 22:35:46 2009
        inner: ~
      - author: robin.sm...@gmail.com
        comment: |-
          The versions I'm talking about is WWW::Mechanize 1.54 and Test::WWW::Mechanize 1.24.
          
          So the answer is: yes
        date: 'Jul 9, 2009'
        date_long: Thu Jul  9 01:00:17 2009
        inner: ~
    data: |+
      robin.sm...@gmail.com reported on Jul 6, 2009 <!-- Mon Jul  6 11:44:02 2009 -->
      
      <pre>
      These two patches should make it possible to detect if the system has a
      misconfigured DNS setup and skip the live tests.
      
      I might suggest to actually bail out instead of just skipping, as this
      is a pretty severe configuration error of the OS in my opinion.
      
      These patches are against version 1.24.
      
      This is a copy of <a href="http://web.archive.org/web/20130510113922/https://rt.cpan.org/Ticket/Display.html?id=47624" rel="nofollow">https://rt.cpan.org/Ticket/Display.html?id=47624</a>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 108](http://code.google.com/p/www-mechanize/issues/detail?id=108) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=108)
      
      * **Type**:      Defect
      * **Date**:      Jul 6, 2009
      * **Reporter**:  robin.sm...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 15:35:13 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: DNS resolver set to search a domain with wildcard DNS makes several tests fail
      * Labels : `WM`
      
      **petda...@gmail.com** commented on Jul 8, 2009 <!-- Wed Jul  8 22:35:46 2009 -->:
      
      <pre>
      Is this still a bummer against 1.54 or later?
      </pre>
      
      
      **robin.sm...@gmail.com** commented on Jul 9, 2009 <!-- Thu Jul  9 01:00:17 2009 -->:
      
      <pre>
      The versions I'm talking about is WWW::Mechanize 1.54 and Test::WWW::Mechanize 1.24.
      
      So the answer is: yes
      </pre>
      

    description:
      date:
        date: 'Jul 6, 2009'
        timestamp: Mon Jul  6 11:44:02 2009
      description: |-
        <pre>
        These two patches should make it possible to detect if the system has a
        misconfigured DNS setup and skip the live tests.
        
        I might suggest to actually bail out instead of just skipping, as this
        is a pretty severe configuration error of the OS in my opinion.
        
        These patches are against version 1.24.
        
        This is a copy of <a href="http://web.archive.org/web/20130510113922/https://rt.cpan.org/Ticket/Display.html?id=47624" rel="nofollow">https://rt.cpan.org/Ticket/Display.html?id=47624</a>
        
        
        </pre>
      reporter: robin.sm...@gmail.com
    issue: 108
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: DNS resolver set to search a domain with wildcard DNS makes several tests fail'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=108
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=109
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jul 6, 2009'
        date_long: Mon Jul  6 15:27:57 2009
        inner:
          - key: Summary
            value: 'WM: -&gt;find_link() behaviour depends on internal encoding of strings'
          - key: Labels
            value: WM
    data: |+
      martin.h...@googlemail.com reported on Jul 6, 2009 <!-- Mon Jul  6 13:23:08 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      The test script attached.
      
      <b>What is the expected output? What do you see instead?</b>
      
      The output produced by the test script is:
      
      25: (
        &quot;\xA0Vermietungen&quot;,
       
      &quot;/anzeigen/antz2/index.html?xv[order]=pdat+desc%2Cfirst_mod+desc%2Csort2+desc%2C+sort3+desc&amp;xv[start]=0&amp;xv[vwnum]=10&amp;xv[cart_query]=&amp;qv[categories]=92&quot;,
      )
      27: &#39;�Vermietungen&#39; is space-padded and cannot succeed at ./test_find_link
      line 21
      (undef, &quot;/mp_styles/mainpost_global.css&quot;)
      
      <b>What version of the product are you using? On what operating system?</b>
      WWW::Mechanize 1.54 on Linux bigblue 2.6.27.23-0.1-pae #1 SMP 2009-05-26
      17:02:05 -0400 i686 i686 i386 GNU/Linux
      
      <b>Please provide any additional information below.</b>
      
      Whether -&gt;find_link( text =&gt; $text ) works correctly for links that include
      non-breaking spaces depends on the internal encoding of the
      $mech-&gt;content one one hand and that of $text on the other.
      
      If the utf8 flag is not set for the content, non-breaking spaces will
      not get removed by the get_trimmed_text method within HTML::TokeParser,
      because /\s/ does _not_ match non-breaking spaces for latin1 strings,
      and so they will have to be specified in the $text in order to find the
      matching link.
      
      If $text has an utf8 bit set, find_link(), however, will then complain
      that &quot;&#39;...&#39; is space-padded and cannot succeed&quot; and discard this filter
      argument, because /\s/ _does_ match non-breaking spaces in this case.
      
      I suggest to utf8::upgrade($content) before feeding it to
      HTML::TokeParser and also to utf8::upgrade() the values in
      WWW::Mechanize-&gt;_clean_keys() to avoid this problem.
      
      BTW, I also think that it&#39;s not a good idea to simply discard arguments
      which seem invalid, because this simply causes _any_ link to be found,
      which is usually not what you would expect. IMHO one should return _no_
      link in this case.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 109](http://code.google.com/p/www-mechanize/issues/detail?id=109) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=109)
      
      * **Type**:      Defect
      * **Date**:      Jul 6, 2009
      * **Reporter**:  martin.h...@googlemail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jul 6, 2009 <!-- Mon Jul  6 15:27:57 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: -&gt;find_link() behaviour depends on internal encoding of strings
      * Labels : `WM`

    description:
      date:
        date: 'Jul 6, 2009'
        timestamp: Mon Jul  6 13:23:08 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        The test script attached.
        
        <b>What is the expected output? What do you see instead?</b>
        
        The output produced by the test script is:
        
        25: (
          &quot;\xA0Vermietungen&quot;,
         
        &quot;/anzeigen/antz2/index.html?xv[order]=pdat+desc%2Cfirst_mod+desc%2Csort2+desc%2C+sort3+desc&amp;xv[start]=0&amp;xv[vwnum]=10&amp;xv[cart_query]=&amp;qv[categories]=92&quot;,
        )
        27: &#39;�Vermietungen&#39; is space-padded and cannot succeed at ./test_find_link
        line 21
        (undef, &quot;/mp_styles/mainpost_global.css&quot;)
        
        <b>What version of the product are you using? On what operating system?</b>
        WWW::Mechanize 1.54 on Linux bigblue 2.6.27.23-0.1-pae #1 SMP 2009-05-26
        17:02:05 -0400 i686 i686 i386 GNU/Linux
        
        <b>Please provide any additional information below.</b>
        
        Whether -&gt;find_link( text =&gt; $text ) works correctly for links that include
        non-breaking spaces depends on the internal encoding of the
        $mech-&gt;content one one hand and that of $text on the other.
        
        If the utf8 flag is not set for the content, non-breaking spaces will
        not get removed by the get_trimmed_text method within HTML::TokeParser,
        because /\s/ does _not_ match non-breaking spaces for latin1 strings,
        and so they will have to be specified in the $text in order to find the
        matching link.
        
        If $text has an utf8 bit set, find_link(), however, will then complain
        that &quot;&#39;...&#39; is space-padded and cannot succeed&quot; and discard this filter
        argument, because /\s/ _does_ match non-breaking spaces in this case.
        
        I suggest to utf8::upgrade($content) before feeding it to
        HTML::TokeParser and also to utf8::upgrade() the values in
        WWW::Mechanize-&gt;_clean_keys() to avoid this problem.
        
        BTW, I also think that it&#39;s not a good idea to simply discard arguments
        which seem invalid, because this simply causes _any_ link to be found,
        which is usually not what you would expect. IMHO one should return _no_
        link in this case.
        </pre>
      reporter: martin.h...@googlemail.com
    issue: 109
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: ->find_link() behaviour depends on internal encoding of strings'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=109
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=111
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:08:46 2011
        inner:
          - key: Labels
            value: WM
      - author: mark.sto...@gmail.com
        comment: |-
          I could not reproduce this issue with the test below. I recommend this issue be closed:
          
          use Test::More;
          
          use WWW::Mechanize;
          my $mech = WWW::Mechanize->new;
             $mech->get('https://www.google.com/');
          is($mech->status,200, 'Correct status is returned for https calls');
          
          done_testing;
          ~
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 09:43:54 2013
        inner: ~
      - author: marlon.a...@gmail.com
        comment: |-
          Hi,
          
          This issue requires a timeout. It means, some sites with https doesn't respect the timeout timer.
        date: 'Feb 2, 2013'
        date_long: Sat Feb  2 08:38:02 2013
        inner: ~
    data: |+
      marlon.a...@gmail.com reported on Jul 14, 2009 <!-- Tue Jul 14 20:10:55 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
          my $url = &#39;<a href="http://web.archive.org/web/20130510123721/https://www.autocarcoolstuff.com/checkout.cfm&#39;;" rel="nofollow">https://www.autocarcoolstuff.com/checkout.cfm&#39;;</a>
          use WWW::Mechanize;
          my $mech = WWW::Mechanize-&gt;new(
              timeout =&gt; 10
          );
      
          $mech-&gt;get( $url );
          print $mech-&gt;status() . &quot;\n&quot;;
      
      <b>What is the expected output? What do you see instead?</b>
      never returns.
      
      <b>What version of the product are you using? On what operating system?</b>
      ubuntu
      <b>Please provide any additional information below.</b>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 111](http://code.google.com/p/www-mechanize/issues/detail?id=111) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=111)
      
      * **Type**:      Defect
      * **Date**:      Jul 14, 2009
      * **Reporter**:  marlon.a...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:08:46 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 09:43:54 2013 -->:
      
      <pre>
      I could not reproduce this issue with the test below. I recommend this issue be closed:
      
      use Test::More;
      
      use WWW::Mechanize;
      my $mech = WWW::Mechanize->new;
         $mech->get('https://www.google.com/');
      is($mech->status,200, 'Correct status is returned for https calls');
      
      done_testing;
      ~
      </pre>
      
      
      **marlon.a...@gmail.com** commented on Feb 2, 2013 <!-- Sat Feb  2 08:38:02 2013 -->:
      
      <pre>
      Hi,
      
      This issue requires a timeout. It means, some sites with https doesn't respect the timeout timer.
      </pre>
      

    description:
      date:
        date: 'Jul 14, 2009'
        timestamp: Tue Jul 14 20:10:55 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
            my $url = &#39;<a href="http://web.archive.org/web/20130510123721/https://www.autocarcoolstuff.com/checkout.cfm&#39;;" rel="nofollow">https://www.autocarcoolstuff.com/checkout.cfm&#39;;</a>
            use WWW::Mechanize;
            my $mech = WWW::Mechanize-&gt;new(
                timeout =&gt; 10
            );
        
            $mech-&gt;get( $url );
            print $mech-&gt;status() . &quot;\n&quot;;
        
        <b>What is the expected output? What do you see instead?</b>
        never returns.
        
        <b>What version of the product are you using? On what operating system?</b>
        ubuntu
        <b>Please provide any additional information below.</b>
        
        
        </pre>
      reporter: marlon.a...@gmail.com
    issue: 111
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Get doesn't return on https
    url: http://code.google.com/p/www-mechanize/issues/detail?id=111
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=114
    comments:
      - author: ikes...@gmail.com
        comment: See http://www.perlmonks.org/?node_id=788720 for a runnable demonstration of the problem
        date: 'Aug 15, 2009'
        date_long: Sat Aug 15 09:32:42 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      vparada@gmail.com reported on Aug 14, 2009 <!-- Fri Aug 14 12:57:10 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
        $mech-&gt;get($url);
        for $img ($mech-&gt;images) {
        #  $mech-&gt;head($img-&gt;url_abs());
        #  $mech-&gt;back();
          $mech-&gt;get($img-&gt;url_abs());
          $mech-&gt;back();
        }
      
      <b>What is the expected output? What do you see instead?</b>
      
      I want to request every image with the page&#39;s URL as the referrer. That 
      code works as expected, except when I remove the comment hashes to request 
      the headers first. Then, the URL used by head() is sent by get() as the 
      referrer, even after calling back() before it, which also fails with the 
      first embeded image. Also the same URL is used as referrer by head() for 
      the second image.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW::Mechanize 1.58
      ActivePerl 5.10.0
      Win XP SP3
      
      <b>Please provide any additional information below.</b>
      
      Working test available at &lt;<a href="http://www.vitoco.cl/test-ref/test-ref.pl" rel="nofollow">http://www.vitoco.cl/test-ref/test-ref.pl</a>&gt;
      There is a thread with same subject at perlmonks.org.
      Seems to be related with Issue id=112.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 114](http://code.google.com/p/www-mechanize/issues/detail?id=114) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=114)
      
      * **Type**:      Defect
      * **Date**:      Aug 14, 2009
      * **Reporter**:  vparada@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **ikes...@gmail.com** commented on Aug 15, 2009 <!-- Sat Aug 15 09:32:42 2009 -->:
      
      <pre>
      See http://www.perlmonks.org/?node_id=788720 for a runnable demonstration of the problem
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Aug 14, 2009'
        timestamp: Fri Aug 14 12:57:10 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
          $mech-&gt;get($url);
          for $img ($mech-&gt;images) {
          #  $mech-&gt;head($img-&gt;url_abs());
          #  $mech-&gt;back();
            $mech-&gt;get($img-&gt;url_abs());
            $mech-&gt;back();
          }
        
        <b>What is the expected output? What do you see instead?</b>
        
        I want to request every image with the page&#39;s URL as the referrer. That 
        code works as expected, except when I remove the comment hashes to request 
        the headers first. Then, the URL used by head() is sent by get() as the 
        referrer, even after calling back() before it, which also fails with the 
        first embeded image. Also the same URL is used as referrer by head() for 
        the second image.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW::Mechanize 1.58
        ActivePerl 5.10.0
        Win XP SP3
        
        <b>Please provide any additional information below.</b>
        
        Working test available at &lt;<a href="http://www.vitoco.cl/test-ref/test-ref.pl" rel="nofollow">http://www.vitoco.cl/test-ref/test-ref.pl</a>&gt;
        There is a thread with same subject at perlmonks.org.
        Seems to be related with Issue id=112.
        
        </pre>
      reporter: vparada@gmail.com
    issue: 114
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Referer and HEAD using WWW::Mechanize
    url: http://code.google.com/p/www-mechanize/issues/detail?id=114
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=115
    comments:
      - author: ddascale...@gmail.com
        comment: 'Attached test case showing failure on *nix (hangs on Windows - see issue #116).'
        date: 'Aug 15, 2009'
        date_long: Sat Aug 15 00:50:12 2009
        inner: ~
      - author: krawczyk
        comment: |-
          This is a bug in LWP, not in Mechanize.  I have submitted a patch to have it fixed:
          
          https://rt.cpan.org/Public/Bug/Display.html?id=55480
        date: 'Mar 11, 2010'
        date_long: Thu Mar 11 12:24:10 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 10, 2010'
        date_long: Sat Apr 10 20:57:16 2010
        inner:
          - key: Summary
            value: 'WM: submit_form( with_fields =&gt; { submit =&gt; &#39;some value&#39; } ) won&#39;t POST the &quot;submit&quot; parameter'
          - key: Labels
            value: wm
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 12, 2010'
        date_long: Mon Apr 12 22:57:18 2010
        inner:
          - key: Labels
            value: -wm WM
    data: |+
      ddascale...@gmail.com reported on Aug 14, 2009 <!-- Fri Aug 14 19:06:22 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Have a form with two submit elements named &#39;submit&#39; but having different
      values (example:
      <a href="http://github.com/marcusramberg/mojomojo/blob/9bfd143fa0247a5cc15b626d58eda65c183c10a2/root/base/page/edit.tt#L58" rel="nofollow">http://github.com/marcusramberg/mojomojo/blob/9bfd143fa0247a5cc15b626d58eda65c183c10a2/root/base/page/edit.tt#L58</a>)
      2. Run this code:
      
      $mech-&gt;submit_form(
          submit =&gt; &#39;Save and View&#39;,
          with_fields =&gt; {
              body =&gt; &#39;...&#39;
          }
      )
      
      <b>What is the expected output? What do you see instead?</b>
      
      The &#39;submit&#39; field is not posted. A functional workaround that posts the
      &#39;submit&#39; field is:
      
      $mech-&gt;form_with_fields(&#39;body&#39;);
      $mech-&gt;field(body =&gt; &#39;...&#39;)
      ok $mech-&gt;click_button(value =&gt; &#39;Save and View&#39;);
      
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW::Mechanize 1.58 on Windows XP SP3.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 115](http://code.google.com/p/www-mechanize/issues/detail?id=115) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=115)
      
      * **Type**:      Defect
      * **Date**:      Aug 14, 2009
      * **Reporter**:  ddascale...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **ddascale...@gmail.com** commented on Aug 15, 2009 <!-- Sat Aug 15 00:50:12 2009 -->:
      
      <pre>
      Attached test case showing failure on *nix (hangs on Windows - see issue #116).
      </pre>
      
      
      **krawczyk** commented on Mar 11, 2010 <!-- Thu Mar 11 12:24:10 2010 -->:
      
      <pre>
      This is a bug in LWP, not in Mechanize.  I have submitted a patch to have it fixed:
      
      https://rt.cpan.org/Public/Bug/Display.html?id=55480
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 10, 2010 <!-- Sat Apr 10 20:57:16 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: submit_form( with_fields =&gt; { submit =&gt; &#39;some value&#39; } ) won&#39;t POST the &quot;submit&quot; parameter
      * Labels : `wm`
      
      **petda...@gmail.com** commented on Apr 12, 2010 <!-- Mon Apr 12 22:57:18 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `-wm WM`

    description:
      date:
        date: 'Aug 14, 2009'
        timestamp: Fri Aug 14 19:06:22 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Have a form with two submit elements named &#39;submit&#39; but having different
        values (example:
        <a href="http://github.com/marcusramberg/mojomojo/blob/9bfd143fa0247a5cc15b626d58eda65c183c10a2/root/base/page/edit.tt#L58" rel="nofollow">http://github.com/marcusramberg/mojomojo/blob/9bfd143fa0247a5cc15b626d58eda65c183c10a2/root/base/page/edit.tt#L58</a>)
        2. Run this code:
        
        $mech-&gt;submit_form(
            submit =&gt; &#39;Save and View&#39;,
            with_fields =&gt; {
                body =&gt; &#39;...&#39;
            }
        )
        
        <b>What is the expected output? What do you see instead?</b>
        
        The &#39;submit&#39; field is not posted. A functional workaround that posts the
        &#39;submit&#39; field is:
        
        $mech-&gt;form_with_fields(&#39;body&#39;);
        $mech-&gt;field(body =&gt; &#39;...&#39;)
        ok $mech-&gt;click_button(value =&gt; &#39;Save and View&#39;);
        
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW::Mechanize 1.58 on Windows XP SP3.
        </pre>
      reporter: ddascale...@gmail.com
    issue: 115
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: submit_form( with_fields => { submit => 'some value' } ) won't POST the \"submit\" parameter"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=115
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=116
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:58:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      ddascale...@gmail.com reported on Aug 14, 2009 <!-- Fri Aug 14 23:59:08 2009 -->
      
      <pre>
      The eval hangs. Here&#39;s a a reduced test case:
      
      #!perl -Tw
      
      use warnings;
      use strict;
      use Test::More &#39;no_plan&#39;;
      use URI::file ();
      
      BEGIN {
          delete @ENV{qw(PATH IFS CDPATH ENV BASH_ENV)};  # Placates taint-unsafe
      Cwd.pm in 5.6.1
          use_ok( &#39;WWW::Mechanize&#39; );
      }
      
      my $mech = WWW::Mechanize-&gt;new( cookie_jar =&gt; undef, autocheck =&gt; 0 );
      isa_ok( $mech, &#39;WWW::Mechanize&#39; );
      my $uri = URI::file-&gt;new_abs( &#39;t/form_with_fields.html&#39; )-&gt;as_string;
      
      $mech-&gt;get( $uri );
      ok( $mech-&gt;success, &quot;Fetched $uri&quot; ) or die q{Can&#39;t get test page};
      
      {
          $mech-&gt;get($uri);
          eval { $mech-&gt;submit_form( 
                  with_fields =&gt; { &#39;1b&#39; =&gt; &#39;&#39;, &#39;opt[2]&#39; =&gt; &#39;&#39; },
              ); };
          is($@,&#39;&#39;, &#39; submit_form( with_fields =&gt; %data ) &#39; );
      }
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 116](http://code.google.com/p/www-mechanize/issues/detail?id=116) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=116)
      
      * **Type**:      Defect
      * **Date**:      Aug 14, 2009
      * **Reporter**:  ddascale...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:58:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Aug 14, 2009'
        timestamp: Fri Aug 14 23:59:08 2009
      description: |-
        <pre>
        The eval hangs. Here&#39;s a a reduced test case:
        
        #!perl -Tw
        
        use warnings;
        use strict;
        use Test::More &#39;no_plan&#39;;
        use URI::file ();
        
        BEGIN {
            delete @ENV{qw(PATH IFS CDPATH ENV BASH_ENV)};  # Placates taint-unsafe
        Cwd.pm in 5.6.1
            use_ok( &#39;WWW::Mechanize&#39; );
        }
        
        my $mech = WWW::Mechanize-&gt;new( cookie_jar =&gt; undef, autocheck =&gt; 0 );
        isa_ok( $mech, &#39;WWW::Mechanize&#39; );
        my $uri = URI::file-&gt;new_abs( &#39;t/form_with_fields.html&#39; )-&gt;as_string;
        
        $mech-&gt;get( $uri );
        ok( $mech-&gt;success, &quot;Fetched $uri&quot; ) or die q{Can&#39;t get test page};
        
        {
            $mech-&gt;get($uri);
            eval { $mech-&gt;submit_form( 
                    with_fields =&gt; { &#39;1b&#39; =&gt; &#39;&#39;, &#39;opt[2]&#39; =&gt; &#39;&#39; },
                ); };
            is($@,&#39;&#39;, &#39; submit_form( with_fields =&gt; %data ) &#39; );
        }
        
        
        </pre>
      reporter: ddascale...@gmail.com
    issue: 116
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'form_with_fields.t from SVN HEAD hangs on Strawberry Perl 5.10.0, Windows XP SP3'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=116
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=117
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:29:46 2010
        inner:
          - key: Summary
            value: 'WM: $mech-&gt;field should be documented to return the field&#39;s old value'
          - key: Labels
            value: WM
    data: |+
      ddascale...@gmail.com reported on Aug 15, 2009 <!-- Sat Aug 15 01:15:47 2009 -->
      
      <pre>
      I was trying to test the setting of a field as
      
          ok $mech-&gt;field(&#39;body&#39;, &#39;page body&#39;), &#39;set the &quot;body&quot; value&#39;;
      
      and kept getting a failure, even though the field was found.
      
      Turns out that the value returned by field() is that of HTML::Form-&gt;value,
      which returns the old value of the field, in this case &#39;&#39;.
      
      A line like 
      
      &quot;Returns the old value of the field (or the empty string if the field has
      never been set).&quot;
      
      in the POD will suffice.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 117](http://code.google.com/p/www-mechanize/issues/detail?id=117) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=117)
      
      * **Type**:      Defect
      * **Date**:      Aug 15, 2009
      * **Reporter**:  ddascale...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:29:46 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: $mech-&gt;field should be documented to return the field&#39;s old value
      * Labels : `WM`

    description:
      date:
        date: 'Aug 15, 2009'
        timestamp: Sat Aug 15 01:15:47 2009
      description: |-
        <pre>
        I was trying to test the setting of a field as
        
            ok $mech-&gt;field(&#39;body&#39;, &#39;page body&#39;), &#39;set the &quot;body&quot; value&#39;;
        
        and kept getting a failure, even though the field was found.
        
        Turns out that the value returned by field() is that of HTML::Form-&gt;value,
        which returns the old value of the field, in this case &#39;&#39;.
        
        A line like 
        
        &quot;Returns the old value of the field (or the empty string if the field has
        never been set).&quot;
        
        in the POD will suffice.
        </pre>
      reporter: ddascale...@gmail.com
    issue: 117
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: $mech->field should be documented to return the field's old value"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=117
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=118
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 11, 2010'
        date_long: Thu Mar 11 12:06:47 2010
        inner:
          - key: Labels
            value: WM
    data: |+
      alastair...@gmail.com reported on Aug 15, 2009 <!-- Sat Aug 15 03:12:26 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Put a call to $mech-&gt;find_link( id =&gt; &#39;whatever&#39; ) in find_link.t
      2. Run it
      3. It dies
      
      <b>What is the expected output? What do you see instead?</b>
      
      It should not die on any link  
      
      <b>What version of the product are you using? On what operating system?</b>
      
      1.54 on Ubuntu Hardy
      
      <b>Please provide any additional information below.</b>
      
      I noticed there was a separate test for the ID-based search. It doesn&#39;t
      pick up this problem because of it. It seems that the link
      
        &lt;A HREF=&quot;<a href="http://a.cpan.org/&quot;&gt;CPAN" rel="nofollow">http://a.cpan.org/&quot;&gt;CPAN</a> A&lt;/A&gt;
      
      in the test HTML is not being correctly parsed:
      
      $VAR2 = bless( [
                       &#39;<a href="http://a.cpan.org/&#39;" rel="nofollow">http://a.cpan.org/&#39;</a>,
                       &#39;CPAN A&#39;,
                       undef,
                       &#39;a&#39;
                     ], &#39;WWW::Mechanize::Link&#39; );
      
      Compare it to the link above it:
      
        &lt;A HREF=&quot;<a href="http://blargle.com/&quot;&gt;blargle&lt;/A&gt;" rel="nofollow">http://blargle.com/&quot;&gt;blargle&lt;/A&gt;</a>
      
      $VAR2 = bless( [
                       &#39;<a href="http://blargle.com/&#39;" rel="nofollow">http://blargle.com/&#39;</a>,
                       &#39;blargle&#39;,
                       undef,
                       &#39;a&#39;,
                       bless( do{\(my $o =
      &#39;file:///home/al/code/www-mechanize-read-only/t/find_link.html&#39;)},
      &#39;URI::file&#39; ),
                       {
                         &#39;href&#39; =&gt; &#39;<a href="http://blargle.com/&#39;" rel="nofollow">http://blargle.com/&#39;</a>
                       }
                     ], &#39;WWW::Mechanize::Link&#39; );
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 118](http://code.google.com/p/www-mechanize/issues/detail?id=118) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=118)
      
      * **Type**:      Defect
      * **Date**:      Aug 15, 2009
      * **Reporter**:  alastair...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Mar 11, 2010 <!-- Thu Mar 11 12:06:47 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Aug 15, 2009'
        timestamp: Sat Aug 15 03:12:26 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Put a call to $mech-&gt;find_link( id =&gt; &#39;whatever&#39; ) in find_link.t
        2. Run it
        3. It dies
        
        <b>What is the expected output? What do you see instead?</b>
        
        It should not die on any link  
        
        <b>What version of the product are you using? On what operating system?</b>
        
        1.54 on Ubuntu Hardy
        
        <b>Please provide any additional information below.</b>
        
        I noticed there was a separate test for the ID-based search. It doesn&#39;t
        pick up this problem because of it. It seems that the link
        
          &lt;A HREF=&quot;<a href="http://a.cpan.org/&quot;&gt;CPAN" rel="nofollow">http://a.cpan.org/&quot;&gt;CPAN</a> A&lt;/A&gt;
        
        in the test HTML is not being correctly parsed:
        
        $VAR2 = bless( [
                         &#39;<a href="http://a.cpan.org/&#39;" rel="nofollow">http://a.cpan.org/&#39;</a>,
                         &#39;CPAN A&#39;,
                         undef,
                         &#39;a&#39;
                       ], &#39;WWW::Mechanize::Link&#39; );
        
        Compare it to the link above it:
        
          &lt;A HREF=&quot;<a href="http://blargle.com/&quot;&gt;blargle&lt;/A&gt;" rel="nofollow">http://blargle.com/&quot;&gt;blargle&lt;/A&gt;</a>
        
        $VAR2 = bless( [
                         &#39;<a href="http://blargle.com/&#39;" rel="nofollow">http://blargle.com/&#39;</a>,
                         &#39;blargle&#39;,
                         undef,
                         &#39;a&#39;,
                         bless( do{\(my $o =
        &#39;file:///home/al/code/www-mechanize-read-only/t/find_link.html&#39;)},
        &#39;URI::file&#39; ),
                         {
                           &#39;href&#39; =&gt; &#39;<a href="http://blargle.com/&#39;" rel="nofollow">http://blargle.com/&#39;</a>
                         }
                       ], &#39;WWW::Mechanize::Link&#39; );
        
        </pre>
      reporter: alastair...@gmail.com
    issue: 118
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Not all links parsed correctly
    url: http://code.google.com/p/www-mechanize/issues/detail?id=118
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=120
    comments:
      - author: jsarvesh...@gmail.com
        comment: try using click() instead of click_button...
        date: 'Mar 26, 2011'
        date_long: Sat Mar 26 04:14:51 2011
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:04:57 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      i4z9k7...@sneakemail.com reported on Aug 18, 2009 <!-- Tue Aug 18 13:01:22 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      $ perl -MWWW::Mechanize -e &#39;
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
        $mech-&gt;click_button(value =&gt; &quot;does not exist&quot;);
      &#39;
      Can&#39;t call method &quot;find_input&quot; on an undefined value at
      /usr/share/perl5/WWW/Mechanize.pm line 1716.
      
      $ perl -MWWW::Mechanize -e &#39;
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;http://perldoc.perl.org&quot;);          # site with form
        $mech-&gt;click_button(value =&gt; &quot;does not exist&quot;);
      &#39;
      Can&#39;t call method &quot;header&quot; on an undefined value at
      /usr/share/perl5/WWW/Mechanize.pm line 2381.
      
      $ perl -MWWW::Mechanize -e &#39;
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
        $mech-&gt;click_button(name =&gt; &quot;does not exist&quot;);
      &#39;
      Can&#39;t call method &quot;click&quot; on an undefined value at
      /usr/share/perl5/WWW/Mechanize.pm line 1705.
      
      $ perl -MWWW::Mechanize -e &#39;
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
        $mech-&gt;click_button(number =&gt; 1);
      &#39;
      Can&#39;t call method &quot;find_input&quot; on an undefined value at
      /usr/share/perl5/WWW/Mechanize.pm line 1708.
      
      and so on ... that sent me on a merry chase after a typo in a button
      identifier.
      
      
      <b>What is the expected output? What do you see instead?</b>
      
      Something akin to the error message produced by 
      $ perl -MWWW::Mechanize -e &#39;
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;get(&quot;<a href="http://cpan.org/no-such-url&quot;)" rel="nofollow">http://cpan.org/no-such-url&quot;);</a>
      &#39;
      Error GETing <a href="http://cpan.org/no-such-url" rel="nofollow">http://cpan.org/no-such-url</a>: Not Found at -e line 3
      
      I see the &quot;can&#39;t call method &#39;foo&#39; on an undefined value ...&quot; errors instead.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      $ grep &#39;our $VERSION&#39; /usr/share/perl5/WWW/Mechanize.pm
      our $VERSION = &#39;1.58&#39;;
      
      Debian Linux (amd64) sid, Debian-built perl executable 5.10.0
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 120](http://code.google.com/p/www-mechanize/issues/detail?id=120) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=120)
      
      * **Type**:      Defect
      * **Date**:      Aug 18, 2009
      * **Reporter**:  i4z9k7...@sneakemail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **jsarvesh...@gmail.com** commented on Mar 26, 2011 <!-- Sat Mar 26 04:14:51 2011 -->:
      
      <pre>
      try using click() instead of click_button...
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:04:57 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Aug 18, 2009'
        timestamp: Tue Aug 18 13:01:22 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        $ perl -MWWW::Mechanize -e &#39;
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
          $mech-&gt;click_button(value =&gt; &quot;does not exist&quot;);
        &#39;
        Can&#39;t call method &quot;find_input&quot; on an undefined value at
        /usr/share/perl5/WWW/Mechanize.pm line 1716.
        
        $ perl -MWWW::Mechanize -e &#39;
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&quot;http://perldoc.perl.org&quot;);          # site with form
          $mech-&gt;click_button(value =&gt; &quot;does not exist&quot;);
        &#39;
        Can&#39;t call method &quot;header&quot; on an undefined value at
        /usr/share/perl5/WWW/Mechanize.pm line 2381.
        
        $ perl -MWWW::Mechanize -e &#39;
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
          $mech-&gt;click_button(name =&gt; &quot;does not exist&quot;);
        &#39;
        Can&#39;t call method &quot;click&quot; on an undefined value at
        /usr/share/perl5/WWW/Mechanize.pm line 1705.
        
        $ perl -MWWW::Mechanize -e &#39;
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&quot;http://cpan.org&quot;);          # site without form
          $mech-&gt;click_button(number =&gt; 1);
        &#39;
        Can&#39;t call method &quot;find_input&quot; on an undefined value at
        /usr/share/perl5/WWW/Mechanize.pm line 1708.
        
        and so on ... that sent me on a merry chase after a typo in a button
        identifier.
        
        
        <b>What is the expected output? What do you see instead?</b>
        
        Something akin to the error message produced by 
        $ perl -MWWW::Mechanize -e &#39;
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&quot;<a href="http://cpan.org/no-such-url&quot;)" rel="nofollow">http://cpan.org/no-such-url&quot;);</a>
        &#39;
        Error GETing <a href="http://cpan.org/no-such-url" rel="nofollow">http://cpan.org/no-such-url</a>: Not Found at -e line 3
        
        I see the &quot;can&#39;t call method &#39;foo&#39; on an undefined value ...&quot; errors instead.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        $ grep &#39;our $VERSION&#39; /usr/share/perl5/WWW/Mechanize.pm
        our $VERSION = &#39;1.58&#39;;
        
        Debian Linux (amd64) sid, Debian-built perl executable 5.10.0
        </pre>
      reporter: i4z9k7...@sneakemail.com
    issue: 120
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: click_button doesn't check for errors
    url: http://code.google.com/p/www-mechanize/issues/detail?id=120
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=124
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:13:34 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      tim.besard@gmail.com reported on Aug 30, 2009 <!-- Sun Aug 30 02:22:00 2009 -->
      
      <pre>
      Certain webservers seem to report a faulty content-type (or no at all).
      When fetching pages from such a server, it is impossible to extract the
      forms as forms() only seems to work when the content type equals to
      &#39;text/html&#39;.
      
      An example of such a server is the Rapidshare webserver, which is used in
      the attached example.
      
      Some possible ways of fixing this crossed my mind:
      - support for content-type modification (e.g. using
      &quot;$mech-&gt;content_type($new_ct)&quot;, followed by an &quot;_update_page(...)&quot;)
      - default an unknown content-type to &#39;text/html&#39;, as www::mechanize now
      defaults to &#39;&#39;
      - forms() supporting pages with an empty content type
      
      I&#39;m using www::mechanize version 1.58, on Perl 5.10.
      
      Thanks in advance!
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 124](http://code.google.com/p/www-mechanize/issues/detail?id=124) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=124)
      
      * **Type**:      Defect
      * **Date**:      Aug 30, 2009
      * **Reporter**:  tim.besard@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:13:34 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Aug 30, 2009'
        timestamp: Sun Aug 30 02:22:00 2009
      description: |-
        <pre>
        Certain webservers seem to report a faulty content-type (or no at all).
        When fetching pages from such a server, it is impossible to extract the
        forms as forms() only seems to work when the content type equals to
        &#39;text/html&#39;.
        
        An example of such a server is the Rapidshare webserver, which is used in
        the attached example.
        
        Some possible ways of fixing this crossed my mind:
        - support for content-type modification (e.g. using
        &quot;$mech-&gt;content_type($new_ct)&quot;, followed by an &quot;_update_page(...)&quot;)
        - default an unknown content-type to &#39;text/html&#39;, as www::mechanize now
        defaults to &#39;&#39;
        - forms() supporting pages with an empty content type
        
        I&#39;m using www::mechanize version 1.58, on Perl 5.10.
        
        Thanks in advance!
        
        
        </pre>
      reporter: tim.besard@gmail.com
    issue: 124
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: forms() failure upon empty content-type'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=124
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=125
    comments: []
    data: |+
      petda...@gmail.com reported on Aug 31, 2009 <!-- Mon Aug 31 12:20:00 2009 -->
      
      <pre>
      I just spent an hour debugging a problem where I had been setting a
      checkbox&#39;s value to something it could not be.  Mech should have warned me.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 125](http://code.google.com/p/www-mechanize/issues/detail?id=125) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=125)
      
      * **Type**:      Defect
      * **Date**:      Aug 31, 2009
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      

    description:
      date:
        date: 'Aug 31, 2009'
        timestamp: Mon Aug 31 12:20:00 2009
      description: |-
        <pre>
        I just spent an hour debugging a problem where I had been setting a
        checkbox&#39;s value to something it could not be.  Mech should have warned me.
        </pre>
      reporter: petda...@gmail.com
    issue: 125
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: Mech should complain if we try to assign a checkbox a value that it cannot handle'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=125
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=128
    comments:
      - author: Dragon31...@gmail.com
        comment: 'Same here (v 1.60, perl 5.10)'
        date: 'Apr 4, 2010'
        date_long: Sun Apr  4 08:52:08 2010
        inner: ~
      - author: petda...@gmail.com
        comment: 'WM: So how should we be encoding the filehandle?'
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:33:12 2010
        inner:
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:33:52 2010
        inner:
          - key: Summary
            value: 'WM: save_content() emits &quot;Wide character in print..&quot;'
      - author: Martin.v...@gmx.net
        comment: |-
          I'd expect the binary content of the saved file to match the binary content transmitted over the wire.
          
          One quick way to accomplish this would be using "$self->res->content_charset", and hope that a) that's what HTTP::Message::decoded_content actually used (very likely, as WWW::Mechanize::_update_page doesn't pass any arguments overriding that default) and b) that decoding and encoding will actually restore the original file.
          
          In my opinion, the cleaner solution would be to save the undecoded binary data, i.e. print "$self->res->content_ref" in bytes mode. Perhaps even in binary mode, independent of content type. If you don't want this behaviour by default (for reasons I can't imagine just now), I'd at least like this behaviour available using a suitable argument, e.g. "$mech->save_content($filename, raw => 1)" or similar.
          
          Do you want a patch for the latter approach, or will you implement this yourself?
        date: 'Jul 30, 2011'
        date_long: Sat Jul 30 06:38:03 2011
        inner: ~
      - author: Martin.v...@gmx.net
        comment: |-
          OK, perhaps skipping the decoded_content altogether is a bad idea, as it would skip decoding of transparent transfer encodings like gzip as well. So the better choice would be "$self->res->decoded_content(charset => "none")".
          
          In the above comment, I proposed "content_ref" instead of "content", as I had been thinking about File::Slurp::write_file which does accept a reference to a string. I guess that's a bad idea for a plain print, so we should copy the string there.
        date: 'Jul 30, 2011'
        date_long: Sat Jul 30 10:33:12 2011
        inner: ~
    data: |+
      e.yarm...@gmail.com reported on Sep 6, 2009 <!-- Sun Sep  6 14:36:44 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      1. Fetch a utf-8 encoded content and use save_content() to save it to a file.
      
      <b>What is the expected output? What do you see instead?</b>
      
      Warnings should be disabled in this sub IMHO. Or proper encoding 
      used for the fh.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 128](http://code.google.com/p/www-mechanize/issues/detail?id=128) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=128)
      
      * **Type**:      Defect
      * **Date**:      Sep 6, 2009
      * **Reporter**:  e.yarm...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **Dragon31...@gmail.com** commented on Apr 4, 2010 <!-- Sun Apr  4 08:52:08 2010 -->:
      
      <pre>
      Same here (v 1.60, perl 5.10)
      </pre>
      
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:33:12 2010 -->:
      
      <pre>
      WM: So how should we be encoding the filehandle?
      </pre>
      
      * Labels : `WM`
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:33:52 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: save_content() emits &quot;Wide character in print..&quot;
      
      **Martin.v...@gmx.net** commented on Jul 30, 2011 <!-- Sat Jul 30 06:38:03 2011 -->:
      
      <pre>
      I'd expect the binary content of the saved file to match the binary content transmitted over the wire.
      
      One quick way to accomplish this would be using "$self->res->content_charset", and hope that a) that's what HTTP::Message::decoded_content actually used (very likely, as WWW::Mechanize::_update_page doesn't pass any arguments overriding that default) and b) that decoding and encoding will actually restore the original file.
      
      In my opinion, the cleaner solution would be to save the undecoded binary data, i.e. print "$self->res->content_ref" in bytes mode. Perhaps even in binary mode, independent of content type. If you don't want this behaviour by default (for reasons I can't imagine just now), I'd at least like this behaviour available using a suitable argument, e.g. "$mech->save_content($filename, raw => 1)" or similar.
      
      Do you want a patch for the latter approach, or will you implement this yourself?
      </pre>
      
      
      **Martin.v...@gmx.net** commented on Jul 30, 2011 <!-- Sat Jul 30 10:33:12 2011 -->:
      
      <pre>
      OK, perhaps skipping the decoded_content altogether is a bad idea, as it would skip decoding of transparent transfer encodings like gzip as well. So the better choice would be "$self->res->decoded_content(charset => "none")".
      
      In the above comment, I proposed "content_ref" instead of "content", as I had been thinking about File::Slurp::write_file which does accept a reference to a string. I guess that's a bad idea for a plain print, so we should copy the string there.
      </pre>
      

    description:
      date:
        date: 'Sep 6, 2009'
        timestamp: Sun Sep  6 14:36:44 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        1. Fetch a utf-8 encoded content and use save_content() to save it to a file.
        
        <b>What is the expected output? What do you see instead?</b>
        
        Warnings should be disabled in this sub IMHO. Or proper encoding 
        used for the fh.
        
        </pre>
      reporter: e.yarm...@gmail.com
    issue: 128
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: save_content() emits "Wide character in print.."'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=128
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=129
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Sep 9, 2009'
        date_long: Wed Sep  9 14:31:34 2009
        inner:
          - key: Labels
            value: -Type-Defect Type-Enhancement
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 11, 2010'
        date_long: Thu Mar 11 12:04:02 2010
        inner:
          - key: Labels
            value: WM
    data: |+
      petda...@gmail.com reported on Sep 9, 2009 <!-- Wed Sep  9 14:31:24 2009 -->
      
      <pre>
      Allow an accessor for the request object.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 129](http://code.google.com/p/www-mechanize/issues/detail?id=129) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=129)
      
      * **Type**:      Enhancement
      * **Date**:      Sep 9, 2009
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Sep 9, 2009 <!-- Wed Sep  9 14:31:34 2009 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `-Type-Defect Type-Enhancement`
      
      **petda...@gmail.com** commented on Mar 11, 2010 <!-- Thu Mar 11 12:04:02 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Sep 9, 2009'
        timestamp: Wed Sep  9 14:31:24 2009
      description: |-
        <pre>
        Allow an accessor for the request object.
        </pre>
      reporter: petda...@gmail.com
    issue: 129
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Enhancement
    title: 'WM: Add a $mech->request() method'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=129
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=130
    comments:
      - author: swi...@gmail.com
        comment: |-
          replacing 
          {{{
          $self->die( 'Link not found: ', $link->url ) if $self->{autocheck};
          }}}
          with
          {{{
          $self->die( 'Link not found' ) if $self->{autocheck};
          }}}
          would fix the problem, which was in calling method url() on an always undefined
          object (if it's defined, follow_link() returns before that code)
        date: 'Oct 20, 2009'
        date_long: Tue Oct 20 03:18:25 2009
        inner: ~
      - author: jjpcon...@gmail.com
        comment: |-
          $mech->get( $url );
          
              $mech->submit_form(
                  form_number => 0,
                  fields      => {
                      username    => $user,
                      password    => $password,
                  }
              );
          
          The same error occures here if the credentials are not valid
        date: 'Oct 14, 2010'
        date_long: Thu Oct 14 01:31:46 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:08:59 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      Guillaum...@inria.fr reported on Sep 13, 2009 <!-- Sun Sep 13 13:07:45 2009 -->
      
      <pre>
      method follow_link has the following code:
      
      return $self-&gt;get( $link-&gt;url ) if $link;
      $self-&gt;die( &#39;Link not found: &#39;, $link-&gt;url ) if $self-&gt;{autocheck};
      
      When requested link is not found, the result is a non-graceful crash:
      Can&#39;t call method &quot;url&quot; on an undefined value at
      /usr/lib/perl5/vendor_perl/5.10.0/WWW/Mechanize.pm line 713.
      
      Exception crafting should be handled more carefully. And method description
      could also be a bit more explicit, as default behaviour doesn&#39;t match it
      anymore:
      If the page has no links, or the specified link
      couldn&#39;t be found, returns undef.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 130](http://code.google.com/p/www-mechanize/issues/detail?id=130) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=130)
      
      * **Type**:      Defect
      * **Date**:      Sep 13, 2009
      * **Reporter**:  Guillaum...@inria.fr
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **swi...@gmail.com** commented on Oct 20, 2009 <!-- Tue Oct 20 03:18:25 2009 -->:
      
      <pre>
      replacing 
      {{{
      $self->die( 'Link not found: ', $link->url ) if $self->{autocheck};
      }}}
      with
      {{{
      $self->die( 'Link not found' ) if $self->{autocheck};
      }}}
      would fix the problem, which was in calling method url() on an always undefined
      object (if it's defined, follow_link() returns before that code)
      </pre>
      
      
      **jjpcon...@gmail.com** commented on Oct 14, 2010 <!-- Thu Oct 14 01:31:46 2010 -->:
      
      <pre>
      $mech->get( $url );
      
          $mech->submit_form(
              form_number => 0,
              fields      => {
                  username    => $user,
                  password    => $password,
              }
          );
      
      The same error occures here if the credentials are not valid
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:08:59 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Sep 13, 2009'
        timestamp: Sun Sep 13 13:07:45 2009
      description: |-
        <pre>
        method follow_link has the following code:
        
        return $self-&gt;get( $link-&gt;url ) if $link;
        $self-&gt;die( &#39;Link not found: &#39;, $link-&gt;url ) if $self-&gt;{autocheck};
        
        When requested link is not found, the result is a non-graceful crash:
        Can&#39;t call method &quot;url&quot; on an undefined value at
        /usr/lib/perl5/vendor_perl/5.10.0/WWW/Mechanize.pm line 713.
        
        Exception crafting should be handled more carefully. And method description
        could also be a bit more explicit, as default behaviour doesn&#39;t match it
        anymore:
        If the page has no links, or the specified link
        couldn&#39;t be found, returns undef.
        </pre>
      reporter: Guillaum...@inria.fr
    issue: 130
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: autocheck make follow_link crashes when link not found
    url: http://code.google.com/p/www-mechanize/issues/detail?id=130
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=131
    comments:
      - author: risane...@gmail.com
        comment: |-
          Ok. Solution: Read the Docs. For REALLY BIG files, you do not want to store the
          content internally, but instead write to disk immediately. For this user
          LWP::UserAgents get possibility
          
          $wikimech->get($wikiurl, ':content_file' => $save);
        date: 'Sep 18, 2009'
        date_long: Fri Sep 18 03:07:44 2009
        inner: ~
      - author: risane...@gmail.com
        comment: |-
          Nevertheless, benchmarks indicate, that the usage of ->get() with a subsequent
          save_content()
          method uses - at least on a 64bit architecture - as much memory as 7 times the size of
          the retrieved data. A word of warning in the docs would not hurt - probably.
        date: 'Sep 18, 2009'
        date_long: Fri Sep 18 04:13:49 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:46:13 2011
        inner:
          - key: Summary
            value: 'WM: save_content eats memory like crazy'
          - key: Labels
            value: WM
    data: |+
      risane...@gmail.com reported on Sep 17, 2009 <!-- Thu Sep 17 06:24:20 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      1. go to <a href="http://dumps.wikimedia.org/backup-index.html" rel="nofollow">http://dumps.wikimedia.org/backup-index.html</a>, grab the english
      wiki and do
      
      2. $wikimech-&gt;get($wikiurl);             
         $wikimech-&gt;save_content($save); 
      
      <b>What is the expected output? What do you see instead?</b>
      
      I&#39;d expect on a machine that has 14GB of free memory to be able to get that
      5.2GB wiki. Instead, the process grows to a size of 5.2GB as it fetches the
      data. Then, when trying to save, the process memory requirements explode
      within 2.3 seconds 7.7GB 10GB 14GB boom &quot;out of memory&quot;.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW::Mechanize 1.60 Gentoo Linux x86_64
      
      <b>Please provide any additional information below.</b>
      
      top-snapshot shortly before going out of memory
      
      1542 root      20   0 15.7g  13g  312 D   11 87.3   1:50.69 P_da_wiki     
                                                                                  
       271 root      15  -5     0    0    0 D    8  0.0   0:21.60 kswapd0       
                                                                                  
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 131](http://code.google.com/p/www-mechanize/issues/detail?id=131) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=131)
      
      * **Type**:      Defect
      * **Date**:      Sep 17, 2009
      * **Reporter**:  risane...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **risane...@gmail.com** commented on Sep 18, 2009 <!-- Fri Sep 18 03:07:44 2009 -->:
      
      <pre>
      Ok. Solution: Read the Docs. For REALLY BIG files, you do not want to store the
      content internally, but instead write to disk immediately. For this user
      LWP::UserAgents get possibility
      
      $wikimech->get($wikiurl, ':content_file' => $save);
      </pre>
      
      
      **risane...@gmail.com** commented on Sep 18, 2009 <!-- Fri Sep 18 04:13:49 2009 -->:
      
      <pre>
      Nevertheless, benchmarks indicate, that the usage of ->get() with a subsequent
      save_content()
      method uses - at least on a 64bit architecture - as much memory as 7 times the size of
      the retrieved data. A word of warning in the docs would not hurt - probably.
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:46:13 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: save_content eats memory like crazy
      * Labels : `WM`

    description:
      date:
        date: 'Sep 17, 2009'
        timestamp: Thu Sep 17 06:24:20 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        1. go to <a href="http://dumps.wikimedia.org/backup-index.html" rel="nofollow">http://dumps.wikimedia.org/backup-index.html</a>, grab the english
        wiki and do
        
        2. $wikimech-&gt;get($wikiurl);             
           $wikimech-&gt;save_content($save); 
        
        <b>What is the expected output? What do you see instead?</b>
        
        I&#39;d expect on a machine that has 14GB of free memory to be able to get that
        5.2GB wiki. Instead, the process grows to a size of 5.2GB as it fetches the
        data. Then, when trying to save, the process memory requirements explode
        within 2.3 seconds 7.7GB 10GB 14GB boom &quot;out of memory&quot;.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW::Mechanize 1.60 Gentoo Linux x86_64
        
        <b>Please provide any additional information below.</b>
        
        top-snapshot shortly before going out of memory
        
        1542 root      20   0 15.7g  13g  312 D   11 87.3   1:50.69 P_da_wiki     
                                                                                    
         271 root      15  -5     0    0    0 D    8  0.0   0:21.60 kswapd0       
                                                                                    
        </pre>
      reporter: risane...@gmail.com
    issue: 131
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: save_content eats memory like crazy'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=131
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=133
    comments:
      - author: steve.pi...@gmail.com
        comment: |-
          Hopefully rightfully placed a ticket against libwww-perl on RT:
          
          http://rt.cpan.org/Public/Bug/Display.html?id=50252
        date: 'Oct 6, 2009'
        date_long: Tue Oct  6 09:14:54 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:13:55 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      steve.pi...@gmail.com reported on Oct 5, 2009 <!-- Mon Oct  5 14:52:17 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. tried installing through cpan ... and downloaded perl Makefile ... dmake ..
      2. tried above again
      3. tried couple of versions of file and dependencies - still same...
      
      <b>What is the expected output? What do you see instead?</b>
      
      expected ( well hoped - it is free software after all, and i do genuinely
      appreciatte the time you&#39;ve put into this ( even if I can&#39;t spell the
      phrase appropriately ) - the documentation alone is so solid ) to have
      catalyst unicode support working, of which this is a dependency - via
      test::www::mechanize. Instead cpan shell hung - after some time I got an
      error - I&#39;m assuming it&#39;s down to a timeout in the test back.t
      
      <b>What version of the product are you using? On what operating system?</b>
      
      This was win64 - had issues with win32 a week or so ago on a different
      system that fixed itself at some point (perhaps dependency behavour
      seesaw?). the perl 5.8 strawberry perl release - I traced it ( as far as
      this module is concerned ) to www-mechanize version 1.60 - I get the
      impression that the real error might well be else where but a fudge here
      may help others ( sorry - love fudge only in edible form ).
      
      <b>Please provide any additional information below.</b>
      
      Hi, didn&#39;t want to be a cant so had a bit of a dig:
      
      WWW-Mechanize-1.60\t\local\back.t
      
      sorry - can&#39;t find line number, but just after:
      
      my $server404 = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
      
      the call 
      
      my $server404url = $server404-&gt;url;
      
      doesn&#39;t seem to return localhost as the hostname - it returns the name of
      the pc instead :( - which I tried to access in a web browser during the
      test and it timed out. I had a quick look at the HTTP::Deamon docs but
      couldn&#39;t end up with the port number :( so ended up with the rather nasty:
      
      my $server404 = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
      my $t = $server404-&gt;url;
      $t =~ s/http\:\/\/([a-zA-Z1-9_-]*)/http\:\/\/localhost/ ;
      my $server404url = $t; # $server404-&gt;url;
      
      which enabled test to pass, and module to install. guess you could get away
      without the brackets in the regexp, but figured you may well be aware of a
      less cludgy hack to get things working.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 133](http://code.google.com/p/www-mechanize/issues/detail?id=133) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=133)
      
      * **Type**:      Defect
      * **Date**:      Oct 5, 2009
      * **Reporter**:  steve.pi...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **steve.pi...@gmail.com** commented on Oct 6, 2009 <!-- Tue Oct  6 09:14:54 2009 -->:
      
      <pre>
      Hopefully rightfully placed a ticket against libwww-perl on RT:
      
      http://rt.cpan.org/Public/Bug/Display.html?id=50252
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:13:55 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Oct 5, 2009'
        timestamp: Mon Oct  5 14:52:17 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. tried installing through cpan ... and downloaded perl Makefile ... dmake ..
        2. tried above again
        3. tried couple of versions of file and dependencies - still same...
        
        <b>What is the expected output? What do you see instead?</b>
        
        expected ( well hoped - it is free software after all, and i do genuinely
        appreciatte the time you&#39;ve put into this ( even if I can&#39;t spell the
        phrase appropriately ) - the documentation alone is so solid ) to have
        catalyst unicode support working, of which this is a dependency - via
        test::www::mechanize. Instead cpan shell hung - after some time I got an
        error - I&#39;m assuming it&#39;s down to a timeout in the test back.t
        
        <b>What version of the product are you using? On what operating system?</b>
        
        This was win64 - had issues with win32 a week or so ago on a different
        system that fixed itself at some point (perhaps dependency behavour
        seesaw?). the perl 5.8 strawberry perl release - I traced it ( as far as
        this module is concerned ) to www-mechanize version 1.60 - I get the
        impression that the real error might well be else where but a fudge here
        may help others ( sorry - love fudge only in edible form ).
        
        <b>Please provide any additional information below.</b>
        
        Hi, didn&#39;t want to be a cant so had a bit of a dig:
        
        WWW-Mechanize-1.60\t\local\back.t
        
        sorry - can&#39;t find line number, but just after:
        
        my $server404 = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
        
        the call 
        
        my $server404url = $server404-&gt;url;
        
        doesn&#39;t seem to return localhost as the hostname - it returns the name of
        the pc instead :( - which I tried to access in a web browser during the
        test and it timed out. I had a quick look at the HTTP::Deamon docs but
        couldn&#39;t end up with the port number :( so ended up with the rather nasty:
        
        my $server404 = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
        my $t = $server404-&gt;url;
        $t =~ s/http\:\/\/([a-zA-Z1-9_-]*)/http\:\/\/localhost/ ;
        my $server404url = $t; # $server404-&gt;url;
        
        which enabled test to pass, and module to install. guess you could get away
        without the brackets in the regexp, but figured you may well be aware of a
        less cludgy hack to get things working.
        
        </pre>
      reporter: steve.pi...@gmail.com
    issue: 133
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: dmake test fails ( cpan hangs ) on strawberry perl 5.8....
    url: http://code.google.com/p/www-mechanize/issues/detail?id=133
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=135
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:06:40 2011
        inner:
          - key: Labels
            value: WM
      - author: mark.sto...@gmail.com
        comment: I confirmed that this issue is still present in WWW::Mechanize 1.72.
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 09:46:07 2013
        inner: ~
    data: |+
      esert...@yahoo.de reported on Oct 11, 2009 <!-- Sun Oct 11 14:24:07 2009 -->
      
      <pre>
      In WWW::Mechanize&#39;s Makefile.PL I see some version comparisons using the
      &quot;ge&quot; operator. This will fail in some distant future:
      
      #!/usr/bin/perl -w
      $ExtUtils::MakeMaker::VERSION = &#39;10.01&#39;;
      if ( $ExtUtils::MakeMaker::VERSION ge &#39;6.45_01&#39; ) {
          warn &quot;yes&quot;;
      } else {
          warn &quot;no&quot;;
      }
      __END__
      
      Yes, I know, there are ugly warnings if comparing numerically against a
      version with underscore. To fix this, users often do &quot;eval&quot; such a version
      number:
      
      $ perl -we &#39;$x = eval &quot;6.45_01&quot;; warn $x&#39;
      6.4501 at -e line 1.
      
      Regards,
          Slaven
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 135](http://code.google.com/p/www-mechanize/issues/detail?id=135) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=135)
      
      * **Type**:      Defect
      * **Date**:      Oct 11, 2009
      * **Reporter**:  esert...@yahoo.de
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:06:40 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 09:46:07 2013 -->:
      
      <pre>
      I confirmed that this issue is still present in WWW::Mechanize 1.72.
      </pre>
      

    description:
      date:
        date: 'Oct 11, 2009'
        timestamp: Sun Oct 11 14:24:07 2009
      description: |-
        <pre>
        In WWW::Mechanize&#39;s Makefile.PL I see some version comparisons using the
        &quot;ge&quot; operator. This will fail in some distant future:
        
        #!/usr/bin/perl -w
        $ExtUtils::MakeMaker::VERSION = &#39;10.01&#39;;
        if ( $ExtUtils::MakeMaker::VERSION ge &#39;6.45_01&#39; ) {
            warn &quot;yes&quot;;
        } else {
            warn &quot;no&quot;;
        }
        __END__
        
        Yes, I know, there are ugly warnings if comparing numerically against a
        version with underscore. To fix this, users often do &quot;eval&quot; such a version
        number:
        
        $ perl -we &#39;$x = eval &quot;6.45_01&quot;; warn $x&#39;
        6.4501 at -e line 1.
        
        Regards,
            Slaven
        </pre>
      reporter: esert...@yahoo.de
    issue: 135
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Don't use "ge" for version comparison
    url: http://code.google.com/p/www-mechanize/issues/detail?id=135
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=136
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:44:47 2011
        inner:
          - key: Summary
            value: 'WM: Don&#39;t delete HTTP_PROXY for &#39;live&#39; tests'
          - key: Labels
            value: WM
    data: |+
      Wolfram....@gmail.com reported on Oct 23, 2009 <!-- Fri Oct 23 07:33:22 2009 -->
      
      <pre>
      I try to run the tests for Mech and on my 2 systems (see below). I can run 
      t/live/encoding.t but t/live/wikipedia.t hangs. The reason is &quot;use Tools&quot; 
      in wikipedia.t which deletes the HTTP_PROXY environment variable. Being 
      behind a company firewall, this blocks the test. 
      
      A more subtle proxy problem occurs in t/local/back.t which hangs AFTER the 
      last test. The problem here is that during LocalServer::DESTROY the proxy 
      is active (is Tools.pm already unloaded at this time?) so that e.g. the 
      call to &quot;http://localhost:xxxx/quit_server goes to the proxy.
      
      In general I would consider $ENV{no_proxy} = &#39;localhost&#39; a better solution 
      than deleting HTTP_PROXY from the environment. This works for me if I set 
      NO_PROXY from the command line before starting the tests. However I was 
      not able to make it effective when set from inside Tools.pm. Maybe someone 
      else has an idea how to do that.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW-Mechanize-1.60
      Platform 1: osname=MSWin32, osvers=5.1
      Plarform 2: osname=linux, osvers=2.6.18-128.el5
      
      
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 136](http://code.google.com/p/www-mechanize/issues/detail?id=136) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=136)
      
      * **Type**:      Defect
      * **Date**:      Oct 23, 2009
      * **Reporter**:  Wolfram....@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:44:47 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Don&#39;t delete HTTP_PROXY for &#39;live&#39; tests
      * Labels : `WM`

    description:
      date:
        date: 'Oct 23, 2009'
        timestamp: Fri Oct 23 07:33:22 2009
      description: |-
        <pre>
        I try to run the tests for Mech and on my 2 systems (see below). I can run 
        t/live/encoding.t but t/live/wikipedia.t hangs. The reason is &quot;use Tools&quot; 
        in wikipedia.t which deletes the HTTP_PROXY environment variable. Being 
        behind a company firewall, this blocks the test. 
        
        A more subtle proxy problem occurs in t/local/back.t which hangs AFTER the 
        last test. The problem here is that during LocalServer::DESTROY the proxy 
        is active (is Tools.pm already unloaded at this time?) so that e.g. the 
        call to &quot;http://localhost:xxxx/quit_server goes to the proxy.
        
        In general I would consider $ENV{no_proxy} = &#39;localhost&#39; a better solution 
        than deleting HTTP_PROXY from the environment. This works for me if I set 
        NO_PROXY from the command line before starting the tests. However I was 
        not able to make it effective when set from inside Tools.pm. Maybe someone 
        else has an idea how to do that.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW-Mechanize-1.60
        Platform 1: osname=MSWin32, osvers=5.1
        Plarform 2: osname=linux, osvers=2.6.18-128.el5
        
        
        
        
        </pre>
      reporter: Wolfram....@gmail.com
    issue: 136
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: Don't delete HTTP_PROXY for 'live' tests"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=136
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=137
    comments:
      - author: jidanni
        comment: s/is uses/uses/
        date: 'Nov 16, 2009'
        date_long: Mon Nov 16 16:52:24 2009
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:29:59 2010
        inner:
          - key: Summary
            value: 'WM: say proxy is on by default better'
          - key: Labels
            value: WM
      - author: rip...@woodlandschools.org
        comment: |-
          Another potential enhancement for this bit of documentation...  it goes on to say
          
          "This needs to be explicitly turned off if you're using Crypt::SSLeay to access a https site via a proxy server. Note: you still need to set your HTTPS_PROXY environment variable as appropriate."
          
          Maybe it's just me, but I think of 0 as "off", yet for https you need noproxy => 1. So maybe...
          
          "This needs to be explicitly turned off (noproxy => 1) if you're using Crypt::SSLeay to access a https site via a proxy server. Note: you still need to set your HTTPS_PROXY environment variable as appropriate."
        date: 'Mar 13, 2012'
        date_long: Tue Mar 13 11:31:38 2012
        inner: ~
    data: |+
      jidanni reported on Nov 16, 2009 <!-- Mon Nov 16 16:51:51 2009 -->
      
      <pre>
      On the man page it says
             o   &quot;noproxy =&gt; [0|1]&quot;
                 Turn off the automatic call to the LWP::UserAgent &quot;env_proxy&quot;
      function.
      
      OK, but also mention that this means if there is a http_proxy environment
      variable, it will be used by default.
      
      I.e., Mechanize is uses a proxy by default.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 137](http://code.google.com/p/www-mechanize/issues/detail?id=137) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=137)
      
      * **Type**:      Defect
      * **Date**:      Nov 16, 2009
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **jidanni** commented on Nov 16, 2009 <!-- Mon Nov 16 16:52:24 2009 -->:
      
      <pre>
      s/is uses/uses/
      </pre>
      
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:29:59 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: say proxy is on by default better
      * Labels : `WM`
      
      **rip...@woodlandschools.org** commented on Mar 13, 2012 <!-- Tue Mar 13 11:31:38 2012 -->:
      
      <pre>
      Another potential enhancement for this bit of documentation...  it goes on to say
      
      "This needs to be explicitly turned off if you're using Crypt::SSLeay to access a https site via a proxy server. Note: you still need to set your HTTPS_PROXY environment variable as appropriate."
      
      Maybe it's just me, but I think of 0 as "off", yet for https you need noproxy => 1. So maybe...
      
      "This needs to be explicitly turned off (noproxy => 1) if you're using Crypt::SSLeay to access a https site via a proxy server. Note: you still need to set your HTTPS_PROXY environment variable as appropriate."
      </pre>
      

    description:
      date:
        date: 'Nov 16, 2009'
        timestamp: Mon Nov 16 16:51:51 2009
      description: |-
        <pre>
        On the man page it says
               o   &quot;noproxy =&gt; [0|1]&quot;
                   Turn off the automatic call to the LWP::UserAgent &quot;env_proxy&quot;
        function.
        
        OK, but also mention that this means if there is a http_proxy environment
        variable, it will be used by default.
        
        I.e., Mechanize is uses a proxy by default.
        </pre>
      reporter: jidanni
    issue: 137
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: say proxy is on by default better'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=137
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=138
    comments:
      - author: oscar...@gmail.com
        comment: |-
          Please consider fixing this.
          
          Also $m->proxy(...) should carry into clones (as well as $m->env_proxy()).
        date: 'May 19, 2010'
        date_long: Wed May 19 00:40:19 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:05:08 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      Dr.Marti...@gmail.com reported on Nov 17, 2009 <!-- Tue Nov 17 03:59:35 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. set http_proxy in environment and export
      2. $mech=WWW::Mechanize-&gt;new;
      3. $mech-&gt;get(&quot;http://www.example.org&quot;); # Get the page via proxy
      4. $mechclone = $mech-&gt;clone;
      5. $mechclone-&gt;get(&quot;http://www.example.org&quot;); # proxy not used anymore
      
      <b>What is the expected output? What do you see instead?</b>
      Expect $mechclone to honor the proxy.
      $mechclone does not use proxy.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      1.60
      
      <b>Please provide any additional information below.</b>
      
      Can fixed by adding 
       $self-&gt;env_proxy() unless $self-&gt;{noproxy};
      in clone subroutine after 
       $clone-&gt;cookie_jar( $self-&gt;cookie_jar );
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 138](http://code.google.com/p/www-mechanize/issues/detail?id=138) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=138)
      
      * **Type**:      Defect
      * **Date**:      Nov 17, 2009
      * **Reporter**:  Dr.Marti...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **oscar...@gmail.com** commented on May 19, 2010 <!-- Wed May 19 00:40:19 2010 -->:
      
      <pre>
      Please consider fixing this.
      
      Also $m->proxy(...) should carry into clones (as well as $m->env_proxy()).
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:05:08 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 17, 2009'
        timestamp: Tue Nov 17 03:59:35 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. set http_proxy in environment and export
        2. $mech=WWW::Mechanize-&gt;new;
        3. $mech-&gt;get(&quot;http://www.example.org&quot;); # Get the page via proxy
        4. $mechclone = $mech-&gt;clone;
        5. $mechclone-&gt;get(&quot;http://www.example.org&quot;); # proxy not used anymore
        
        <b>What is the expected output? What do you see instead?</b>
        Expect $mechclone to honor the proxy.
        $mechclone does not use proxy.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        1.60
        
        <b>Please provide any additional information below.</b>
        
        Can fixed by adding 
         $self-&gt;env_proxy() unless $self-&gt;{noproxy};
        in clone subroutine after 
         $clone-&gt;cookie_jar( $self-&gt;cookie_jar );
        
        
        </pre>
      reporter: Dr.Marti...@gmail.com
    issue: 138
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: No automatic use of env_proxy after cloning
    url: http://code.google.com/p/www-mechanize/issues/detail?id=138
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=139
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 12, 2010'
        date_long: Mon Apr 12 22:59:33 2010
        inner:
          - key: Summary
            value: 'WM: Test hangs forever'
          - key: Labels
            value: WM
    data: |+
      andreas....@gmail.com reported on Nov 22, 2009 <!-- Sun Nov 22 03:09:14 2009 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. make test
      
      <b>What is the expected output? What do you see instead?</b>
      Expected: All tests ok after a reasonable time
      See instead:
       t/link-relative.t ........ ok
       t/link.t ................. ok
       t/live/encoding.t ........ ok
       t/live/wikipedia.t ....... ok
       # Started http://localhost:35101/
      
      and after this I can wait for hours and nothing happens.
      
      <b>What version of the product are you using? On what operating system?</b>
      % /usr/local/perl-5.10.1-uld/bin/perl -V         
      Summary of my perl5 (<a href="/web/20130510040713/p/www-mechanize/source/detail?r=5">revision 5</a> version 10 subversion 1) configuration:
         
        Platform:
          osname=linux, osvers=2.6.30-1-amd64, archname=x86_64-linux-ld
          uname=&#39;linux k81 2.6.30-1-amd64 #1 smp sat aug 15 18:09:19 utc 2009
      x86_64 gnulinux &#39;
          config_args=&#39;-Dprefix=/usr/local/perl-5.10.1-uld -Dinstallusrbinperl=n
      -Uversiononly -Dusedevel -des -Ui_db -Duselongdouble&#39;
          hint=recommended, useposix=true, d_sigaction=define
          useithreads=undef, usemultiplicity=undef
          useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
          use64bitint=define, use64bitall=define, uselongdouble=define
          usemymalloc=n, bincompat5005=undef
        Compiler:
          cc=&#39;cc&#39;, ccflags =&#39;-fno-strict-aliasing -pipe -fstack-protector
      -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&#39;,
          optimize=&#39;-O2&#39;,
          cppflags=&#39;-fno-strict-aliasing -pipe -fstack-protector
      -I/usr/local/include&#39;
          ccversion=&#39;&#39;, gccversion=&#39;4.3.4&#39;, gccosandvers=&#39;&#39;
          intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678
          d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16
          ivtype=&#39;long&#39;, ivsize=8, nvtype=&#39;long double&#39;, nvsize=16,
      Off_t=&#39;off_t&#39;, lseeksize=8
          alignbytes=16, prototype=define
        Linker and Libraries:
          ld=&#39;cc&#39;, ldflags =&#39; -fstack-protector -L/usr/local/lib&#39;
          libpth=/usr/local/lib /lib /usr/lib /lib64 /usr/lib64
          libs=-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc -lgdbm_compat
          perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc
          libc=/lib/libc-2.9.so, so=so, useshrplib=false, libperl=libperl.a
          gnulibc_version=&#39;2.9&#39;
        Dynamic Linking:
          dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=&#39;-Wl,-E&#39;
          cccdlflags=&#39;-fPIC&#39;, lddlflags=&#39;-shared -O2 -L/usr/local/lib
      -fstack-protector&#39;
      
      
      Characteristics of this binary (from libperl): 
        Compile-time options: PERL_DONT_CREATE_GVSV PERL_MALLOC_WRAP PERL_USE_DEVEL
                              USE_64_BIT_ALL USE_64_BIT_INT USE_LARGE_FILES
                              USE_LONG_DOUBLE USE_PERLIO
        Built under linux
        Compiled at Sep 10 2009 08:12:49
        @INC:
          /usr/local/perl-5.10.1-uld/lib/5.10.1/x86_64-linux-ld
          /usr/local/perl-5.10.1-uld/lib/5.10.1
          /usr/local/perl-5.10.1-uld/lib/site_perl/5.10.1/x86_64-linux-ld
          /usr/local/perl-5.10.1-uld/lib/site_perl/5.10.1
          .
      
      
      <b>Please provide any additional information below.</b>
      
      There should be an OK or a FAIL or i would not mind an UNKNOWN as long as
      the test finishes. Hanging tests are a problem for automated testing. You
      usually will never get the test results because somebody has to kill the
      processes hanging.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 139](http://code.google.com/p/www-mechanize/issues/detail?id=139) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=139)
      
      * **Type**:      Defect
      * **Date**:      Nov 22, 2009
      * **Reporter**:  andreas....@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 12, 2010 <!-- Mon Apr 12 22:59:33 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: Test hangs forever
      * Labels : `WM`

    description:
      date:
        date: 'Nov 22, 2009'
        timestamp: Sun Nov 22 03:09:14 2009
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. make test
        
        <b>What is the expected output? What do you see instead?</b>
        Expected: All tests ok after a reasonable time
        See instead:
         t/link-relative.t ........ ok
         t/link.t ................. ok
         t/live/encoding.t ........ ok
         t/live/wikipedia.t ....... ok
         # Started http://localhost:35101/
        
        and after this I can wait for hours and nothing happens.
        
        <b>What version of the product are you using? On what operating system?</b>
        % /usr/local/perl-5.10.1-uld/bin/perl -V         
        Summary of my perl5 (<a href="/web/20130510040713/p/www-mechanize/source/detail?r=5">revision 5</a> version 10 subversion 1) configuration:
           
          Platform:
            osname=linux, osvers=2.6.30-1-amd64, archname=x86_64-linux-ld
            uname=&#39;linux k81 2.6.30-1-amd64 #1 smp sat aug 15 18:09:19 utc 2009
        x86_64 gnulinux &#39;
            config_args=&#39;-Dprefix=/usr/local/perl-5.10.1-uld -Dinstallusrbinperl=n
        -Uversiononly -Dusedevel -des -Ui_db -Duselongdouble&#39;
            hint=recommended, useposix=true, d_sigaction=define
            useithreads=undef, usemultiplicity=undef
            useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
            use64bitint=define, use64bitall=define, uselongdouble=define
            usemymalloc=n, bincompat5005=undef
          Compiler:
            cc=&#39;cc&#39;, ccflags =&#39;-fno-strict-aliasing -pipe -fstack-protector
        -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&#39;,
            optimize=&#39;-O2&#39;,
            cppflags=&#39;-fno-strict-aliasing -pipe -fstack-protector
        -I/usr/local/include&#39;
            ccversion=&#39;&#39;, gccversion=&#39;4.3.4&#39;, gccosandvers=&#39;&#39;
            intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678
            d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16
            ivtype=&#39;long&#39;, ivsize=8, nvtype=&#39;long double&#39;, nvsize=16,
        Off_t=&#39;off_t&#39;, lseeksize=8
            alignbytes=16, prototype=define
          Linker and Libraries:
            ld=&#39;cc&#39;, ldflags =&#39; -fstack-protector -L/usr/local/lib&#39;
            libpth=/usr/local/lib /lib /usr/lib /lib64 /usr/lib64
            libs=-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc -lgdbm_compat
            perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc
            libc=/lib/libc-2.9.so, so=so, useshrplib=false, libperl=libperl.a
            gnulibc_version=&#39;2.9&#39;
          Dynamic Linking:
            dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=&#39;-Wl,-E&#39;
            cccdlflags=&#39;-fPIC&#39;, lddlflags=&#39;-shared -O2 -L/usr/local/lib
        -fstack-protector&#39;
        
        
        Characteristics of this binary (from libperl): 
          Compile-time options: PERL_DONT_CREATE_GVSV PERL_MALLOC_WRAP PERL_USE_DEVEL
                                USE_64_BIT_ALL USE_64_BIT_INT USE_LARGE_FILES
                                USE_LONG_DOUBLE USE_PERLIO
          Built under linux
          Compiled at Sep 10 2009 08:12:49
          @INC:
            /usr/local/perl-5.10.1-uld/lib/5.10.1/x86_64-linux-ld
            /usr/local/perl-5.10.1-uld/lib/5.10.1
            /usr/local/perl-5.10.1-uld/lib/site_perl/5.10.1/x86_64-linux-ld
            /usr/local/perl-5.10.1-uld/lib/site_perl/5.10.1
            .
        
        
        <b>Please provide any additional information below.</b>
        
        There should be an OK or a FAIL or i would not mind an UNKNOWN as long as
        the test finishes. Hanging tests are a problem for automated testing. You
        usually will never get the test results because somebody has to kill the
        processes hanging.
        </pre>
      reporter: andreas....@gmail.com
    issue: 139
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: Test hangs forever'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=139
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=144
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 11, 2010'
        date_long: Thu Mar 11 12:05:08 2010
        inner:
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:32:24 2010
        inner:
          - key: Summary
            value: 'WM: path confusion with mod_gzip'
    data: |+
      nathanie...@gmail.com reported on Jan 22, 2010 <!-- Fri Jan 22 07:47:57 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. POST to a relative URL form action with mod_gzip enable, get a 404
      2. Do the same with Accept-Encoding:identity instead of gzip and don&#39;t get 
      a 404.
       
      Apache 404s as it received a request for /dir1/file instead of 
      /dir1/dir2/file after Mechanize submits to the action &#39;../../file&#39;.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.60, FreeBSD 6.3
      
      It&#39;s hard to fully reproduce outside of our development environment, so 
      what I&#39;ve listed may be tangential symptoms.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 144](http://code.google.com/p/www-mechanize/issues/detail?id=144) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=144)
      
      * **Type**:      Defect
      * **Date**:      Jan 22, 2010
      * **Reporter**:  nathanie...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Mar 11, 2010 <!-- Thu Mar 11 12:05:08 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:32:24 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: path confusion with mod_gzip

    description:
      date:
        date: 'Jan 22, 2010'
        timestamp: Fri Jan 22 07:47:57 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. POST to a relative URL form action with mod_gzip enable, get a 404
        2. Do the same with Accept-Encoding:identity instead of gzip and don&#39;t get 
        a 404.
         
        Apache 404s as it received a request for /dir1/file instead of 
        /dir1/dir2/file after Mechanize submits to the action &#39;../../file&#39;.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.60, FreeBSD 6.3
        
        It&#39;s hard to fully reproduce outside of our development environment, so 
        what I&#39;ve listed may be tangential symptoms.
        
        </pre>
      reporter: nathanie...@gmail.com
    issue: 144
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: path confusion with mod_gzip'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=144
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=148
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Mar 11, 2010'
        date_long: Thu Mar 11 12:04:43 2010
        inner:
          - key: Labels
            value: WM
    data: |+
      77kvan...@gmail.com reported on Feb 21, 2010 <!-- Sun Feb 21 11:15:57 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. had www::mechanize version 1.34 installed
      2. upgraded to version 1.60
      
      
      <b>What is the expected output? What do you see instead?</b>
      The behavior before.
      mechanized worked with greek language. It selected the right options in 
      select fields and submited them corect. Fields fild in greek was 
      transmited corect to the server.
      
      Now it doesn&#39;t recognize the select fileds. Have to work with the values 
      of the select field. Fields fild with greek are transmited in &quot;greek&quot; ie 
      lot of strange characters &quot;&lt;&amp;?AA. A&quot; etc.
      
      <b>What version of the product are you using? On what operating system?</b>
      activeperl with mechanize version 1.60 on windows vista.
      
      <b>Please provide any additional information below.</b>
      It seams that UTF8 encoding is broken. Propably in a depending module of 
      mechanize. I come to this conclusion becouse I uninstaled v1.60 and whent 
      back to 1.34. But still the same problem. In an other computer with an old 
      instalation of activeperl with mechanize version 1.34 it still works. 
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 148](http://code.google.com/p/www-mechanize/issues/detail?id=148) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=148)
      
      * **Type**:      Defect
      * **Date**:      Feb 21, 2010
      * **Reporter**:  77kvan...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Mar 11, 2010 <!-- Thu Mar 11 12:04:43 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Feb 21, 2010'
        timestamp: Sun Feb 21 11:15:57 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. had www::mechanize version 1.34 installed
        2. upgraded to version 1.60
        
        
        <b>What is the expected output? What do you see instead?</b>
        The behavior before.
        mechanized worked with greek language. It selected the right options in 
        select fields and submited them corect. Fields fild in greek was 
        transmited corect to the server.
        
        Now it doesn&#39;t recognize the select fileds. Have to work with the values 
        of the select field. Fields fild with greek are transmited in &quot;greek&quot; ie 
        lot of strange characters &quot;&lt;&amp;?AA. A&quot; etc.
        
        <b>What version of the product are you using? On what operating system?</b>
        activeperl with mechanize version 1.60 on windows vista.
        
        <b>Please provide any additional information below.</b>
        It seams that UTF8 encoding is broken. Propably in a depending module of 
        mechanize. I come to this conclusion becouse I uninstaled v1.60 and whent 
        back to 1.34. But still the same problem. In an other computer with an old 
        instalation of activeperl with mechanize version 1.34 it still works. 
        
        </pre>
      reporter: 77kvan...@gmail.com
    issue: 148
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: greek language suport
    url: http://code.google.com/p/www-mechanize/issues/detail?id=148
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=153
    comments:
      - author: todd.bru...@gmail.com
        comment: 'See Issue 154... Same issue, I believe'
        date: 'Mar 18, 2010'
        date_long: Thu Mar 18 08:42:39 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:28:37 2010
        inner:
          - key: Summary
            value: 'WM: t/live/wikipedia.t test hangs indefinetely'
          - key: Labels
            value: WM
      - author: marc...@gmail.com
        comment: |-
          I confirm that adding either $ENV{HTTP_PROXY} or $ENV{http_proxy} to t/live/wikipedia.t solves the issue. Of course, don't forget to also set NO_PROXY='localhost, ...'.
          
          Cheers,
          
            ^m'e
        date: 'Feb 21, 2011'
        date_long: Mon Feb 21 04:56:16 2011
        inner: ~
      - author: mark.sto...@gmail.com
        comment: |-
          So the proposed fix is to simply out add a timeout value to this test and possibly other live tests? It would still fail, but would avoid the pain of indefinite timeout. 
          
          Seems like a patch like that would be welcome.
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 10:02:29 2013
        inner: ~
    data: |+
      todd.bru...@gmail.com reported on Mar 17, 2010 <!-- Wed Mar 17 16:35:09 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. on system behind a proxy (must use proxy to access internet, 
      http_proxy environment variable is correctly set.)
      2. perl Makefile.PL
      3. make
      4. make test
      
      
      
      <b>What is the expected output? What do you see instead?</b>
      
      t/live/wikipedia.t ....... 1/15 Error GETing <a href="http://en.wikipedia.org/" rel="nofollow">http://en.wikipedia.org/</a>: Can&#39;t 
      connect to en.wikipedia.org:80 (connect: timeout) at t/live/wikipedia.t line 
      26
      # Looks like you planned 15 tests but ran 2.
      # Looks like your test exited with 110 just after 2.
      t/live/wikipedia.t ....... Dubious, test returned 110 (wstat 28160, 0x6e00)
      Failed 13/15 subtests  
      
      
      <b>What version of the product are you using? On what operating system?</b>
      WWW::Mechanize 1.60 via CPAN
      Redhat Enterprise Linux 5
      
      
      <b>Please provide any additional information below.</b>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 153](http://code.google.com/p/www-mechanize/issues/detail?id=153) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=153)
      
      * **Type**:      Defect
      * **Date**:      Mar 17, 2010
      * **Reporter**:  todd.bru...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **todd.bru...@gmail.com** commented on Mar 18, 2010 <!-- Thu Mar 18 08:42:39 2010 -->:
      
      <pre>
      See Issue 154... Same issue, I believe
      </pre>
      
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:28:37 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: t/live/wikipedia.t test hangs indefinetely
      * Labels : `WM`
      
      **marc...@gmail.com** commented on Feb 21, 2011 <!-- Mon Feb 21 04:56:16 2011 -->:
      
      <pre>
      I confirm that adding either $ENV{HTTP_PROXY} or $ENV{http_proxy} to t/live/wikipedia.t solves the issue. Of course, don't forget to also set NO_PROXY='localhost, ...'.
      
      Cheers,
      
        ^m'e
      </pre>
      
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 10:02:29 2013 -->:
      
      <pre>
      So the proposed fix is to simply out add a timeout value to this test and possibly other live tests? It would still fail, but would avoid the pain of indefinite timeout. 
      
      Seems like a patch like that would be welcome.
      </pre>
      

    description:
      date:
        date: 'Mar 17, 2010'
        timestamp: Wed Mar 17 16:35:09 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. on system behind a proxy (must use proxy to access internet, 
        http_proxy environment variable is correctly set.)
        2. perl Makefile.PL
        3. make
        4. make test
        
        
        
        <b>What is the expected output? What do you see instead?</b>
        
        t/live/wikipedia.t ....... 1/15 Error GETing <a href="http://en.wikipedia.org/" rel="nofollow">http://en.wikipedia.org/</a>: Can&#39;t 
        connect to en.wikipedia.org:80 (connect: timeout) at t/live/wikipedia.t line 
        26
        # Looks like you planned 15 tests but ran 2.
        # Looks like your test exited with 110 just after 2.
        t/live/wikipedia.t ....... Dubious, test returned 110 (wstat 28160, 0x6e00)
        Failed 13/15 subtests  
        
        
        <b>What version of the product are you using? On what operating system?</b>
        WWW::Mechanize 1.60 via CPAN
        Redhat Enterprise Linux 5
        
        
        <b>Please provide any additional information below.</b>
        
        
        </pre>
      reporter: todd.bru...@gmail.com
    issue: 153
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: t/live/wikipedia.t test hangs indefinetely'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=153
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=154
    comments:
      - author: kiwi...@gmail.com
        comment: "suggest including $ENV{'http_proxy'} = ''; in the BEGIN block of the tests in the t/local directory as localhost tests should not need a proxy server.  The tests I altered while waiting for the click_button.t passed once changed"
        date: 'Jun 26, 2010'
        date_long: Sat Jun 26 16:08:01 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 11:14:16 2011
        inner:
          - key: Labels
            value: WM
      - author: jas...@alumni.cmu.edu
        comment: |-
          no_proxy may provide a workaround:
          
          http://stevemoss.posterous.com/installing-wwwmechanize-and-testwwwmechanize
          
          I set mine to:
            'no_proxy' => q[localhost, 127.0.0.1, 149.171.0.0/16, 129.94.0.0/16, 
                            blahblablah.xx-nonexistent.foo, 
                            wango.nonexistent.xx-only-testing ],
        date: 'Feb 12, 2012'
        date_long: Sun Feb 12 19:47:10 2012
        inner: ~
    data: |+
      todd.bru...@gmail.com reported on Mar 18, 2010 <!-- Thu Mar 18 08:41:39 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. perl -I ./lib t/local/click.t
      2. (System is behind a web proxy with the http_proxy env var set.)
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      The output is:
      
      1..9
      ok 1 - use WWW::Mechanize;
      ok 2 - Created the object isa WWW::Mechanize
      # Started http://localhost:56135/
      ok 3 - The object isa LocalServer
      ok 4 - Got back a response isa HTTP::Response
      ok 5 - Got URL
      ok 6 - Local page is HTML
      ok 7 - Got back a response isa HTTP::Response
      ok 8 - Can click &#39;Go&#39; (&#39;Google Search&#39; button)
      ok 9 - Filled field correctly
      
      However, the program never terminates.  Seems related to the problems 
      with t/local/back.t and proxy handling.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.60
      Linux RedHat EL5
      
      <b>Please provide any additional information below.</b>
      Appears that server never shuts down... In fact, a ps -ef shows that the 
      process /usr/bin/perl /foo/.cpan/build/WWW-Mechanize-1.60-
      VAQjnC/t/local/log-server /tmp/nbPrL9N0eB continues to run.  Manualling 
      killing that process allows click.t to finish.
      
      similar problems in click_button.t, failure.t, follow.t, form.t, get.t, 
      page_stack.t, reload.t, submit.t, 
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 154](http://code.google.com/p/www-mechanize/issues/detail?id=154) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=154)
      
      * **Type**:      Defect
      * **Date**:      Mar 18, 2010
      * **Reporter**:  todd.bru...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **kiwi...@gmail.com** commented on Jun 26, 2010 <!-- Sat Jun 26 16:08:01 2010 -->:
      
      <pre>
      suggest including $ENV{'http_proxy'} = ''; in the BEGIN block of the tests in the t/local directory as localhost tests should not need a proxy server.  The tests I altered while waiting for the click_button.t passed once changed
      </pre>
      
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 11:14:16 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **jas...@alumni.cmu.edu** commented on Feb 12, 2012 <!-- Sun Feb 12 19:47:10 2012 -->:
      
      <pre>
      no_proxy may provide a workaround:
      
      http://stevemoss.posterous.com/installing-wwwmechanize-and-testwwwmechanize
      
      I set mine to:
        'no_proxy' => q[localhost, 127.0.0.1, 149.171.0.0/16, 129.94.0.0/16, 
                        blahblablah.xx-nonexistent.foo, 
                        wango.nonexistent.xx-only-testing ],
      </pre>
      

    description:
      date:
        date: 'Mar 18, 2010'
        timestamp: Thu Mar 18 08:41:39 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. perl -I ./lib t/local/click.t
        2. (System is behind a web proxy with the http_proxy env var set.)
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        The output is:
        
        1..9
        ok 1 - use WWW::Mechanize;
        ok 2 - Created the object isa WWW::Mechanize
        # Started http://localhost:56135/
        ok 3 - The object isa LocalServer
        ok 4 - Got back a response isa HTTP::Response
        ok 5 - Got URL
        ok 6 - Local page is HTML
        ok 7 - Got back a response isa HTTP::Response
        ok 8 - Can click &#39;Go&#39; (&#39;Google Search&#39; button)
        ok 9 - Filled field correctly
        
        However, the program never terminates.  Seems related to the problems 
        with t/local/back.t and proxy handling.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.60
        Linux RedHat EL5
        
        <b>Please provide any additional information below.</b>
        Appears that server never shuts down... In fact, a ps -ef shows that the 
        process /usr/bin/perl /foo/.cpan/build/WWW-Mechanize-1.60-
        VAQjnC/t/local/log-server /tmp/nbPrL9N0eB continues to run.  Manualling 
        killing that process allows click.t to finish.
        
        similar problems in click_button.t, failure.t, follow.t, form.t, get.t, 
        page_stack.t, reload.t, submit.t, 
        </pre>
      reporter: todd.bru...@gmail.com
    issue: 154
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: t/local/click.t test hangs indefinetly
    url: http://code.google.com/p/www-mechanize/issues/detail?id=154
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=162
    comments:
      - author: proofri...@gmail.com
        comment: |-
          I got WWW::Mechanize to recognize "application/xhtml+xml" as HTML by changing line
          563 of Mechanize.pm to
          
          sub is_html {       my $self = shift; return defined $self->ct && ($self->ct eq
          'text/html' || $self->ct eq 'application/xhtml+xml'); }
        date: 'May 17, 2010'
        date_long: Mon May 17 20:10:01 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:09:53 2011
        inner:
          - key: Labels
            value: WM
      - author: bigpresh@gmail.com
        comment: "For what it's worth, I just hit this bug again on a different box with the latest WWW::Mechanize installed (1.68)."
        date: 'May 10, 2011'
        date_long: Tue May 10 10:28:23 2011
        inner: ~
      - author: bigpresh@gmail.com
        comment: "I've opened a pull request on GitHub with a fix: https://github.com/bestpractical/www-mechanize/pull/2"
        date: 'May 10, 2011'
        date_long: Tue May 10 10:40:35 2011
        inner: ~
    data: |+
      bigpresh@gmail.com reported on Apr 20, 2010 <!-- Tue Apr 20 02:36:40 2010 -->
      
      <pre>
      I&#39;m using WWW::Mechanize to talk to <a href="http://web.archive.org/web/20130510064357/https://m.facebook.com/" rel="nofollow">https://m.facebook.com/</a>
      
      When I get back a page, the content type is application/xhtml+xml.
      
      WWW::Mechanize::is_html only recognises text/html as being HTML, so I
      cannot call $mech-&gt;title().
      
      A brief test case to reproduce this:
      
      [davidp@supernova:~/dev/scripts/perl/facebook]$ cat testcase.pl 
      #!/usr/bin/perl
      use strict;
      use WWW::Mechanize;
      my $mech = WWW::Mechanize-&gt;new;
      $mech-&gt;get(&#39;<a href="http://web.archive.org/web/20130510064357/https://m.facebook.com/&#39;);" rel="nofollow">https://m.facebook.com/&#39;);</a>
      warn &quot;Content-type: &quot; . $mech-&gt;ct;
      warn &quot;Page title: &quot; . $mech-&gt;title;
      $mech-&gt;content =~ m{&lt;title&gt;(.+)&lt;/title&gt;}
          and warn &quot;Page title really $1&quot;;
      
      
      And the output:
      
      [davidp@supernova:~/dev/scripts/perl/facebook]$ perl testcase.pl 
      Content-type: application/xhtml+xml at testcase.pl line 9.
      Page title:  at testcase.pl line 10.
      Page title really Welcome to Facebook | Facebook at testcase.pl line 12.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 162](http://code.google.com/p/www-mechanize/issues/detail?id=162) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=162)
      
      * **Type**:      Defect
      * **Date**:      Apr 20, 2010
      * **Reporter**:  bigpresh@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **proofri...@gmail.com** commented on May 17, 2010 <!-- Mon May 17 20:10:01 2010 -->:
      
      <pre>
      I got WWW::Mechanize to recognize "application/xhtml+xml" as HTML by changing line
      563 of Mechanize.pm to
      
      sub is_html {       my $self = shift; return defined $self->ct && ($self->ct eq
      'text/html' || $self->ct eq 'application/xhtml+xml'); }
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:09:53 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **bigpresh@gmail.com** commented on May 10, 2011 <!-- Tue May 10 10:28:23 2011 -->:
      
      <pre>
      For what it's worth, I just hit this bug again on a different box with the latest WWW::Mechanize installed (1.68).
      </pre>
      
      
      **bigpresh@gmail.com** commented on May 10, 2011 <!-- Tue May 10 10:40:35 2011 -->:
      
      <pre>
      I've opened a pull request on GitHub with a fix: https://github.com/bestpractical/www-mechanize/pull/2
      </pre>
      

    description:
      date:
        date: 'Apr 20, 2010'
        timestamp: Tue Apr 20 02:36:40 2010
      description: |-
        <pre>
        I&#39;m using WWW::Mechanize to talk to <a href="http://web.archive.org/web/20130510064357/https://m.facebook.com/" rel="nofollow">https://m.facebook.com/</a>
        
        When I get back a page, the content type is application/xhtml+xml.
        
        WWW::Mechanize::is_html only recognises text/html as being HTML, so I
        cannot call $mech-&gt;title().
        
        A brief test case to reproduce this:
        
        [davidp@supernova:~/dev/scripts/perl/facebook]$ cat testcase.pl 
        #!/usr/bin/perl
        use strict;
        use WWW::Mechanize;
        my $mech = WWW::Mechanize-&gt;new;
        $mech-&gt;get(&#39;<a href="http://web.archive.org/web/20130510064357/https://m.facebook.com/&#39;);" rel="nofollow">https://m.facebook.com/&#39;);</a>
        warn &quot;Content-type: &quot; . $mech-&gt;ct;
        warn &quot;Page title: &quot; . $mech-&gt;title;
        $mech-&gt;content =~ m{&lt;title&gt;(.+)&lt;/title&gt;}
            and warn &quot;Page title really $1&quot;;
        
        
        And the output:
        
        [davidp@supernova:~/dev/scripts/perl/facebook]$ perl testcase.pl 
        Content-type: application/xhtml+xml at testcase.pl line 9.
        Page title:  at testcase.pl line 10.
        Page title really Welcome to Facebook | Facebook at testcase.pl line 12.
        </pre>
      reporter: bigpresh@gmail.com
    issue: 162
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Content type application/xhtml+xml should be recognised as HTML?
    url: http://code.google.com/p/www-mechanize/issues/detail?id=162
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=163
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:09:21 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      batman...@gmail.com reported on Apr 21, 2010 <!-- Wed Apr 21 16:34:14 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. my $u = $mech-&gt;find_link(...)
      2. $mech-&gt;get(&quot;&lt;Another URL with a different base&gt;&quot;)
      3. $mech-&gt;get($u); # Here it calls the wrong URL as the base name has changed
      
      <b>What is the expected output? What do you see instead?</b>
      I would expect #3 above to get the absolute URL of the URL I found before.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.62 arch linux.
      
      <b>Please provide any additional information below.</b>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 163](http://code.google.com/p/www-mechanize/issues/detail?id=163) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=163)
      
      * **Type**:      Defect
      * **Date**:      Apr 21, 2010
      * **Reporter**:  batman...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:09:21 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Apr 21, 2010'
        timestamp: Wed Apr 21 16:34:14 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. my $u = $mech-&gt;find_link(...)
        2. $mech-&gt;get(&quot;&lt;Another URL with a different base&gt;&quot;)
        3. $mech-&gt;get($u); # Here it calls the wrong URL as the base name has changed
        
        <b>What is the expected output? What do you see instead?</b>
        I would expect #3 above to get the absolute URL of the URL I found before.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.62 arch linux.
        
        <b>Please provide any additional information below.</b>
        
        
        </pre>
      reporter: batman...@gmail.com
    issue: 163
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: get should use url_abs
    url: http://code.google.com/p/www-mechanize/issues/detail?id=163
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=165
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:09:36 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      Shimon.Z...@gmail.com reported on May 14, 2010 <!-- Fri May 14 05:14:34 2010 -->
      
      <pre>
      First of all greate job on this module, it is amazingly useful.
      
      While trying to create a callback on the post() of lwp::useragent, i got 
      thinking why not do it on you mech.
      In your code you overloaded the method request that would have used a 
      callback &quot;:content_cb&quot; which i was intending to use to create a progress 
      bar as i use submit_form to upload files.
      
      now that you overloaded the method of lwp::useragent-&gt;request()
      i am unable to use it.
      it is quite important to me as i upload big files and would like to know 
      about their upload progress.
      
      may i ask you to place an option for using this callback instead of just 
      overloading request() ?
      
      thank you!
      again greate job.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 165](http://code.google.com/p/www-mechanize/issues/detail?id=165) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=165)
      
      * **Type**:      Defect
      * **Date**:      May 14, 2010
      * **Reporter**:  Shimon.Z...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:09:36 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'May 14, 2010'
        timestamp: Fri May 14 05:14:34 2010
      description: |-
        <pre>
        First of all greate job on this module, it is amazingly useful.
        
        While trying to create a callback on the post() of lwp::useragent, i got 
        thinking why not do it on you mech.
        In your code you overloaded the method request that would have used a 
        callback &quot;:content_cb&quot; which i was intending to use to create a progress 
        bar as i use submit_form to upload files.
        
        now that you overloaded the method of lwp::useragent-&gt;request()
        i am unable to use it.
        it is quite important to me as i upload big files and would like to know 
        about their upload progress.
        
        may i ask you to place an option for using this callback instead of just 
        overloading request() ?
        
        thank you!
        again greate job.
        </pre>
      reporter: Shimon.Z...@gmail.com
    issue: 165
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Overloaded method request of LWP::UserAgent
    url: http://code.google.com/p/www-mechanize/issues/detail?id=165
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=168
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 09:28:10 2010
        inner:
          - key: Summary
            value: 'WM: &#39;Link not found&#39; message could be more informative'
          - key: Labels
            value: WM
    data: |+
      ed.at.me...@gmail.com reported on May 18, 2010 <!-- Tue May 18 02:02:43 2010 -->
      
      <pre>
      When you call $mech-&gt;follow_link(&#39;X&#39;) but the page does not contain a link
      with text X, then Mech reports the error
      
          Link not found
      
      It would be better to report something like
      
          Link with text &#39;X&#39; not found in page http://whatever
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 168](http://code.google.com/p/www-mechanize/issues/detail?id=168) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=168)
      
      * **Type**:      Defect
      * **Date**:      May 18, 2010
      * **Reporter**:  ed.at.me...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 09:28:10 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: &#39;Link not found&#39; message could be more informative
      * Labels : `WM`

    description:
      date:
        date: 'May 18, 2010'
        timestamp: Tue May 18 02:02:43 2010
      description: |-
        <pre>
        When you call $mech-&gt;follow_link(&#39;X&#39;) but the page does not contain a link
        with text X, then Mech reports the error
        
            Link not found
        
        It would be better to report something like
        
            Link with text &#39;X&#39; not found in page http://whatever
        
        </pre>
      reporter: ed.at.me...@gmail.com
    issue: 168
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: 'Link not found' message could be more informative"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=168
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=171
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 13:02:58 2010
        inner:
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: 'This probably applies to all fields, not just checkboxes.'
        date: 'Jun 9, 2010'
        date_long: Wed Jun  9 13:04:14 2010
        inner: ~
      - author: mark.sto...@gmail.com
        comment: |-
          Andy, I believe this is a duplicate of #83: 
          https://code.google.com/p/www-mechanize/issues/detail?id=83
          
          I propose merging the issues.
        date: 'Feb 1, 2013'
        date_long: Fri Feb  1 08:51:40 2013
        inner: ~
    data: |+
      petda...@gmail.com reported on Jun 9, 2010 <!-- Wed Jun  9 13:02:46 2010 -->
      
      <pre>
      If you hit back on a browser and go to the form you were on, the checkboxes go back to the way they were.  Mech does not do that.  You get fresh checkboxes.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 171](http://code.google.com/p/www-mechanize/issues/detail?id=171) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=171)
      
      * **Type**:      Defect
      * **Date**:      Jun 9, 2010
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 13:02:58 2010 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **petda...@gmail.com** commented on Jun 9, 2010 <!-- Wed Jun  9 13:04:14 2010 -->:
      
      <pre>
      This probably applies to all fields, not just checkboxes.
      </pre>
      
      
      **mark.sto...@gmail.com** commented on Feb 1, 2013 <!-- Fri Feb  1 08:51:40 2013 -->:
      
      <pre>
      Andy, I believe this is a duplicate of #83: 
      https://code.google.com/p/www-mechanize/issues/detail?id=83
      
      I propose merging the issues.
      </pre>
      

    description:
      date:
        date: 'Jun 9, 2010'
        timestamp: Wed Jun  9 13:02:46 2010
      description: |-
        <pre>
        If you hit back on a browser and go to the form you were on, the checkboxes go back to the way they were.  Mech does not do that.  You get fresh checkboxes.
        </pre>
      reporter: petda...@gmail.com
    issue: 171
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: 'WM: $mech->back() should restore the state of the checkboxes'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=171
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=173
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:06:03 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      elma...@gmail.com reported on Jun 19, 2010 <!-- Sat Jun 19 11:32:29 2010 -->
      
      <pre>
      #!/usr/bin/perl
      
      use WWW::Mechanize;
      my $mech = WWW::Mechanize-&gt;new(
      		agent =&gt; &#39;SonyEricssonW995/R1DB Browser/NetFront/3.4 Profile/MIDP-2.1 Configuration/CLDC-1.1&#39;
      	);
      
      $url = &#39;http://mail.live.com&#39;;
      $mech-&gt;get($url);
      $mech-&gt;follow_link(n =&gt; 1);
      print $mech-&gt;dump_forms();
      print $mech-&gt;content();
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 173](http://code.google.com/p/www-mechanize/issues/detail?id=173) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=173)
      
      * **Type**:      Defect
      * **Date**:      Jun 19, 2010
      * **Reporter**:  elma...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:06:03 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Jun 19, 2010'
        timestamp: Sat Jun 19 11:32:29 2010
      description: |-
        <pre>
        #!/usr/bin/perl
        
        use WWW::Mechanize;
        my $mech = WWW::Mechanize-&gt;new(
        		agent =&gt; &#39;SonyEricssonW995/R1DB Browser/NetFront/3.4 Profile/MIDP-2.1 Configuration/CLDC-1.1&#39;
        	);
        
        $url = &#39;http://mail.live.com&#39;;
        $mech-&gt;get($url);
        $mech-&gt;follow_link(n =&gt; 1);
        print $mech-&gt;dump_forms();
        print $mech-&gt;content();
        </pre>
      reporter: elma...@gmail.com
    issue: 173
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: The forms are not detected if the tag <form> is in the same line with the <body> tag
    url: http://code.google.com/p/www-mechanize/issues/detail?id=173
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=175
    comments: []
    data: |+
      petda...@gmail.com reported on Jul 1, 2010 <!-- Thu Jul  1 12:41:22 2010 -->
      
      <pre>
      All mech work relies on having a base URL.  If you create a Mech object from scratch, and then do -&gt;update_html(), but there hasn&#39;t been an actual GET yet, then things will break because -&gt;base() is null.
      
      Forbid this and warn against it.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 175](http://code.google.com/p/www-mechanize/issues/detail?id=175) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=175)
      
      * **Type**:      Defect
      * **Date**:      Jul 1, 2010
      * **Reporter**:  petda...@gmail.com
      * **Owner**:     petda...@gmail.com
      * **Priority**:  Medium
      * **Status**:    Accepted
      * **Labels**:    `WM`
      

    description:
      date:
        date: 'Jul 1, 2010'
        timestamp: Thu Jul  1 12:41:22 2010
      description: |-
        <pre>
        All mech work relies on having a base URL.  If you create a Mech object from scratch, and then do -&gt;update_html(), but there hasn&#39;t been an actual GET yet, then things will break because -&gt;base() is null.
        
        Forbid this and warn against it.
        </pre>
      reporter: petda...@gmail.com
    issue: 175
    meta:
      Labels:
        - WM
      Owner: petda...@gmail.com
      Priority: Medium
      Status: Accepted
      Type: Defect
    title: Disallow $mech->update_html() on a new Mech object
    url: http://code.google.com/p/www-mechanize/issues/detail?id=175
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=177
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:05:33 2011
        inner:
          - key: Labels
            value: -Type-Defect Type-Enhancement WM
    data: |+
      mawil...@gmail.com reported on Jul 19, 2010 <!-- Mon Jul 19 05:12:49 2010 -->
      
      <pre>
      it would be really nice if i could tell mech to run a sub every time it loads a page. there are so many navigation methods, it&#39;s pain to override them all or run a check every time. just want to navigate through the site, while mech is checking every page for me, and tells me, if something&#39;s wrong.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 177](http://code.google.com/p/www-mechanize/issues/detail?id=177) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=177)
      
      * **Type**:      Enhancement
      * **Date**:      Jul 19, 2010
      * **Reporter**:  mawil...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:05:33 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `-Type-Defect Type-Enhancement WM`

    description:
      date:
        date: 'Jul 19, 2010'
        timestamp: Mon Jul 19 05:12:49 2010
      description: |-
        <pre>
        it would be really nice if i could tell mech to run a sub every time it loads a page. there are so many navigation methods, it&#39;s pain to override them all or run a check every time. just want to navigate through the site, while mech is checking every page for me, and tells me, if something&#39;s wrong.
        </pre>
      reporter: mawil...@gmail.com
    issue: 177
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Enhancement
    title: hook onPageLoaded event
    url: http://code.google.com/p/www-mechanize/issues/detail?id=177
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=183
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:55:26 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      gelb...@gmail.com reported on Oct 28, 2010 <!-- Thu Oct 28 13:54:03 2010 -->
      
      <pre>
      Mech is not using its internal warn and die subroutines when it
      should.
      
      Also, the documentation incorrectly says that the default warn and
      die subs become CORE::die and CORE::warn when Carp is not installed.
      But theres no such check.
      
      
      <b>What steps will reproduce the problem?</b>
      
          $ perl -MWWW::Mechanize -e &#39;my $m = WWW::Mechanize-&gt;new; \
              $m-&gt;get(&quot;http://google.com&quot;); \
              $m-&gt;submit_form(form_name =&gt; &quot;nope&quot;)&#39;
          There is no form named &quot;nope&quot; at
          /opt/local/lib/perl5/site_perl/5.12.1/WWW/Mechanize.pm line 1899.
      
      
      <b>What is the expected output? What do you see instead?</b>
      
          There is no form named &quot;nope&quot; at -e line 1
      
      Just like this:
      
          $ perl -MWWW::Mechanize -e &#39;my $m = WWW::Mechanize-&gt;new; $m-&gt;get(&quot;nope&quot;)&#39;
          Error GETing nope: URL must be absolute at -e line 1
      
      
      <b>What version of the product are you using? On what operating system?</b>
      
      The error shows up on:
      
      Perl 5.12.1, WWW::Mechanize 1.66, Darwin midgar.local 10.4.0 Darwin
      Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; i386
      
      and
      
      Perl 5.8.8, WWW::Mechanize 1.66, FreeBSD 5.5-RELEASE-p16 FreeBSD
      5.5-RELEASE-p16 #5: Tue Jul 13 12:58:11 CDT 2010 i386
      
      <b>Please provide any additional information below.</b>
      
      The fix (also attached): <a href="http://pastie.org/1256418" rel="nofollow">http://pastie.org/1256418</a>
       
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 183](http://code.google.com/p/www-mechanize/issues/detail?id=183) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=183)
      
      * **Type**:      Defect
      * **Date**:      Oct 28, 2010
      * **Reporter**:  gelb...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:55:26 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Oct 28, 2010'
        timestamp: Thu Oct 28 13:54:03 2010
      description: |-
        <pre>
        Mech is not using its internal warn and die subroutines when it
        should.
        
        Also, the documentation incorrectly says that the default warn and
        die subs become CORE::die and CORE::warn when Carp is not installed.
        But theres no such check.
        
        
        <b>What steps will reproduce the problem?</b>
        
            $ perl -MWWW::Mechanize -e &#39;my $m = WWW::Mechanize-&gt;new; \
                $m-&gt;get(&quot;http://google.com&quot;); \
                $m-&gt;submit_form(form_name =&gt; &quot;nope&quot;)&#39;
            There is no form named &quot;nope&quot; at
            /opt/local/lib/perl5/site_perl/5.12.1/WWW/Mechanize.pm line 1899.
        
        
        <b>What is the expected output? What do you see instead?</b>
        
            There is no form named &quot;nope&quot; at -e line 1
        
        Just like this:
        
            $ perl -MWWW::Mechanize -e &#39;my $m = WWW::Mechanize-&gt;new; $m-&gt;get(&quot;nope&quot;)&#39;
            Error GETing nope: URL must be absolute at -e line 1
        
        
        <b>What version of the product are you using? On what operating system?</b>
        
        The error shows up on:
        
        Perl 5.12.1, WWW::Mechanize 1.66, Darwin midgar.local 10.4.0 Darwin
        Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; i386
        
        and
        
        Perl 5.8.8, WWW::Mechanize 1.66, FreeBSD 5.5-RELEASE-p16 FreeBSD
        5.5-RELEASE-p16 #5: Tue Jul 13 12:58:11 CDT 2010 i386
        
        <b>Please provide any additional information below.</b>
        
        The fix (also attached): <a href="http://pastie.org/1256418" rel="nofollow">http://pastie.org/1256418</a>
         
        </pre>
      reporter: gelb...@gmail.com
    issue: 183
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Incorrect warn and die subs are called
    url: http://code.google.com/p/www-mechanize/issues/detail?id=183
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=184
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:14 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      suntong...@gmail.com reported on Nov 1, 2010 <!-- Mon Nov  1 20:40:35 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. $ mech-dump --user=myuser --password=&#39;&#39; http://url..
      Option password requires an argument 
      
      <b>What is the expected output? What do you see instead?</b>
      
      Empty password taken as a legitimate entry.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW-Mechanize-1.66. 
      
      $ uname -a  
      Linux coral 2.6.35-22-generic #33-Ubuntu SMP Sun Sep 19 20:32:27 UTC 2010 x86_64 GNU/Linux
      
      <b>Please provide any additional information below.</b>
      
      Fix:
      
      GetOptions(
          &#39;user=s&#39;        =&gt; \$user,
          &#39;password:s&#39;    =&gt; \$pass,
                   ^
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 184](http://code.google.com/p/www-mechanize/issues/detail?id=184) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=184)
      
      * **Type**:      Defect
      * **Date**:      Nov 1, 2010
      * **Reporter**:  suntong...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:14 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 1, 2010'
        timestamp: Mon Nov  1 20:40:35 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. $ mech-dump --user=myuser --password=&#39;&#39; http://url..
        Option password requires an argument 
        
        <b>What is the expected output? What do you see instead?</b>
        
        Empty password taken as a legitimate entry.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW-Mechanize-1.66. 
        
        $ uname -a  
        Linux coral 2.6.35-22-generic #33-Ubuntu SMP Sun Sep 19 20:32:27 UTC 2010 x86_64 GNU/Linux
        
        <b>Please provide any additional information below.</b>
        
        Fix:
        
        GetOptions(
            &#39;user=s&#39;        =&gt; \$user,
            &#39;password:s&#39;    =&gt; \$pass,
                     ^
        
        </pre>
      reporter: suntong...@gmail.com
    issue: 184
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'mech-dump: Option password requires an argument '
    url: http://code.google.com/p/www-mechanize/issues/detail?id=184
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=185
    comments:
      - author: nikolay....@gmail.com
        comment: thank you useful
        date: 'Apr 6, 2011'
        date_long: Wed Apr  6 06:52:49 2011
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:53:40 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      suntong...@gmail.com reported on Nov 1, 2010 <!-- Mon Nov  1 20:46:46 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. $ mech-dump --user=myuser --password=mypass http://url..
      Error GETing http://url.. Unauthorized at /usr/local/bin/mech-dump line 108
      
      I.e., the credentials specification after the mech-&gt;get operation is never
      reached. 
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW-Mechanize-1.66. 
      
      $ uname -a  
      Linux coral 2.6.35-22-generic #33-Ubuntu SMP Sun Sep 19 20:32:27 UTC 2010 x86_64 GNU/Linux
      
      <b>Please provide any additional information below.</b>
      
      Would this fix it?
      
      $mech-&gt;env_proxy();
      $mech-&gt;credentials($user,$pass)
          if (defined $user and defined $pass);
      my $response = $mech-&gt;get( $uri );
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 185](http://code.google.com/p/www-mechanize/issues/detail?id=185) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=185)
      
      * **Type**:      Defect
      * **Date**:      Nov 1, 2010
      * **Reporter**:  suntong...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **nikolay....@gmail.com** commented on Apr 6, 2011 <!-- Wed Apr  6 06:52:49 2011 -->:
      
      <pre>
      thank you useful
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:53:40 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 1, 2010'
        timestamp: Mon Nov  1 20:46:46 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. $ mech-dump --user=myuser --password=mypass http://url..
        Error GETing http://url.. Unauthorized at /usr/local/bin/mech-dump line 108
        
        I.e., the credentials specification after the mech-&gt;get operation is never
        reached. 
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW-Mechanize-1.66. 
        
        $ uname -a  
        Linux coral 2.6.35-22-generic #33-Ubuntu SMP Sun Sep 19 20:32:27 UTC 2010 x86_64 GNU/Linux
        
        <b>Please provide any additional information below.</b>
        
        Would this fix it?
        
        $mech-&gt;env_proxy();
        $mech-&gt;credentials($user,$pass)
            if (defined $user and defined $pass);
        my $response = $mech-&gt;get( $uri );
        
        </pre>
      reporter: suntong...@gmail.com
    issue: 185
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: mech-dump would fail if credential is required
    url: http://code.google.com/p/www-mechanize/issues/detail?id=185
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=187
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:53:56 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      PatrickS...@gmail.com reported on Nov 19, 2010 <!-- Fri Nov 19 08:16:13 2010 -->
      
      <pre>
      Why aren&#39;t you just using isa?
      
      like that: 
      
      $uri = $uri-&gt;url if $uri-&gt;isa(&#39;WWW::Mechanize::Link&#39;);
      
      Then someone could extend the WWW::Mechanize::Link - class and do some nasty stuff with it
      
      (I did, and it worked fine for me)
      
      
      <b>What version of the product are you using? On what operating system?</b>
      1.56, but looked at 1.66 and is the same line 
      on Linux (but that isn&#39;t relevant, is it?)
      
      
      Additional information:
      
      I&#39;ve attached a possible solution and an example (the example is very dumb)
      
      
      Greets Patrick Seebauer
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 187](http://code.google.com/p/www-mechanize/issues/detail?id=187) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=187)
      
      * **Type**:      Defect
      * **Date**:      Nov 19, 2010
      * **Reporter**:  PatrickS...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:53:56 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Nov 19, 2010'
        timestamp: Fri Nov 19 08:16:13 2010
      description: |-
        <pre>
        Why aren&#39;t you just using isa?
        
        like that: 
        
        $uri = $uri-&gt;url if $uri-&gt;isa(&#39;WWW::Mechanize::Link&#39;);
        
        Then someone could extend the WWW::Mechanize::Link - class and do some nasty stuff with it
        
        (I did, and it worked fine for me)
        
        
        <b>What version of the product are you using? On what operating system?</b>
        1.56, but looked at 1.66 and is the same line 
        on Linux (but that isn&#39;t relevant, is it?)
        
        
        Additional information:
        
        I&#39;ve attached a possible solution and an example (the example is very dumb)
        
        
        Greets Patrick Seebauer
        
        </pre>
      reporter: PatrickS...@gmail.com
    issue: 187
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'get - Method hard-checks the reference'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=187
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=188
    comments:
      - author: michael....@gmail.com
        comment: |-
          Sorry, pasted wrong example HTML.  Should be:
          
              <html>
                  <head>
                      <base href="/whatever" />
                  </head>
                  <body>
                      <a href="tmp/basetest2.html">click me</a>
                  </body>
              </html>
        date: 'Dec 2, 2010'
        date_long: Thu Dec  2 14:19:53 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:05 2011
        inner:
          - key: Labels
            value: WM
      - author: cherac...@gmail.com
        comment: |-
          In case anyone is looking for a workaround, you can turn off compression on your request by using the 'Accept-Encoding' header and setting the value to 'identity' only.  This fixed the problem for me (though it is admittedly inconsiderate to force all servers to send you uncompressed data.)
          
          $mech->get( $current_url, 'Accept-Encoding' => 'identity', );
        date: 'Jan 27, 2012'
        date_long: Fri Jan 27 23:24:15 2012
        inner: ~
    data: |+
      michael....@gmail.com reported on Dec 2, 2010 <!-- Thu Dec  2 13:45:59 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      <a href="http://www.mscha.org/tmp/basetest.html" rel="nofollow">http://www.mscha.org/tmp/basetest.html</a> runs on a server with mod_deflate enabled, and has the following content:
      
          &lt;html&gt;
              &lt;head&gt;
                  &lt;base href=&quot;/whatever&quot; /&gt;
              &lt;/head&gt;
              &lt;body&gt;
                  Clicked!
              &lt;/body&gt;
          &lt;/html&gt;
      
      Now run:
      
          my $mech = WWW::Mechanize-&gt;new();
          $mech-&gt;get(&#39;<a href="http://www.mscha.org/tmp/basetest.html&#39;)" rel="nofollow">http://www.mscha.org/tmp/basetest.html&#39;);</a>
          $mech-&gt;follow_link(text=&gt;&#39;click me&#39;);
      
      Expected: no output.
      See instead: Error GETing <a href="http://www.mscha.org/tmp/tmp/basetest2.html" rel="nofollow">http://www.mscha.org/tmp/tmp/basetest2.html</a>: Not Found
      
      WWW::Mechanize 1.66 and libwww-perl 5.837
      
      The problem appears to be that $mech-&gt;base() blindly uses HTTP::Response&#39;s base(), which is not gzip-encoding-aware.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 188](http://code.google.com/p/www-mechanize/issues/detail?id=188) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=188)
      
      * **Type**:      Defect
      * **Date**:      Dec 2, 2010
      * **Reporter**:  michael....@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **michael....@gmail.com** commented on Dec 2, 2010 <!-- Thu Dec  2 14:19:53 2010 -->:
      
      <pre>
      Sorry, pasted wrong example HTML.  Should be:
      
          <html>
              <head>
                  <base href="/whatever" />
              </head>
              <body>
                  <a href="tmp/basetest2.html">click me</a>
              </body>
          </html>
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:05 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **cherac...@gmail.com** commented on Jan 27, 2012 <!-- Fri Jan 27 23:24:15 2012 -->:
      
      <pre>
      In case anyone is looking for a workaround, you can turn off compression on your request by using the 'Accept-Encoding' header and setting the value to 'identity' only.  This fixed the problem for me (though it is admittedly inconsiderate to force all servers to send you uncompressed data.)
      
      $mech->get( $current_url, 'Accept-Encoding' => 'identity', );
      </pre>
      

    description:
      date:
        date: 'Dec 2, 2010'
        timestamp: Thu Dec  2 13:45:59 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        <a href="http://www.mscha.org/tmp/basetest.html" rel="nofollow">http://www.mscha.org/tmp/basetest.html</a> runs on a server with mod_deflate enabled, and has the following content:
        
            &lt;html&gt;
                &lt;head&gt;
                    &lt;base href=&quot;/whatever&quot; /&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    Clicked!
                &lt;/body&gt;
            &lt;/html&gt;
        
        Now run:
        
            my $mech = WWW::Mechanize-&gt;new();
            $mech-&gt;get(&#39;<a href="http://www.mscha.org/tmp/basetest.html&#39;)" rel="nofollow">http://www.mscha.org/tmp/basetest.html&#39;);</a>
            $mech-&gt;follow_link(text=&gt;&#39;click me&#39;);
        
        Expected: no output.
        See instead: Error GETing <a href="http://www.mscha.org/tmp/tmp/basetest2.html" rel="nofollow">http://www.mscha.org/tmp/tmp/basetest2.html</a>: Not Found
        
        WWW::Mechanize 1.66 and libwww-perl 5.837
        
        The problem appears to be that $mech-&gt;base() blindly uses HTTP::Response&#39;s base(), which is not gzip-encoding-aware.
        </pre>
      reporter: michael....@gmail.com
    issue: 188
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: '$mech->base() does not work with Content-Encoding: gzip'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=188
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=189
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:24 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      jidanni reported on Dec 19, 2010 <!-- Sun Dec 19 06:25:17 2010 -->
      
      <pre>
      Man page has word glued together:
      
       ..standalone WWW::Mechanizeinstances have
                 autocheck turned on
      
      Debian
      Package: libwww-mechanize-perl
      Version: 1.66-1
      File: /usr/share/man/man3/WWW::Mechanize.3pm.gz
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 189](http://code.google.com/p/www-mechanize/issues/detail?id=189) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=189)
      
      * **Type**:      Defect
      * **Date**:      Dec 19, 2010
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:24 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Dec 19, 2010'
        timestamp: Sun Dec 19 06:25:17 2010
      description: |-
        <pre>
        Man page has word glued together:
        
         ..standalone WWW::Mechanizeinstances have
                   autocheck turned on
        
        Debian
        Package: libwww-mechanize-perl
        Version: 1.66-1
        File: /usr/share/man/man3/WWW::Mechanize.3pm.gz
        
        
        </pre>
      reporter: jidanni
    issue: 189
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: '"WWW::Mechanizeinstances" on man page'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=189
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=190
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:55:46 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      jidanni reported on Dec 19, 2010 <!-- Sun Dec 19 06:36:25 2010 -->
      
      <pre>
      mech-dump <a href="http://tw.myblog.yahoo.com/jidanni/subscription" rel="nofollow">http://tw.myblog.yahoo.com/jidanni/subscription</a>
      Wide character in print at /usr/share/perl5/WWW/Mechanize.pm line 2124.
      POST <a href="http://tw.myblog.yahoo.com/jidanni/subscription" rel="nofollow">http://tw.myblog.yahoo.com/jidanni/subscription</a> [gallery_list]
        cfid=3                         (option)   [*3/未分類部落格連結]
        act=                           (hidden readonly)
        fid=3                          (hidden readonly)
        nfid=                          (hidden readonly)
        page=1                         (hidden readonly)
        .crumb=                        (hidden readonly)
      
      libwww-mechanize-perl:
        Installed: 1.66-1
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 190](http://code.google.com/p/www-mechanize/issues/detail?id=190) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=190)
      
      * **Type**:      Defect
      * **Date**:      Dec 19, 2010
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:55:46 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Dec 19, 2010'
        timestamp: Sun Dec 19 06:36:25 2010
      description: |-
        <pre>
        mech-dump <a href="http://tw.myblog.yahoo.com/jidanni/subscription" rel="nofollow">http://tw.myblog.yahoo.com/jidanni/subscription</a>
        Wide character in print at /usr/share/perl5/WWW/Mechanize.pm line 2124.
        POST <a href="http://tw.myblog.yahoo.com/jidanni/subscription" rel="nofollow">http://tw.myblog.yahoo.com/jidanni/subscription</a> [gallery_list]
          cfid=3                         (option)   [*3/未分類部落格連結]
          act=                           (hidden readonly)
          fid=3                          (hidden readonly)
          nfid=                          (hidden readonly)
          page=1                         (hidden readonly)
          .crumb=                        (hidden readonly)
        
        libwww-mechanize-perl:
          Installed: 1.66-1
        
        </pre>
      reporter: jidanni
    issue: 190
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'Wide character in print on Debian '
    url: http://code.google.com/p/www-mechanize/issues/detail?id=190
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=191
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:46:53 2011
        inner:
          - key: Summary
            value: 'WM: make sure each man page has SEE ALSO to all the others'
          - key: Labels
            value: WM
    data: |+
      jidanni reported on Dec 19, 2010 <!-- Sun Dec 19 06:40:32 2010 -->
      
      <pre>
      It is very important that each of these pages has a SEE ALSO section that mentions _all_ of the others.
      
      $ dlocate -man libwww-mechanize-perl
      1p mech-dump
      3pm WWW::Mechanize
      3pm WWW::Mechanize::Cookbook
      3pm WWW::Mechanize::Examples
      3pm WWW::Mechanize::FAQ
      3pm WWW::Mechanize::Image
      3pm WWW::Mechanize::Link
      
      libwww-mechanize-perl:
        Installed: 1.66-1
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 191](http://code.google.com/p/www-mechanize/issues/detail?id=191) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=191)
      
      * **Type**:      Defect
      * **Date**:      Dec 19, 2010
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:46:53 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: make sure each man page has SEE ALSO to all the others
      * Labels : `WM`

    description:
      date:
        date: 'Dec 19, 2010'
        timestamp: Sun Dec 19 06:40:32 2010
      description: |-
        <pre>
        It is very important that each of these pages has a SEE ALSO section that mentions _all_ of the others.
        
        $ dlocate -man libwww-mechanize-perl
        1p mech-dump
        3pm WWW::Mechanize
        3pm WWW::Mechanize::Cookbook
        3pm WWW::Mechanize::Examples
        3pm WWW::Mechanize::FAQ
        3pm WWW::Mechanize::Image
        3pm WWW::Mechanize::Link
        
        libwww-mechanize-perl:
          Installed: 1.66-1
        
        </pre>
      reporter: jidanni
    issue: 191
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: make sure each man page has SEE ALSO to all the others'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=191
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=192
    comments:
      - author: petda...@gmail.com
        comment: Documentation patches welcome.  Better that the person who finds the docs confusing submit the changes to the docs.
        date: 'Dec 19, 2010'
        date_long: Sun Dec 19 19:35:49 2010
        inner: ~
      - author: jidanni
        comment: 'Say: if follow_link() fails to find the link, the program will terminate with "Link Not Found". Therefore be sure to test first with find_link() when in doubt.'
        date: 'Dec 19, 2010'
        date_long: Sun Dec 19 19:46:49 2010
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:57 2011
        inner:
          - key: Labels
            value: WM
      - author: mark.sto...@gmail.com
        comment: "I would rather that follow_link be modified to fail rather than die if the link can't be found. The diagnostics can clarify that the link can't be followed because it wasn't found, not because the link failed to return a \"successful\" response."
        date: 'Feb 4, 2013'
        date_long: Mon Feb  4 14:12:20 2013
        inner: ~
    data: |+
      jidanni reported on Dec 19, 2010 <!-- Sun Dec 19 19:33:53 2010 -->
      
      <pre>
      Mention on the man page that one should remember to check first,
      
      do { get_all_blogs_on_this_page() }
        while ( $mech-&gt;find_link( text_regex =&gt; qr&#39;下一頁&#39; )
          &amp;&amp; $mech-&gt;follow_link( text_regex =&gt; qr&#39;下一頁&#39; ) );
      
      unless one wants to get nasty Link Not Found fatal messages.
      
      Perhaps even use the results of the check instead of finding a second time.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 192](http://code.google.com/p/www-mechanize/issues/detail?id=192) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=192)
      
      * **Type**:      Defect
      * **Date**:      Dec 19, 2010
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Dec 19, 2010 <!-- Sun Dec 19 19:35:49 2010 -->:
      
      <pre>
      Documentation patches welcome.  Better that the person who finds the docs confusing submit the changes to the docs.
      </pre>
      
      
      **jidanni** commented on Dec 19, 2010 <!-- Sun Dec 19 19:46:49 2010 -->:
      
      <pre>
      Say: if follow_link() fails to find the link, the program will terminate with "Link Not Found". Therefore be sure to test first with find_link() when in doubt.
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:57 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **mark.sto...@gmail.com** commented on Feb 4, 2013 <!-- Mon Feb  4 14:12:20 2013 -->:
      
      <pre>
      I would rather that follow_link be modified to fail rather than die if the link can't be found. The diagnostics can clarify that the link can't be followed because it wasn't found, not because the link failed to return a "successful" response.
      </pre>
      

    description:
      date:
        date: 'Dec 19, 2010'
        timestamp: Sun Dec 19 19:33:53 2010
      description: |-
        <pre>
        Mention on the man page that one should remember to check first,
        
        do { get_all_blogs_on_this_page() }
          while ( $mech-&gt;find_link( text_regex =&gt; qr&#39;下一頁&#39; )
            &amp;&amp; $mech-&gt;follow_link( text_regex =&gt; qr&#39;下一頁&#39; ) );
        
        unless one wants to get nasty Link Not Found fatal messages.
        
        Perhaps even use the results of the check instead of finding a second time.
        </pre>
      reporter: jidanni
    issue: 192
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'Mention one should find_link before follow_link '
    url: http://code.google.com/p/www-mechanize/issues/detail?id=192
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=193
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:45 2011
        inner:
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 14:05:26 2011
        inner:
          - key: Labels
            value: Type-Enhancement
    data: |+
      jidanni reported on Dec 19, 2010 <!-- Sun Dec 19 19:35:48 2010 -->
      
      <pre>
      Please add this to the update_html documentation on the man page:
      
      Q: How do I find all the links between the HTML containing text
      NERDSBERG and TURDSBERG ?
      
      A: Use something like
      my $html = $mech-&gt;content;
      $html =~     s/.*(\n[^n]+NERDSBERG.*TURDSBERG[^\n]+).*/$1/ms;
      $mech-&gt;update_html( $html );
      $mech-&gt;dump_links;
      
      Q: OK, then how about for each such pair on the page? [Bonus FAQ]
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 193](http://code.google.com/p/www-mechanize/issues/detail?id=193) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=193)
      
      * **Type**:      Enhancement
      * **Date**:      Dec 19, 2010
      * **Reporter**:  jidanni
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:45 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 14:05:26 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `Type-Enhancement`

    description:
      date:
        date: 'Dec 19, 2010'
        timestamp: Sun Dec 19 19:35:48 2010
      description: |-
        <pre>
        Please add this to the update_html documentation on the man page:
        
        Q: How do I find all the links between the HTML containing text
        NERDSBERG and TURDSBERG ?
        
        A: Use something like
        my $html = $mech-&gt;content;
        $html =~     s/.*(\n[^n]+NERDSBERG.*TURDSBERG[^\n]+).*/$1/ms;
        $mech-&gt;update_html( $html );
        $mech-&gt;dump_links;
        
        Q: OK, then how about for each such pair on the page? [Bonus FAQ]
        
        </pre>
      reporter: jidanni
    issue: 193
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Enhancement
    title: Say how to process just a part of a page
    url: http://code.google.com/p/www-mechanize/issues/detail?id=193
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=195
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:42:23 2011
        inner:
          - key: Summary
            value: 'WM: 1.66, cygwin: 6 tests failed, 4 subtests UNEXPECTEDLY SUCCEEDED'
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:55:09 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      he...@hexco.de reported on Dec 23, 2010 <!-- Thu Dec 23 12:40:45 2010 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. run &#39;perl Makefile.PL&#39;
      2. run &#39;make&#39;
      3. run &#39;make test&#39;
      
      <b>What is the expected output? What do you see instead?</b>
      No errors during &#39;make test&#39;
      
      <b>What version of the product are you using? On what operating system?</b>
      Version 1.66 under Perl 10.0.0 under cygwin under Win XP SP3
      
      <b>Please provide any additional information below.</b>
      see attached file 
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 195](http://code.google.com/p/www-mechanize/issues/detail?id=195) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=195)
      
      * **Type**:      Defect
      * **Date**:      Dec 23, 2010
      * **Reporter**:  he...@hexco.de
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:42:23 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Summary : WM: 1.66, cygwin: 6 tests failed, 4 subtests UNEXPECTEDLY SUCCEEDED
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:55:09 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Dec 23, 2010'
        timestamp: Thu Dec 23 12:40:45 2010
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. run &#39;perl Makefile.PL&#39;
        2. run &#39;make&#39;
        3. run &#39;make test&#39;
        
        <b>What is the expected output? What do you see instead?</b>
        No errors during &#39;make test&#39;
        
        <b>What version of the product are you using? On what operating system?</b>
        Version 1.66 under Perl 10.0.0 under cygwin under Win XP SP3
        
        <b>Please provide any additional information below.</b>
        see attached file 
        
        
        </pre>
      reporter: he...@hexco.de
    issue: 195
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: 1.66, cygwin: 6 tests failed, 4 subtests UNEXPECTEDLY SUCCEEDED'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=195
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=196
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 10:54:32 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      twi...@gmail.com reported on Feb 2, 2011 <!-- Wed Feb  2 07:42:15 2011 -->
      
      <pre>
      I have subclassed WWW::Mechanize with a simple sub-class to work around a broken website that has placed newlines into various action=&quot;&quot; and href=&quot;&quot; attributes:
      
      package MyMech;
      use base &#39;WWW::Mechanize&#39;;
      
      sub update_html {
          my ($self, $html) = @_;
          $html =~ s{(action|href)=&quot;([^&quot;\r\n]+)(?:\r?\n|\%0A)([^&quot;]+)&quot;}{$1=&quot;$2$3&quot;}sg;
          $self-&gt;WWW::Mechanize::update_html($html);
      }
       
      1;
      
      However, one of their broken hrefs is in the &lt;base&gt; tag, which is successfully modified in content by the above, but this does NOT change the actual base key within the WWW::Mechanize object or the result of $self-&gt;base(), and thus attempting to follow relative links still fails due to the invalid character.
      
      I understand that this specific issue is in fact clearly the site in question&#39;s problem, but I can envision other situations where it would be desirable to modify the base href and have it reflected within the Mechanize object.  At present the only way I can see to do this is by manually modifying $object-&gt;{&#39;base&#39;} myself, violating the isolation of the data structure.
      
      This issue is present in the current WWW::Mechanise 1.66.
      
      Please let me know if you have any questions!
      
      Regards,
      Tim Wilde
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 196](http://code.google.com/p/www-mechanize/issues/detail?id=196) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=196)
      
      * **Type**:      Defect
      * **Date**:      Feb 2, 2011
      * **Reporter**:  twi...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 10:54:32 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Feb 2, 2011'
        timestamp: Wed Feb  2 07:42:15 2011
      description: |-
        <pre>
        I have subclassed WWW::Mechanize with a simple sub-class to work around a broken website that has placed newlines into various action=&quot;&quot; and href=&quot;&quot; attributes:
        
        package MyMech;
        use base &#39;WWW::Mechanize&#39;;
        
        sub update_html {
            my ($self, $html) = @_;
            $html =~ s{(action|href)=&quot;([^&quot;\r\n]+)(?:\r?\n|\%0A)([^&quot;]+)&quot;}{$1=&quot;$2$3&quot;}sg;
            $self-&gt;WWW::Mechanize::update_html($html);
        }
         
        1;
        
        However, one of their broken hrefs is in the &lt;base&gt; tag, which is successfully modified in content by the above, but this does NOT change the actual base key within the WWW::Mechanize object or the result of $self-&gt;base(), and thus attempting to follow relative links still fails due to the invalid character.
        
        I understand that this specific issue is in fact clearly the site in question&#39;s problem, but I can envision other situations where it would be desirable to modify the base href and have it reflected within the Mechanize object.  At present the only way I can see to do this is by manually modifying $object-&gt;{&#39;base&#39;} myself, violating the isolation of the data structure.
        
        This issue is present in the current WWW::Mechanise 1.66.
        
        Please let me know if you have any questions!
        
        Regards,
        Tim Wilde
        </pre>
      reporter: twi...@gmail.com
    issue: 196
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: update_html unable to affect base href
    url: http://code.google.com/p/www-mechanize/issues/detail?id=196
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=203
    comments:
      - author: jordan.m...@gmail.com
        comment: A patch has been provided via Github.
        date: 'Apr 16, 2011'
        date_long: Sat Apr 16 11:32:55 2011
        inner: ~
      - author: petda...@gmail.com
        comment: 'To what repo?  Mech is not yet hosted on Github.'
        date: 'Apr 16, 2011'
        date_long: Sat Apr 16 11:35:25 2011
        inner: ~
      - author: jordan.m...@gmail.com
        comment: 'Sorry, the patch is attached.'
        date: 'Apr 16, 2011'
        date_long: Sat Apr 16 11:48:11 2011
        inner: ~
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'Apr 24, 2011'
        date_long: Sun Apr 24 11:11:00 2011
        inner:
          - key: Labels
            value: WM
    data: |+
      jordan.m...@gmail.com reported on Apr 16, 2011 <!-- Sat Apr 16 11:28:51 2011 -->
      
      <pre>
      Steps to reproduce:
      1. Have a form with a malformed checkbox input (with no value), such as &lt;input type=&quot;checkbox&quot; name=&quot;scene&quot; id=&quot;scene&quot;&gt;
      2. Issue a $mech-&gt;tick(&#39;scene&#39;, &#39;&#39;);
      
      Expected output: checkbox is ticked
      Resulting output: checkbox is not ticked
      
      This applies to most recent version of WWW::Mechanize on any operating system.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 203](http://code.google.com/p/www-mechanize/issues/detail?id=203) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=203)
      
      * **Type**:      Defect
      * **Date**:      Apr 16, 2011
      * **Reporter**:  jordan.m...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **jordan.m...@gmail.com** commented on Apr 16, 2011 <!-- Sat Apr 16 11:32:55 2011 -->:
      
      <pre>
      A patch has been provided via Github.
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 16, 2011 <!-- Sat Apr 16 11:35:25 2011 -->:
      
      <pre>
      To what repo?  Mech is not yet hosted on Github.
      </pre>
      
      
      **jordan.m...@gmail.com** commented on Apr 16, 2011 <!-- Sat Apr 16 11:48:11 2011 -->:
      
      <pre>
      Sorry, the patch is attached.
      </pre>
      
      
      **petda...@gmail.com** commented on Apr 24, 2011 <!-- Sun Apr 24 11:11:00 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`

    description:
      date:
        date: 'Apr 16, 2011'
        timestamp: Sat Apr 16 11:28:51 2011
      description: |-
        <pre>
        Steps to reproduce:
        1. Have a form with a malformed checkbox input (with no value), such as &lt;input type=&quot;checkbox&quot; name=&quot;scene&quot; id=&quot;scene&quot;&gt;
        2. Issue a $mech-&gt;tick(&#39;scene&#39;, &#39;&#39;);
        
        Expected output: checkbox is ticked
        Resulting output: checkbox is not ticked
        
        This applies to most recent version of WWW::Mechanize on any operating system.
        </pre>
      reporter: jordan.m...@gmail.com
    issue: 203
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: tick() requires a value to be set
    url: http://code.google.com/p/www-mechanize/issues/detail?id=203
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=204
    comments:
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 12:00:11 2011
        inner:
          - key: Labels
            value: WM
      - author: petda...@gmail.com
        comment: (No comment was entered for this change.)
        date: 'May 4, 2011'
        date_long: Wed May  4 14:05:26 2011
        inner:
          - key: Labels
            value: Type-Enhancement
    data: |+
      cha...@live.de reported on Apr 28, 2011 <!-- Thu Apr 28 04:34:06 2011 -->
      
      <pre>
      WWW::Mechanize still uses user agent strings from 2003, which is now 8 years ago. I believe that they should get an update, so that we don&#39;t manipulate site stats and thus make people think that their sites are still regularly visited by old browsers. Some regularly used user agent strings may be found at <a href="http://www.useragentstring.com/pages/useragentstring.php" rel="nofollow">http://www.useragentstring.com/pages/useragentstring.php</a>. Thanks.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 204](http://code.google.com/p/www-mechanize/issues/detail?id=204) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=204)
      
      * **Type**:      Enhancement
      * **Date**:      Apr 28, 2011
      * **Reporter**:  cha...@live.de
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      * **Labels**:    `WM`
      
      
      ### Comments
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 12:00:11 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `WM`
      
      **petda...@gmail.com** commented on May 4, 2011 <!-- Wed May  4 14:05:26 2011 -->:
      
      <pre>
      (No comment was entered for this change.)
      </pre>
      
      * Labels : `Type-Enhancement`

    description:
      date:
        date: 'Apr 28, 2011'
        timestamp: Thu Apr 28 04:34:06 2011
      description: |-
        <pre>
        WWW::Mechanize still uses user agent strings from 2003, which is now 8 years ago. I believe that they should get an update, so that we don&#39;t manipulate site stats and thus make people think that their sites are still regularly visited by old browsers. Some regularly used user agent strings may be found at <a href="http://www.useragentstring.com/pages/useragentstring.php" rel="nofollow">http://www.useragentstring.com/pages/useragentstring.php</a>. Thanks.
        </pre>
      reporter: cha...@live.de
    issue: 204
    meta:
      Labels:
        - WM
      Owner: ----
      Priority: Medium
      Status: New
      Type: Enhancement
    title: Please update the user agent aliases
    url: http://code.google.com/p/www-mechanize/issues/detail?id=204
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=207
    comments: []
    data: |+
      cpgl...@gmail.com reported on May 12, 2011 <!-- Thu May 12 00:57:09 2011 -->
      
      <pre>
      The following code has no effect. The server always responds 403 errors.
      
        $mech-&gt;credentials($username, $password);
        $mech-&gt;get($url); 
      
      The FAQ suggests to run the following code:
      
           my @args = (
              Authorization =&gt; &quot;Basic &quot; .
                  MIME::Base64::encode( $username . &#39;:&#39; . $password )
          );
      
          $agent-&gt;credentials( $host, &quot;foo&quot;, $username, $password );
          $agent-&gt;get( $url, @args );
      
      This fragment works as expected.
      
      According to the documentation in WWW::Mechanize the two chunks should be equivalent.
      
      I found that the following code has the same effect as the second chunk: 
          
          my @args = (
              Authorization =&gt; &quot;Basic &quot; .
                  MIME::Base64::encode( $username . &#39;:&#39; . $password )
          );
          $agent-&gt;get( $url, @args );
      
      However, if I rephrase the code to the following fragment it will always fails.
      
          $agent-&gt;credentials( $host, &quot;foo&quot;, $username, $password );
          $agent-&gt;get( $url );
      
      This behaviour leads me to the conclusion that the credentials() function is non-functional. 
      
      I focused into the code and found that accessor function get_basic_credentials() is never called during the request process. Consequently, any global or host related credentials will never appear in the request headers. 
      
      This might be a problem of the underlying LWP::UA.
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 207](http://code.google.com/p/www-mechanize/issues/detail?id=207) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=207)
      
      * **Type**:      Defect
      * **Date**:      May 12, 2011
      * **Reporter**:  cpgl...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'May 12, 2011'
        timestamp: Thu May 12 00:57:09 2011
      description: |-
        <pre>
        The following code has no effect. The server always responds 403 errors.
        
          $mech-&gt;credentials($username, $password);
          $mech-&gt;get($url); 
        
        The FAQ suggests to run the following code:
        
             my @args = (
                Authorization =&gt; &quot;Basic &quot; .
                    MIME::Base64::encode( $username . &#39;:&#39; . $password )
            );
        
            $agent-&gt;credentials( $host, &quot;foo&quot;, $username, $password );
            $agent-&gt;get( $url, @args );
        
        This fragment works as expected.
        
        According to the documentation in WWW::Mechanize the two chunks should be equivalent.
        
        I found that the following code has the same effect as the second chunk: 
            
            my @args = (
                Authorization =&gt; &quot;Basic &quot; .
                    MIME::Base64::encode( $username . &#39;:&#39; . $password )
            );
            $agent-&gt;get( $url, @args );
        
        However, if I rephrase the code to the following fragment it will always fails.
        
            $agent-&gt;credentials( $host, &quot;foo&quot;, $username, $password );
            $agent-&gt;get( $url );
        
        This behaviour leads me to the conclusion that the credentials() function is non-functional. 
        
        I focused into the code and found that accessor function get_basic_credentials() is never called during the request process. Consequently, any global or host related credentials will never appear in the request headers. 
        
        This might be a problem of the underlying LWP::UA.
        
        
        </pre>
      reporter: cpgl...@gmail.com
    issue: 207
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: WWW:Mechanize's credentials() api appears non-functional
    url: http://code.google.com/p/www-mechanize/issues/detail?id=207
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=208
    comments:
      - author: oinksoc...@letterboxes.org
        comment: |-
          I've encountered this building WWW::Mechanize on CentOS 5.
          
          It appears to be a problem related to HTML::Form - the version installed when failing was 1.054, from the RPM perl-libwww-perl-5.805-1.1.1, itself from the base CentOS repository.
          
          Upgrading it to v6.00 (via a local::lib install) fixed it.  Oldest version I've seen work is 5.829 (on Ubuntu Lucid).
          
          The error comes from HTML::Form::find_input - the implementation has changed such that (I think, based on a quick debug) if $sef->{strict} is not set the input is created if it does not exist, instead of throwing an exception.  This may be masking the real problem, however.
          
          HTH
        date: 'Sep 28, 2011'
        date_long: Wed Sep 28 11:01:01 2011
        inner: ~
      - author: walde.ch...@gmail.com
        comment: This was just encountered at my company in production with a default debian install. I think adding the proper dependency version to Makefile.PL should fix this.
        date: 'Oct 17, 2011'
        date_long: Mon Oct 17 06:15:29 2011
        inner: ~
    data: |+
      rbu...@gmail.com reported on Jun 15, 2011 <!-- Wed Jun 15 13:01:02 2011 -->
      
      <pre>
      $ cpanm -v WWW::Mechanize
      cpanm (App::cpanminus) 1.4007 on perl 5.010000 built for i486-linux-gnu-thread-multi
      Work directory is /home/david/.cpanm/work/1308167106.28448
      You have make /usr/bin/make
      You have LWP 6.02
      You have /bin/tar: tar (GNU tar) 1.20
      Copyright (C) 2008 Free Software Foundation, Inc.
      License GPLv3+: GNU GPL version 3 or later &lt;<a href="http://gnu.org/licenses/gpl.html" rel="nofollow">http://gnu.org/licenses/gpl.html</a>&gt;
      This is free software: you are free to change and redistribute it.
      There is NO WARRANTY, to the extent permitted by law.
      
      Written by John Gilmore and Jay Fenlason.
      You have /usr/bin/unzip
      Searching WWW::Mechanize on cpanmetadb ...
      Checking if you have ExtUtils::MakeMaker 6.31 ... Yes (6.56)
      Checking if you have ExtUtils::Install 1.46 ... Yes (1.54)
      Checking if you have Module::Build 0.36 ... Yes (0.3800)
      --&gt; Working on WWW::Mechanize
      Fetching <a href="http://search.cpan.org/CPAN/authors/id/J/JE/JESSE/WWW-Mechanize-1.68.tar.gz" rel="nofollow">http://search.cpan.org/CPAN/authors/id/J/JE/JESSE/WWW-Mechanize-1.68.tar.gz</a> ... OK
      Unpacking WWW-Mechanize-1.68.tar.gz
      WWW-Mechanize-1.68/
      WWW-Mechanize-1.68/perlcriticrc
      WWW-Mechanize-1.68/MANIFEST
      WWW-Mechanize-1.68/bin/
      WWW-Mechanize-1.68/bin/mech-dump
      WWW-Mechanize-1.68/etc/
      WWW-Mechanize-1.68/etc/www-mechanize-logo.png
      WWW-Mechanize-1.68/META.yml
      WWW-Mechanize-1.68/lib/
      WWW-Mechanize-1.68/lib/WWW/
      WWW-Mechanize-1.68/lib/WWW/Mechanize/
      WWW-Mechanize-1.68/lib/WWW/Mechanize/Cookbook.pod
      WWW-Mechanize-1.68/lib/WWW/Mechanize/Link.pm
      WWW-Mechanize-1.68/lib/WWW/Mechanize/FAQ.pod
      WWW-Mechanize-1.68/lib/WWW/Mechanize/Examples.pod
      WWW-Mechanize-1.68/lib/WWW/Mechanize/Image.pm
      WWW-Mechanize-1.68/lib/WWW/Mechanize.pm
      WWW-Mechanize-1.68/Changes
      WWW-Mechanize-1.68/MANIFEST.SKIP
      WWW-Mechanize-1.68/t/
      WWW-Mechanize-1.68/t/find_inputs.t
      WWW-Mechanize-1.68/t/upload.html
      WWW-Mechanize-1.68/t/add_header.t
      WWW-Mechanize-1.68/t/find_link_id.html
      WWW-Mechanize-1.68/t/regex-error.t
      WWW-Mechanize-1.68/t/warnings.t
      WWW-Mechanize-1.68/t/select.t
      WWW-Mechanize-1.68/t/google.html
      WWW-Mechanize-1.68/t/aliases.t
      WWW-Mechanize-1.68/t/Tools.pm
      WWW-Mechanize-1.68/t/clone.t
      WWW-Mechanize-1.68/t/link.t
      WWW-Mechanize-1.68/t/frames.html
      WWW-Mechanize-1.68/t/save_content.t
      WWW-Mechanize-1.68/t/image-new.t
      WWW-Mechanize-1.68/t/area_link.html
      WWW-Mechanize-1.68/t/find_frame.html
      WWW-Mechanize-1.68/t/link-relative.t
      WWW-Mechanize-1.68/t/content.t
      WWW-Mechanize-1.68/t/find_link.t
      WWW-Mechanize-1.68/t/form_with_fields.html
      WWW-Mechanize-1.68/t/credentials.t
      WWW-Mechanize-1.68/t/pod-coverage.t
      WWW-Mechanize-1.68/t/form_with_fields.t
      WWW-Mechanize-1.68/t/upload.t
      WWW-Mechanize-1.68/t/tick.t
      WWW-Mechanize-1.68/t/link-base.t
      WWW-Mechanize-1.68/t/field.html
      WWW-Mechanize-1.68/t/00-load.t
      WWW-Mechanize-1.68/t/credentials-api.t
      WWW-Mechanize-1.68/t/find_image.t
      WWW-Mechanize-1.68/t/untaint.t
      WWW-Mechanize-1.68/t/tick.html
      WWW-Mechanize-1.68/t/cookies.t
      WWW-Mechanize-1.68/t/frames.t
      WWW-Mechanize-1.68/t/new.t
      WWW-Mechanize-1.68/t/find_inputs.html
      WWW-Mechanize-1.68/t/find_frame.t
      WWW-Mechanize-1.68/t/find_link-warnings.t
      WWW-Mechanize-1.68/t/image-parse.t
      WWW-Mechanize-1.68/t/live/
      WWW-Mechanize-1.68/t/live/encoding.t
      WWW-Mechanize-1.68/t/live/wikipedia.t
      WWW-Mechanize-1.68/t/find_link.html
      WWW-Mechanize-1.68/t/TestServer.pm
      WWW-Mechanize-1.68/t/pod.t
      WWW-Mechanize-1.68/t/find_link_id.t
      WWW-Mechanize-1.68/t/select.html
      WWW-Mechanize-1.68/t/die.t
      WWW-Mechanize-1.68/t/image-parse.html
      WWW-Mechanize-1.68/t/form-parsing.t
      WWW-Mechanize-1.68/t/autocheck.t
      WWW-Mechanize-1.68/t/area_link.t
      WWW-Mechanize-1.68/t/taint.t
      WWW-Mechanize-1.68/t/local/
      WWW-Mechanize-1.68/t/local/log-server
      WWW-Mechanize-1.68/t/local/nonascii.html
      WWW-Mechanize-1.68/t/local/page_stack.t
      WWW-Mechanize-1.68/t/local/click_button.t
      WWW-Mechanize-1.68/t/local/failure.t
      WWW-Mechanize-1.68/t/local/follow.t
      WWW-Mechanize-1.68/t/local/referer.t
      WWW-Mechanize-1.68/t/local/nonascii.t
      WWW-Mechanize-1.68/t/local/referer-server
      WWW-Mechanize-1.68/t/local/form.t
      WWW-Mechanize-1.68/t/local/get.t
      WWW-Mechanize-1.68/t/local/click.t
      WWW-Mechanize-1.68/t/local/back.t
      WWW-Mechanize-1.68/t/local/reload.t
      WWW-Mechanize-1.68/t/local/overload.t
      WWW-Mechanize-1.68/t/local/submit.t
      WWW-Mechanize-1.68/t/local/LocalServer.pm
      WWW-Mechanize-1.68/t/field.t
      WWW-Mechanize-1.68/t/warn.t
      WWW-Mechanize-1.68/t/mech-dump/
      WWW-Mechanize-1.68/t/mech-dump/mech-dump.t
      WWW-Mechanize-1.68/Makefile.PL
      Entering WWW-Mechanize-1.68
      Checking configure dependencies from META.yml
      Checking if you have ExtUtils::MakeMaker 0 ... Yes (6.56)
      Configuring WWW-Mechanize-1.68 ... Running Makefile.PL
      
      It looks like you don&#39;t have SSL capability (like IO::Socket::SSL) installed. 
      You will not be able to process https:// URLs correctly.
      
      
      WWW::Mechanize likes to have a lot of test modules for some of its tests.
      The following are modules that would be nice to have, but not required.
      
      	Test::Memory::Cycle
       	Test::Taint
      
      
      Checking if your kit is complete...
      Looks good
      Writing Makefile for WWW::Mechanize
      OK
      Finding PREREQ from Makefile ...
      Checking if you have Pod::Usage 0 ... Yes (1.35)
      Checking if you have FindBin 0 ... Yes (1.49)
      Checking if you have HTML::TreeBuilder 0 ... Yes (3.23)
      Checking if you have HTTP::Status 0 ... Yes (6.00)
      Checking if you have HTTP::Server::Simple 0.35 ... Yes (0.44)
      Checking if you have HTML::TokeParser 2.28 ... Yes (2.37)
      Checking if you have URI::file 0 ... Yes (4.20)
      Checking if you have HTTP::Server::Simple::CGI 0 ... Yes (undef)
      Checking if you have HTTP::Daemon 0 ... Yes (6.00)
      Checking if you have Getopt::Long 0 ... Yes (2.37)
      Checking if you have HTML::Form 1.038 ... Yes (5.813)
      Checking if you have URI 1.36 ... Yes (1.58)
      Checking if you have HTML::HeadParser 0 ... Yes (2.22)
      Checking if you have Carp 0 ... Yes (1.08)
      Checking if you have Test::More 0.34 ... Yes (0.98)
      Checking if you have Test::Warn 0.11 ... Yes (0.23)
      Checking if you have LWP::UserAgent 5.829 ... Yes (6.02)
      Checking if you have HTML::Parser 3.33 ... Yes (3.56)
      Checking if you have File::Temp 0 ... Yes (0.22)
      Checking if you have URI::URL 0 ... Yes (5.03)
      Checking if you have HTTP::Request 1.3 ... Yes (6.00)
      Checking if you have LWP 5.829 ... Yes (6.02)
      Building and testing WWW-Mechanize-1.68 ... cp lib/WWW/Mechanize/Examples.pod blib/lib/WWW/Mechanize/Examples.pod
      cp lib/WWW/Mechanize/Link.pm blib/lib/WWW/Mechanize/Link.pm
      cp lib/WWW/Mechanize/Image.pm blib/lib/WWW/Mechanize/Image.pm
      cp lib/WWW/Mechanize/Cookbook.pod blib/lib/WWW/Mechanize/Cookbook.pod
      cp lib/WWW/Mechanize/FAQ.pod blib/lib/WWW/Mechanize/FAQ.pod
      cp lib/WWW/Mechanize.pm blib/lib/WWW/Mechanize.pm
      cp bin/mech-dump blib/script/mech-dump
      /usr/bin/perl -MExtUtils::MY -e &#39;MY-&gt;fixin(shift)&#39; -- blib/script/mech-dump
      Manifying blib/man1/mech-dump.1p
      Manifying blib/man3/WWW::Mechanize::Link.3pm
      Manifying blib/man3/WWW::Mechanize::Examples.3pm
      Manifying blib/man3/WWW::Mechanize::Image.3pm
      Manifying blib/man3/WWW::Mechanize::FAQ.3pm
      Manifying blib/man3/WWW::Mechanize::Cookbook.3pm
      Manifying blib/man3/WWW::Mechanize.3pm
      PERL_DL_NONLAZY=1 /usr/bin/perl &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/00-load.t t/add_header.t t/aliases.t t/area_link.t t/autocheck.t t/clone.t t/content.t t/cookies.t t/credentials-api.t t/credentials.t t/die.t t/field.t t/find_frame.t t/find_image.t t/find_inputs.t t/find_link-warnings.t t/find_link.t t/find_link_id.t t/form-parsing.t t/form_with_fields.t t/frames.t t/image-new.t t/image-parse.t t/link-base.t t/link-relative.t t/link.t t/new.t t/pod-coverage.t t/pod.t t/regex-error.t t/save_content.t t/select.t t/taint.t t/tick.t t/untaint.t t/upload.t t/warn.t t/warnings.t t/local/back.t t/local/click.t t/local/click_button.t t/local/failure.t t/local/follow.t t/local/form.t t/local/get.t t/local/nonascii.t t/local/overload.t t/local/page_stack.t t/local/referer.t t/local/reload.t t/local/submit.t t/live/encoding.t t/live/wikipedia.t t/mech-dump/mech-dump.t
      t/00-load.t .............. 1/2 # Testing WWW::Mechanize 1.68, with LWP 6.02, Perl 5.010000, /usr/bin/perl
      # Test::Memory::Cycle is not installed.
      t/00-load.t .............. ok   
      t/add_header.t ........... ok   
      t/aliases.t .............. ok   
      t/area_link.t ............ ok   
      t/autocheck.t ............ ok   
      t/clone.t ................ ok   
      t/content.t .............. ok   
      t/cookies.t .............. # Test server http://127.0.0.1:22051 as PID 28519
      t/cookies.t .............. ok     
      t/credentials-api.t ...... ok   
      t/credentials.t .......... ok     
      t/die.t .................. ok   
      t/field.t ................ ok   
      t/find_frame.t ........... ok   
      t/find_image.t ........... ok     
      t/find_inputs.t .......... ok     
      t/find_link-warnings.t ... ok     
      t/find_link.t ............ ok     
      t/find_link_id.t ......... ok    
      t/form-parsing.t ......... ok   
      t/form_with_fields.t ..... 1/? There are 2 forms with the named fields.  The first one was used. at t/form_with_fields.t line 27
      t/form_with_fields.t ..... ok   
      t/frames.t ............... ok   
      t/image-new.t ............ ok     
      t/image-parse.t .......... ok     
      t/link-base.t ............ ok   
      t/link-relative.t ........ ok   
      t/link.t ................. ok     
      t/live/encoding.t ........ ok     
      t/live/wikipedia.t ....... ok     
      t/local/back.t ........... 1/47 # Started http://localhost:33434/
      t/local/back.t ........... ok     
      t/local/click.t .......... 1/9 # Started http://localhost:39239/
      t/local/click.t .......... ok   
      t/local/click_button.t ... 1/19 # Started http://localhost:45094/
      t/local/click_button.t ... ok     
      t/local/failure.t ........ 2/15 # Started http://localhost:60493/
      t/local/failure.t ........ ok     
      t/local/follow.t ......... 1/22 # Started http://localhost:54119/
      t/local/follow.t ......... ok     
      t/local/form.t ........... 1/13 # Started http://localhost:57725/
      t/local/form.t ........... ok     
      t/local/get.t ............ 1/32 # Started http://localhost:59142/
      t/local/get.t ............ ok     
      t/local/nonascii.t ....... 1/5 # Started http://localhost:45550/
      No such field &#39;ValueOf&#39;CF.{Ñ‚}&#39;&#39; at /home/david/.cpanm/work/1308167106.28448/WWW-Mechanize-1.68/blib/lib/WWW/Mechanize.pm line 1403
      # Looks like you planned 5 tests but ran 4.
      t/local/nonascii.t ....... Dubious, test returned 255 (wstat 65280, 0xff00)
      Failed 1/5 subtests 
      t/local/overload.t ....... skipped: Mysteriously stopped passing, and I don&#39;t know why.
      t/local/page_stack.t ..... 1/16 # Started http://localhost:45775/
      t/local/page_stack.t ..... ok     
      t/local/referer.t ........ ok     
      t/local/reload.t ......... 1/14 # Started http://localhost:37802/
      t/local/reload.t ......... ok     
      t/local/submit.t ......... 1/13 # Started http://localhost:51370/
      t/local/submit.t ......... ok     
      t/mech-dump/mech-dump.t .. ok   
      t/new.t .................. ok     
      t/pod-coverage.t ......... skipped: Test::Pod::Coverage 1.04 required for testing POD coverage
      t/pod.t .................. ok   
      t/regex-error.t .......... ok   
      t/save_content.t ......... ok   
      t/select.t ............... ok     
      t/taint.t ................ skipped: Test::Taint required for checking taintedness
      t/tick.t ................. ok   
      t/untaint.t .............. ok   
      t/upload.t ............... ok   
      t/warn.t ................. ok   
      t/warnings.t ............. ok   
      
      Test Summary Report
      -------------------
      t/local/click_button.t (Wstat: 0 Tests: 19 Failed: 0)
        TODO passed:   15-17, 19
      t/local/nonascii.t     (Wstat: 65280 Tests: 4 Failed: 0)
        Non-zero exit status: 255
        Parse errors: Bad plan.  You planned 5 tests but ran 4.
      Files=54, Tests=598, 22 wallclock secs ( 0.28 usr  0.08 sys + 12.99 cusr  0.93 csys = 14.28 CPU)
      Result: FAIL
      Failed 1/54 test programs. 0/598 subtests failed.
      make: *** [test_dynamic] Error 255
      FAIL
      ! Installing WWW::Mechanize failed. See /home/david/.cpanm/build.log for details.
      
      
      Test Summary Report
      -------------------
      t/local/click_button.t (Wstat: 0 Tests: 19 Failed: 0)
        TODO passed:   15-17, 19
      t/local/nonascii.t     (Wstat: 65280 Tests: 4 Failed: 0)
        Non-zero exit status: 255
        Parse errors: Bad plan.  You planned 5 tests but ran 4.
      Files=54, Tests=598, 22 wallclock secs ( 0.28 usr  0.08 sys + 12.99 cusr  0.93 csys = 14.28 CPU)
      Result: FAIL
      Failed 1/54 test programs. 0/598 subtests failed.
      make: *** [test_dynamic] Error 255
      FAIL
      ! Installing WWW::Mechanize failed. See /home/david/.cpanm/build.log for details.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 208](http://code.google.com/p/www-mechanize/issues/detail?id=208) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=208)
      
      * **Type**:      Defect
      * **Date**:      Jun 15, 2011
      * **Reporter**:  rbu...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **oinksoc...@letterboxes.org** commented on Sep 28, 2011 <!-- Wed Sep 28 11:01:01 2011 -->:
      
      <pre>
      I've encountered this building WWW::Mechanize on CentOS 5.
      
      It appears to be a problem related to HTML::Form - the version installed when failing was 1.054, from the RPM perl-libwww-perl-5.805-1.1.1, itself from the base CentOS repository.
      
      Upgrading it to v6.00 (via a local::lib install) fixed it.  Oldest version I've seen work is 5.829 (on Ubuntu Lucid).
      
      The error comes from HTML::Form::find_input - the implementation has changed such that (I think, based on a quick debug) if $sef->{strict} is not set the input is created if it does not exist, instead of throwing an exception.  This may be masking the real problem, however.
      
      HTH
      </pre>
      
      
      **walde.ch...@gmail.com** commented on Oct 17, 2011 <!-- Mon Oct 17 06:15:29 2011 -->:
      
      <pre>
      This was just encountered at my company in production with a default debian install. I think adding the proper dependency version to Makefile.PL should fix this.
      </pre>
      

    description:
      date:
        date: 'Jun 15, 2011'
        timestamp: Wed Jun 15 13:01:02 2011
      description: |-
        <pre>
        $ cpanm -v WWW::Mechanize
        cpanm (App::cpanminus) 1.4007 on perl 5.010000 built for i486-linux-gnu-thread-multi
        Work directory is /home/david/.cpanm/work/1308167106.28448
        You have make /usr/bin/make
        You have LWP 6.02
        You have /bin/tar: tar (GNU tar) 1.20
        Copyright (C) 2008 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later &lt;<a href="http://gnu.org/licenses/gpl.html" rel="nofollow">http://gnu.org/licenses/gpl.html</a>&gt;
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        
        Written by John Gilmore and Jay Fenlason.
        You have /usr/bin/unzip
        Searching WWW::Mechanize on cpanmetadb ...
        Checking if you have ExtUtils::MakeMaker 6.31 ... Yes (6.56)
        Checking if you have ExtUtils::Install 1.46 ... Yes (1.54)
        Checking if you have Module::Build 0.36 ... Yes (0.3800)
        --&gt; Working on WWW::Mechanize
        Fetching <a href="http://search.cpan.org/CPAN/authors/id/J/JE/JESSE/WWW-Mechanize-1.68.tar.gz" rel="nofollow">http://search.cpan.org/CPAN/authors/id/J/JE/JESSE/WWW-Mechanize-1.68.tar.gz</a> ... OK
        Unpacking WWW-Mechanize-1.68.tar.gz
        WWW-Mechanize-1.68/
        WWW-Mechanize-1.68/perlcriticrc
        WWW-Mechanize-1.68/MANIFEST
        WWW-Mechanize-1.68/bin/
        WWW-Mechanize-1.68/bin/mech-dump
        WWW-Mechanize-1.68/etc/
        WWW-Mechanize-1.68/etc/www-mechanize-logo.png
        WWW-Mechanize-1.68/META.yml
        WWW-Mechanize-1.68/lib/
        WWW-Mechanize-1.68/lib/WWW/
        WWW-Mechanize-1.68/lib/WWW/Mechanize/
        WWW-Mechanize-1.68/lib/WWW/Mechanize/Cookbook.pod
        WWW-Mechanize-1.68/lib/WWW/Mechanize/Link.pm
        WWW-Mechanize-1.68/lib/WWW/Mechanize/FAQ.pod
        WWW-Mechanize-1.68/lib/WWW/Mechanize/Examples.pod
        WWW-Mechanize-1.68/lib/WWW/Mechanize/Image.pm
        WWW-Mechanize-1.68/lib/WWW/Mechanize.pm
        WWW-Mechanize-1.68/Changes
        WWW-Mechanize-1.68/MANIFEST.SKIP
        WWW-Mechanize-1.68/t/
        WWW-Mechanize-1.68/t/find_inputs.t
        WWW-Mechanize-1.68/t/upload.html
        WWW-Mechanize-1.68/t/add_header.t
        WWW-Mechanize-1.68/t/find_link_id.html
        WWW-Mechanize-1.68/t/regex-error.t
        WWW-Mechanize-1.68/t/warnings.t
        WWW-Mechanize-1.68/t/select.t
        WWW-Mechanize-1.68/t/google.html
        WWW-Mechanize-1.68/t/aliases.t
        WWW-Mechanize-1.68/t/Tools.pm
        WWW-Mechanize-1.68/t/clone.t
        WWW-Mechanize-1.68/t/link.t
        WWW-Mechanize-1.68/t/frames.html
        WWW-Mechanize-1.68/t/save_content.t
        WWW-Mechanize-1.68/t/image-new.t
        WWW-Mechanize-1.68/t/area_link.html
        WWW-Mechanize-1.68/t/find_frame.html
        WWW-Mechanize-1.68/t/link-relative.t
        WWW-Mechanize-1.68/t/content.t
        WWW-Mechanize-1.68/t/find_link.t
        WWW-Mechanize-1.68/t/form_with_fields.html
        WWW-Mechanize-1.68/t/credentials.t
        WWW-Mechanize-1.68/t/pod-coverage.t
        WWW-Mechanize-1.68/t/form_with_fields.t
        WWW-Mechanize-1.68/t/upload.t
        WWW-Mechanize-1.68/t/tick.t
        WWW-Mechanize-1.68/t/link-base.t
        WWW-Mechanize-1.68/t/field.html
        WWW-Mechanize-1.68/t/00-load.t
        WWW-Mechanize-1.68/t/credentials-api.t
        WWW-Mechanize-1.68/t/find_image.t
        WWW-Mechanize-1.68/t/untaint.t
        WWW-Mechanize-1.68/t/tick.html
        WWW-Mechanize-1.68/t/cookies.t
        WWW-Mechanize-1.68/t/frames.t
        WWW-Mechanize-1.68/t/new.t
        WWW-Mechanize-1.68/t/find_inputs.html
        WWW-Mechanize-1.68/t/find_frame.t
        WWW-Mechanize-1.68/t/find_link-warnings.t
        WWW-Mechanize-1.68/t/image-parse.t
        WWW-Mechanize-1.68/t/live/
        WWW-Mechanize-1.68/t/live/encoding.t
        WWW-Mechanize-1.68/t/live/wikipedia.t
        WWW-Mechanize-1.68/t/find_link.html
        WWW-Mechanize-1.68/t/TestServer.pm
        WWW-Mechanize-1.68/t/pod.t
        WWW-Mechanize-1.68/t/find_link_id.t
        WWW-Mechanize-1.68/t/select.html
        WWW-Mechanize-1.68/t/die.t
        WWW-Mechanize-1.68/t/image-parse.html
        WWW-Mechanize-1.68/t/form-parsing.t
        WWW-Mechanize-1.68/t/autocheck.t
        WWW-Mechanize-1.68/t/area_link.t
        WWW-Mechanize-1.68/t/taint.t
        WWW-Mechanize-1.68/t/local/
        WWW-Mechanize-1.68/t/local/log-server
        WWW-Mechanize-1.68/t/local/nonascii.html
        WWW-Mechanize-1.68/t/local/page_stack.t
        WWW-Mechanize-1.68/t/local/click_button.t
        WWW-Mechanize-1.68/t/local/failure.t
        WWW-Mechanize-1.68/t/local/follow.t
        WWW-Mechanize-1.68/t/local/referer.t
        WWW-Mechanize-1.68/t/local/nonascii.t
        WWW-Mechanize-1.68/t/local/referer-server
        WWW-Mechanize-1.68/t/local/form.t
        WWW-Mechanize-1.68/t/local/get.t
        WWW-Mechanize-1.68/t/local/click.t
        WWW-Mechanize-1.68/t/local/back.t
        WWW-Mechanize-1.68/t/local/reload.t
        WWW-Mechanize-1.68/t/local/overload.t
        WWW-Mechanize-1.68/t/local/submit.t
        WWW-Mechanize-1.68/t/local/LocalServer.pm
        WWW-Mechanize-1.68/t/field.t
        WWW-Mechanize-1.68/t/warn.t
        WWW-Mechanize-1.68/t/mech-dump/
        WWW-Mechanize-1.68/t/mech-dump/mech-dump.t
        WWW-Mechanize-1.68/Makefile.PL
        Entering WWW-Mechanize-1.68
        Checking configure dependencies from META.yml
        Checking if you have ExtUtils::MakeMaker 0 ... Yes (6.56)
        Configuring WWW-Mechanize-1.68 ... Running Makefile.PL
        
        It looks like you don&#39;t have SSL capability (like IO::Socket::SSL) installed. 
        You will not be able to process https:// URLs correctly.
        
        
        WWW::Mechanize likes to have a lot of test modules for some of its tests.
        The following are modules that would be nice to have, but not required.
        
        	Test::Memory::Cycle
         	Test::Taint
        
        
        Checking if your kit is complete...
        Looks good
        Writing Makefile for WWW::Mechanize
        OK
        Finding PREREQ from Makefile ...
        Checking if you have Pod::Usage 0 ... Yes (1.35)
        Checking if you have FindBin 0 ... Yes (1.49)
        Checking if you have HTML::TreeBuilder 0 ... Yes (3.23)
        Checking if you have HTTP::Status 0 ... Yes (6.00)
        Checking if you have HTTP::Server::Simple 0.35 ... Yes (0.44)
        Checking if you have HTML::TokeParser 2.28 ... Yes (2.37)
        Checking if you have URI::file 0 ... Yes (4.20)
        Checking if you have HTTP::Server::Simple::CGI 0 ... Yes (undef)
        Checking if you have HTTP::Daemon 0 ... Yes (6.00)
        Checking if you have Getopt::Long 0 ... Yes (2.37)
        Checking if you have HTML::Form 1.038 ... Yes (5.813)
        Checking if you have URI 1.36 ... Yes (1.58)
        Checking if you have HTML::HeadParser 0 ... Yes (2.22)
        Checking if you have Carp 0 ... Yes (1.08)
        Checking if you have Test::More 0.34 ... Yes (0.98)
        Checking if you have Test::Warn 0.11 ... Yes (0.23)
        Checking if you have LWP::UserAgent 5.829 ... Yes (6.02)
        Checking if you have HTML::Parser 3.33 ... Yes (3.56)
        Checking if you have File::Temp 0 ... Yes (0.22)
        Checking if you have URI::URL 0 ... Yes (5.03)
        Checking if you have HTTP::Request 1.3 ... Yes (6.00)
        Checking if you have LWP 5.829 ... Yes (6.02)
        Building and testing WWW-Mechanize-1.68 ... cp lib/WWW/Mechanize/Examples.pod blib/lib/WWW/Mechanize/Examples.pod
        cp lib/WWW/Mechanize/Link.pm blib/lib/WWW/Mechanize/Link.pm
        cp lib/WWW/Mechanize/Image.pm blib/lib/WWW/Mechanize/Image.pm
        cp lib/WWW/Mechanize/Cookbook.pod blib/lib/WWW/Mechanize/Cookbook.pod
        cp lib/WWW/Mechanize/FAQ.pod blib/lib/WWW/Mechanize/FAQ.pod
        cp lib/WWW/Mechanize.pm blib/lib/WWW/Mechanize.pm
        cp bin/mech-dump blib/script/mech-dump
        /usr/bin/perl -MExtUtils::MY -e &#39;MY-&gt;fixin(shift)&#39; -- blib/script/mech-dump
        Manifying blib/man1/mech-dump.1p
        Manifying blib/man3/WWW::Mechanize::Link.3pm
        Manifying blib/man3/WWW::Mechanize::Examples.3pm
        Manifying blib/man3/WWW::Mechanize::Image.3pm
        Manifying blib/man3/WWW::Mechanize::FAQ.3pm
        Manifying blib/man3/WWW::Mechanize::Cookbook.3pm
        Manifying blib/man3/WWW::Mechanize.3pm
        PERL_DL_NONLAZY=1 /usr/bin/perl &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/00-load.t t/add_header.t t/aliases.t t/area_link.t t/autocheck.t t/clone.t t/content.t t/cookies.t t/credentials-api.t t/credentials.t t/die.t t/field.t t/find_frame.t t/find_image.t t/find_inputs.t t/find_link-warnings.t t/find_link.t t/find_link_id.t t/form-parsing.t t/form_with_fields.t t/frames.t t/image-new.t t/image-parse.t t/link-base.t t/link-relative.t t/link.t t/new.t t/pod-coverage.t t/pod.t t/regex-error.t t/save_content.t t/select.t t/taint.t t/tick.t t/untaint.t t/upload.t t/warn.t t/warnings.t t/local/back.t t/local/click.t t/local/click_button.t t/local/failure.t t/local/follow.t t/local/form.t t/local/get.t t/local/nonascii.t t/local/overload.t t/local/page_stack.t t/local/referer.t t/local/reload.t t/local/submit.t t/live/encoding.t t/live/wikipedia.t t/mech-dump/mech-dump.t
        t/00-load.t .............. 1/2 # Testing WWW::Mechanize 1.68, with LWP 6.02, Perl 5.010000, /usr/bin/perl
        # Test::Memory::Cycle is not installed.
        t/00-load.t .............. ok   
        t/add_header.t ........... ok   
        t/aliases.t .............. ok   
        t/area_link.t ............ ok   
        t/autocheck.t ............ ok   
        t/clone.t ................ ok   
        t/content.t .............. ok   
        t/cookies.t .............. # Test server http://127.0.0.1:22051 as PID 28519
        t/cookies.t .............. ok     
        t/credentials-api.t ...... ok   
        t/credentials.t .......... ok     
        t/die.t .................. ok   
        t/field.t ................ ok   
        t/find_frame.t ........... ok   
        t/find_image.t ........... ok     
        t/find_inputs.t .......... ok     
        t/find_link-warnings.t ... ok     
        t/find_link.t ............ ok     
        t/find_link_id.t ......... ok    
        t/form-parsing.t ......... ok   
        t/form_with_fields.t ..... 1/? There are 2 forms with the named fields.  The first one was used. at t/form_with_fields.t line 27
        t/form_with_fields.t ..... ok   
        t/frames.t ............... ok   
        t/image-new.t ............ ok     
        t/image-parse.t .......... ok     
        t/link-base.t ............ ok   
        t/link-relative.t ........ ok   
        t/link.t ................. ok     
        t/live/encoding.t ........ ok     
        t/live/wikipedia.t ....... ok     
        t/local/back.t ........... 1/47 # Started http://localhost:33434/
        t/local/back.t ........... ok     
        t/local/click.t .......... 1/9 # Started http://localhost:39239/
        t/local/click.t .......... ok   
        t/local/click_button.t ... 1/19 # Started http://localhost:45094/
        t/local/click_button.t ... ok     
        t/local/failure.t ........ 2/15 # Started http://localhost:60493/
        t/local/failure.t ........ ok     
        t/local/follow.t ......... 1/22 # Started http://localhost:54119/
        t/local/follow.t ......... ok     
        t/local/form.t ........... 1/13 # Started http://localhost:57725/
        t/local/form.t ........... ok     
        t/local/get.t ............ 1/32 # Started http://localhost:59142/
        t/local/get.t ............ ok     
        t/local/nonascii.t ....... 1/5 # Started http://localhost:45550/
        No such field &#39;ValueOf&#39;CF.{Ñ‚}&#39;&#39; at /home/david/.cpanm/work/1308167106.28448/WWW-Mechanize-1.68/blib/lib/WWW/Mechanize.pm line 1403
        # Looks like you planned 5 tests but ran 4.
        t/local/nonascii.t ....... Dubious, test returned 255 (wstat 65280, 0xff00)
        Failed 1/5 subtests 
        t/local/overload.t ....... skipped: Mysteriously stopped passing, and I don&#39;t know why.
        t/local/page_stack.t ..... 1/16 # Started http://localhost:45775/
        t/local/page_stack.t ..... ok     
        t/local/referer.t ........ ok     
        t/local/reload.t ......... 1/14 # Started http://localhost:37802/
        t/local/reload.t ......... ok     
        t/local/submit.t ......... 1/13 # Started http://localhost:51370/
        t/local/submit.t ......... ok     
        t/mech-dump/mech-dump.t .. ok   
        t/new.t .................. ok     
        t/pod-coverage.t ......... skipped: Test::Pod::Coverage 1.04 required for testing POD coverage
        t/pod.t .................. ok   
        t/regex-error.t .......... ok   
        t/save_content.t ......... ok   
        t/select.t ............... ok     
        t/taint.t ................ skipped: Test::Taint required for checking taintedness
        t/tick.t ................. ok   
        t/untaint.t .............. ok   
        t/upload.t ............... ok   
        t/warn.t ................. ok   
        t/warnings.t ............. ok   
        
        Test Summary Report
        -------------------
        t/local/click_button.t (Wstat: 0 Tests: 19 Failed: 0)
          TODO passed:   15-17, 19
        t/local/nonascii.t     (Wstat: 65280 Tests: 4 Failed: 0)
          Non-zero exit status: 255
          Parse errors: Bad plan.  You planned 5 tests but ran 4.
        Files=54, Tests=598, 22 wallclock secs ( 0.28 usr  0.08 sys + 12.99 cusr  0.93 csys = 14.28 CPU)
        Result: FAIL
        Failed 1/54 test programs. 0/598 subtests failed.
        make: *** [test_dynamic] Error 255
        FAIL
        ! Installing WWW::Mechanize failed. See /home/david/.cpanm/build.log for details.
        
        
        Test Summary Report
        -------------------
        t/local/click_button.t (Wstat: 0 Tests: 19 Failed: 0)
          TODO passed:   15-17, 19
        t/local/nonascii.t     (Wstat: 65280 Tests: 4 Failed: 0)
          Non-zero exit status: 255
          Parse errors: Bad plan.  You planned 5 tests but ran 4.
        Files=54, Tests=598, 22 wallclock secs ( 0.28 usr  0.08 sys + 12.99 cusr  0.93 csys = 14.28 CPU)
        Result: FAIL
        Failed 1/54 test programs. 0/598 subtests failed.
        make: *** [test_dynamic] Error 255
        FAIL
        ! Installing WWW::Mechanize failed. See /home/david/.cpanm/build.log for details.
        
        </pre>
      reporter: rbu...@gmail.com
    issue: 208
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: nonascii.t test failure
    url: http://code.google.com/p/www-mechanize/issues/detail?id=208
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=212
    comments:
      - author: XenoTerr...@gmail.com
        comment: this build log doesn't have all fo the other packages I was installing.
        date: 'Jun 29, 2011'
        date_long: Wed Jun 29 13:18:59 2011
        inner: ~
    data: |+
      XenoTerr...@gmail.com reported on Jun 29, 2011 <!-- Wed Jun 29 13:08:05 2011 -->
      
      <pre>
      included cpanm build log. I&#39;m guessing it that it isn&#39;t releasing the port, but I&#39;ve no idea why that might be.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 212](http://code.google.com/p/www-mechanize/issues/detail?id=212) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=212)
      
      * **Type**:      Defect
      * **Date**:      Jun 29, 2011
      * **Reporter**:  XenoTerr...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **XenoTerr...@gmail.com** commented on Jun 29, 2011 <!-- Wed Jun 29 13:18:59 2011 -->:
      
      <pre>
      this build log doesn't have all fo the other packages I was installing.
      </pre>
      

    description:
      date:
        date: 'Jun 29, 2011'
        timestamp: Wed Jun 29 13:08:05 2011
      description: |-
        <pre>
        included cpanm build log. I&#39;m guessing it that it isn&#39;t releasing the port, but I&#39;ve no idea why that might be.
        </pre>
      reporter: XenoTerr...@gmail.com
    issue: 212
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: test suite fails due to port already in use.
    url: http://code.google.com/p/www-mechanize/issues/detail?id=212
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=215
    comments: []
    data: |+
      colossus...@gmail.com reported on Aug 8, 2011 <!-- Mon Aug  8 15:42:53 2011 -->
      
      <pre>
      If the user needs to manually iterate through the forms to find the one in which they are interested, there should be a way to set the form of interest to mech&#39;s current_form. Currently one has to directly assign to $mech-&gt;{current_form}.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 215](http://code.google.com/p/www-mechanize/issues/detail?id=215) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=215)
      
      * **Type**:      Defect
      * **Date**:      Aug 8, 2011
      * **Reporter**:  colossus...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Aug 8, 2011'
        timestamp: Mon Aug  8 15:42:53 2011
      description: |-
        <pre>
        If the user needs to manually iterate through the forms to find the one in which they are interested, there should be a way to set the form of interest to mech&#39;s current_form. Currently one has to directly assign to $mech-&gt;{current_form}.
        </pre>
      reporter: colossus...@gmail.com
    issue: 215
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Make current_form a mutator
    url: http://code.google.com/p/www-mechanize/issues/detail?id=215
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=218
    comments: []
    data: |+
      Eckankar reported on Oct 3, 2011 <!-- Mon Oct  3 08:53:11 2011 -->
      
      <pre>
      As far as I can read from the WWW::Mechanize documentation (<a href="http://search.cpan.org/~jesse/WWW-Mechanize-1.70/lib/WWW/Mechanize.pm#%24mech-%3Esubmit_form%28_..._%29" rel="nofollow">http://search.cpan.org/~jesse/WWW-Mechanize-1.70/lib/WWW/Mechanize.pm#%24mech-%3Esubmit_form%28_..._%29</a>), you can do the following to submit a file from a string:
      
      {{{
      $mech-&gt;submit_form(
          fields =&gt; {
              &#39;UploadedFile&#39; =&gt; [[ undef, &#39;test2.txt&#39;, Content =&gt; $content ], 1],
          }
      );
      }}}
      
      This should submit a file with name text2.txt, containing the text in $content (in this case, &#39;The file is a lie.&#39;).
      
      The request failed with an internal server error, however, so I examined the request that was sent, and found this:
      
      {{{
      --xYzZY
      Content-Disposition: form-data; name=&quot;UploadedFile&quot;; filename=&quot;ARRAY(0x9567570)&quot;
      
      The file is a lie.
      --xYzZY
      }}}
      
      That is clearly not the filename I specified, so it would seem that either the documentation is wrong, or the module is bugged here.
      
      The same thing happens if I use with_fields instead of fields.
      
      This is using WWW::Mechanize 1.70 from CPAN on Linux.
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 218](http://code.google.com/p/www-mechanize/issues/detail?id=218) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=218)
      
      * **Type**:      Defect
      * **Date**:      Oct 3, 2011
      * **Reporter**:  Eckankar
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Oct 3, 2011'
        timestamp: Mon Oct  3 08:53:11 2011
      description: |-
        <pre>
        As far as I can read from the WWW::Mechanize documentation (<a href="http://search.cpan.org/~jesse/WWW-Mechanize-1.70/lib/WWW/Mechanize.pm#%24mech-%3Esubmit_form%28_..._%29" rel="nofollow">http://search.cpan.org/~jesse/WWW-Mechanize-1.70/lib/WWW/Mechanize.pm#%24mech-%3Esubmit_form%28_..._%29</a>), you can do the following to submit a file from a string:
        
        {{{
        $mech-&gt;submit_form(
            fields =&gt; {
                &#39;UploadedFile&#39; =&gt; [[ undef, &#39;test2.txt&#39;, Content =&gt; $content ], 1],
            }
        );
        }}}
        
        This should submit a file with name text2.txt, containing the text in $content (in this case, &#39;The file is a lie.&#39;).
        
        The request failed with an internal server error, however, so I examined the request that was sent, and found this:
        
        {{{
        --xYzZY
        Content-Disposition: form-data; name=&quot;UploadedFile&quot;; filename=&quot;ARRAY(0x9567570)&quot;
        
        The file is a lie.
        --xYzZY
        }}}
        
        That is clearly not the filename I specified, so it would seem that either the documentation is wrong, or the module is bugged here.
        
        The same thing happens if I use with_fields instead of fields.
        
        This is using WWW::Mechanize 1.70 from CPAN on Linux.
        
        
        </pre>
      reporter: Eckankar
    issue: 218
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Incorrect filename for form submission of file not from filesystem
    url: http://code.google.com/p/www-mechanize/issues/detail?id=218
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=219
    comments:
      - author: dancr...@gmail.com
        comment: |-
          Should be as simple as adding the following to Mechanize.pm
          
          =head2 $mech->delete( $uri, content => $content )
          
          DELETEs I<$content> to $uri.  Returns an L<HTTP::Response> object.
          I<$uri> can be a well-formed URI string, a L<URI> object, or a
          L<WWW::Mechanize::Link> object.
          
          =cut
          
          sub delete {
              my $self = shift;
              my $uri = shift;
          
              $uri = $uri->url if ref($uri) eq 'WWW::Mechanize::Link';
          
              $uri = $self->base
                      ? URI->new_abs( $uri, $self->base )
                      : URI->new( $uri );
          
              # It appears we are returning a super-class method,
              # but it in turn calls the request() method here in Mechanize
              return $self->_SUPER_delete( $uri->as_string, @_ );
          }
          
          
          # Added until LWP::UserAgent has it.
          sub _SUPER_delete {
              require HTTP::Request::Common;
              my($self, @parameters) = @_;
              my @suff = $self->_process_colonic_headers(\@parameters,1);
              return $self->request( HTTP::Request::Common::DELETE( @parameters ), @suff );
          }
        date: 'Oct 13, 2011'
        date_long: Thu Oct 13 07:58:06 2011
        inner: ~
      - author: dancr...@gmail.com
        comment: "Here's a patch file, based off 1.70"
        date: 'Oct 13, 2011'
        date_long: Thu Oct 13 09:50:20 2011
        inner: ~
    data: |+
      dancr...@gmail.com reported on Oct 13, 2011 <!-- Thu Oct 13 07:52:41 2011 -->
      
      <pre>
      WWW::Mechanize support HTTP GET, PUT and POST, but not HTTP DELETE.
      
      In the era of RESTful web applications, it&#39;s important to support HTTP DELETE as one of the 4 main verbs.
      
      Currently using v1.70 on Windows and Linux
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 219](http://code.google.com/p/www-mechanize/issues/detail?id=219) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=219)
      
      * **Type**:      Defect
      * **Date**:      Oct 13, 2011
      * **Reporter**:  dancr...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **dancr...@gmail.com** commented on Oct 13, 2011 <!-- Thu Oct 13 07:58:06 2011 -->:
      
      <pre>
      Should be as simple as adding the following to Mechanize.pm
      
      =head2 $mech->delete( $uri, content => $content )
      
      DELETEs I<$content> to $uri.  Returns an L<HTTP::Response> object.
      I<$uri> can be a well-formed URI string, a L<URI> object, or a
      L<WWW::Mechanize::Link> object.
      
      =cut
      
      sub delete {
          my $self = shift;
          my $uri = shift;
      
          $uri = $uri->url if ref($uri) eq 'WWW::Mechanize::Link';
      
          $uri = $self->base
                  ? URI->new_abs( $uri, $self->base )
                  : URI->new( $uri );
      
          # It appears we are returning a super-class method,
          # but it in turn calls the request() method here in Mechanize
          return $self->_SUPER_delete( $uri->as_string, @_ );
      }
      
      
      # Added until LWP::UserAgent has it.
      sub _SUPER_delete {
          require HTTP::Request::Common;
          my($self, @parameters) = @_;
          my @suff = $self->_process_colonic_headers(\@parameters,1);
          return $self->request( HTTP::Request::Common::DELETE( @parameters ), @suff );
      }
      </pre>
      
      
      **dancr...@gmail.com** commented on Oct 13, 2011 <!-- Thu Oct 13 09:50:20 2011 -->:
      
      <pre>
      Here's a patch file, based off 1.70
      </pre>
      

    description:
      date:
        date: 'Oct 13, 2011'
        timestamp: Thu Oct 13 07:52:41 2011
      description: |-
        <pre>
        WWW::Mechanize support HTTP GET, PUT and POST, but not HTTP DELETE.
        
        In the era of RESTful web applications, it&#39;s important to support HTTP DELETE as one of the 4 main verbs.
        
        Currently using v1.70 on Windows and Linux
        </pre>
      reporter: dancr...@gmail.com
    issue: 219
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Support for HTTP DELETE required
    url: http://code.google.com/p/www-mechanize/issues/detail?id=219
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=221
    comments: []
    data: |+
      kaned...@gmail.com reported on Oct 14, 2011 <!-- Fri Oct 14 09:53:49 2011 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. $mech-&gt;get(&#39;http://kakaku.com&#39;);
      2. $mech-&gt;save_content(&#39;index.html&#39;);
      3. nkf -g index.html # =&gt; utf-8
      
      <b>What is the expected output? What do you see instead?</b>
      &quot;shift_jis&quot; is expected, not &quot;utf-8&quot;.
      The page above is written in shift_jis.
      
      
      <b>What version of the product are you using? On what operating system?</b>
      1.70 on CentOS 5.x
      
      <b>Please provide any additional information below.</b>
      
      I guess something like below is needed in save_content() :
      
        my $enc = $self-&gt;res-&gt;encoding;
        open( $fh, &quot;&gt;:encoding($en)&quot;, $finename );
      
      
      Thanks.
      Yoshitomo KANEDA
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 221](http://code.google.com/p/www-mechanize/issues/detail?id=221) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=221)
      
      * **Type**:      Defect
      * **Date**:      Oct 14, 2011
      * **Reporter**:  kaned...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Oct 14, 2011'
        timestamp: Fri Oct 14 09:53:49 2011
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. $mech-&gt;get(&#39;http://kakaku.com&#39;);
        2. $mech-&gt;save_content(&#39;index.html&#39;);
        3. nkf -g index.html # =&gt; utf-8
        
        <b>What is the expected output? What do you see instead?</b>
        &quot;shift_jis&quot; is expected, not &quot;utf-8&quot;.
        The page above is written in shift_jis.
        
        
        <b>What version of the product are you using? On what operating system?</b>
        1.70 on CentOS 5.x
        
        <b>Please provide any additional information below.</b>
        
        I guess something like below is needed in save_content() :
        
          my $enc = $self-&gt;res-&gt;encoding;
          open( $fh, &quot;&gt;:encoding($en)&quot;, $finename );
        
        
        Thanks.
        Yoshitomo KANEDA
        </pre>
      reporter: kaned...@gmail.com
    issue: 221
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: charset mismatch on save_content
    url: http://code.google.com/p/www-mechanize/issues/detail?id=221
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=224
    comments:
      - author: rob...@gmail.com
        comment: |-
          I have the same issue on CentOS Linux with Perl 5.8.8, so I think it has nothing to do with the OS.
          
          Another user on the same machine using a local::lib install did not get test failures from an install made a few months ago, so I suspect it has something to do with an upgrade of a dependency, maybe the HTTP modules (as we use the same HTML parser modules).
        date: 'Jan 12, 2012'
        date_long: Thu Jan 12 11:00:12 2012
        inner: ~
    data: |+
      asb.c...@gmail.com reported on Nov 22, 2011 <!-- Tue Nov 22 23:42:25 2011 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. run cpan of the native perl (v5.10.0)
      2. install WWW::Mechanize
      
      <b>What is the expected output? What do you see instead?</b>
      /usr/bin/make install  -- OK
      
      <b>What version of the product are you using? On what operating system?</b>
      perl v5.10.0, the native perl installation of mac osx snow leopard (10.6.8)
      
      <b>Please provide any additional information below.</b>
      please cf. attachment
      
      The installation works fine for a selfmade perl v5.14.1, but I need it up and running with the native perl installation.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 224](http://code.google.com/p/www-mechanize/issues/detail?id=224) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=224)
      
      * **Type**:      Defect
      * **Date**:      Nov 22, 2011
      * **Reporter**:  asb.c...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **rob...@gmail.com** commented on Jan 12, 2012 <!-- Thu Jan 12 11:00:12 2012 -->:
      
      <pre>
      I have the same issue on CentOS Linux with Perl 5.8.8, so I think it has nothing to do with the OS.
      
      Another user on the same machine using a local::lib install did not get test failures from an install made a few months ago, so I suspect it has something to do with an upgrade of a dependency, maybe the HTTP modules (as we use the same HTML parser modules).
      </pre>
      

    description:
      date:
        date: 'Nov 22, 2011'
        timestamp: Tue Nov 22 23:42:25 2011
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. run cpan of the native perl (v5.10.0)
        2. install WWW::Mechanize
        
        <b>What is the expected output? What do you see instead?</b>
        /usr/bin/make install  -- OK
        
        <b>What version of the product are you using? On what operating system?</b>
        perl v5.10.0, the native perl installation of mac osx snow leopard (10.6.8)
        
        <b>Please provide any additional information below.</b>
        please cf. attachment
        
        The installation works fine for a selfmade perl v5.14.1, but I need it up and running with the native perl installation.
        </pre>
      reporter: asb.c...@gmail.com
    issue: 224
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Install fails on mac osx snow leopard
    url: http://code.google.com/p/www-mechanize/issues/detail?id=224
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=225
    comments: []
    data: |+
      jay31...@gmail.com reported on Nov 25, 2011 <!-- Fri Nov 25 19:29:32 2011 -->
      
      <pre>
      Search fails because $m-&gt;content; does not contain table
      See link <a href="http://search.cpan.org/dist/WWW-" rel="nofollow">http://search.cpan.org/dist/WWW-</a>
      Mechanize/lib/WWW/Mechanize/Examples.pod
      
      All examples have similar issue with $c = $m-&gt;content;
      
      ActivePerl / Windows 7
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 225](http://code.google.com/p/www-mechanize/issues/detail?id=225) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=225)
      
      * **Type**:      Defect
      * **Date**:      Nov 25, 2011
      * **Reporter**:  jay31...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Nov 25, 2011'
        timestamp: Fri Nov 25 19:29:32 2011
      description: |-
        <pre>
        Search fails because $m-&gt;content; does not contain table
        See link <a href="http://search.cpan.org/dist/WWW-" rel="nofollow">http://search.cpan.org/dist/WWW-</a>
        Mechanize/lib/WWW/Mechanize/Examples.pod
        
        All examples have similar issue with $c = $m-&gt;content;
        
        ActivePerl / Windows 7
        </pre>
      reporter: jay31...@gmail.com
    issue: 225
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: get_pop_data example fails for $c = $m->content;
    url: http://code.google.com/p/www-mechanize/issues/detail?id=225
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=226
    comments: []
    data: |+
      george.h...@gmail.com reported on Nov 29, 2011 <!-- Tue Nov 29 10:01:49 2011 -->
      
      <pre>
      1. try to build REST::Utils using yesterday&#39;s (11/28/2011) versions from CPAN, tests fail.
      2. the failing tests are expecting a content_type of application/xhtml+xml but are getting text/html
      3. It looks like the recent change to WWW::Mechanize::is_html so that it now is true for application/xhtml+xml means that WWW::Mechanize::update_html needs to be more careful when it sets $self-&gt;{ct}, always forcing it to text/html does not seem like the right thing.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      Perl 5.14.2, CPAN mirror from morning of 11/28.  Suse Linux.
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 226](http://code.google.com/p/www-mechanize/issues/detail?id=226) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=226)
      
      * **Type**:      Defect
      * **Date**:      Nov 29, 2011
      * **Reporter**:  george.h...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Nov 29, 2011'
        timestamp: Tue Nov 29 10:01:49 2011
      description: |-
        <pre>
        1. try to build REST::Utils using yesterday&#39;s (11/28/2011) versions from CPAN, tests fail.
        2. the failing tests are expecting a content_type of application/xhtml+xml but are getting text/html
        3. It looks like the recent change to WWW::Mechanize::is_html so that it now is true for application/xhtml+xml means that WWW::Mechanize::update_html needs to be more careful when it sets $self-&gt;{ct}, always forcing it to text/html does not seem like the right thing.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        Perl 5.14.2, CPAN mirror from morning of 11/28.  Suse Linux.
        
        </pre>
      reporter: george.h...@gmail.com
    issue: 226
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'update_html overwrites content_type inappropriately, breaks REST::Utils'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=226
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=227
    comments: []
    data: |+
      m...@probably.co.uk reported on Dec 19, 2011 <!-- Mon Dec 19 11:56:29 2011 -->
      
      <pre>
      t/local/back.t fails during 404 test if your resolver returns an address for &#39;localhost&#39; that&#39;s not 127.0.0.1
      
      Like:
      
      MacBook:~$ grep new xx.pl 
      my $server = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
      MacBook:~$ ./xx.pl 
      $VAR1 = &#39;<a href="http://o2wirelessbox.lan:52303/&#39;" rel="nofollow">http://o2wirelessbox.lan:52303/&#39;;</a>
      
      It&#39;s irrelevant if localhost is in /etc/hosts - Lion looks at DNS _then_ /etc/hosts. Annoyingly it appears you cannot change the resolution order on Lion either! This may even only occur with certain resolvers.
      
      I hacked up a patch to the test just to see if I could get it to work ok on my laptop, and it does. That&#39;s attached. It may not be the most elegant solution ;)
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 227](http://code.google.com/p/www-mechanize/issues/detail?id=227) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=227)
      
      * **Type**:      Defect
      * **Date**:      Dec 19, 2011
      * **Reporter**:  m...@probably.co.uk
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Dec 19, 2011'
        timestamp: Mon Dec 19 11:56:29 2011
      description: |-
        <pre>
        t/local/back.t fails during 404 test if your resolver returns an address for &#39;localhost&#39; that&#39;s not 127.0.0.1
        
        Like:
        
        MacBook:~$ grep new xx.pl 
        my $server = HTTP::Daemon-&gt;new(LocalAddr =&gt; &#39;localhost&#39;) or die;
        MacBook:~$ ./xx.pl 
        $VAR1 = &#39;<a href="http://o2wirelessbox.lan:52303/&#39;" rel="nofollow">http://o2wirelessbox.lan:52303/&#39;;</a>
        
        It&#39;s irrelevant if localhost is in /etc/hosts - Lion looks at DNS _then_ /etc/hosts. Annoyingly it appears you cannot change the resolution order on Lion either! This may even only occur with certain resolvers.
        
        I hacked up a patch to the test just to see if I could get it to work ok on my laptop, and it does. That&#39;s attached. It may not be the most elegant solution ;)
        </pre>
      reporter: m...@probably.co.uk
    issue: 227
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Install fails on OS X Lion
    url: http://code.google.com/p/www-mechanize/issues/detail?id=227
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=228
    comments:
      - author: arjen...@googlemail.com
        comment: I just found out that in https://github.com/bestpractical/www-mechanize/commit/9e309b49eef2b40a9c1e61dc9dbaf5f4725284c8 the test already has been removed.
        date: 'Dec 21, 2011'
        date_long: Wed Dec 21 02:38:30 2011
        inner: ~
    data: |+
      arjen...@googlemail.com reported on Dec 21, 2011 <!-- Wed Dec 21 02:21:54 2011 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      &#39;make test&#39; will fail on t/live/encoding.t because the encoding of the homepage of <a href="http://oops-music.com/" rel="nofollow">http://oops-music.com/</a> is not EUC-JP as expected in the test script, but has changed to UTF-8.
      
      WWW-Mechanize-1.68
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 228](http://code.google.com/p/www-mechanize/issues/detail?id=228) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=228)
      
      * **Type**:      Defect
      * **Date**:      Dec 21, 2011
      * **Reporter**:  arjen...@googlemail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **arjen...@googlemail.com** commented on Dec 21, 2011 <!-- Wed Dec 21 02:38:30 2011 -->:
      
      <pre>
      I just found out that in https://github.com/bestpractical/www-mechanize/commit/9e309b49eef2b40a9c1e61dc9dbaf5f4725284c8 the test already has been removed.
      </pre>
      

    description:
      date:
        date: 'Dec 21, 2011'
        timestamp: Wed Dec 21 02:21:54 2011
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        &#39;make test&#39; will fail on t/live/encoding.t because the encoding of the homepage of <a href="http://oops-music.com/" rel="nofollow">http://oops-music.com/</a> is not EUC-JP as expected in the test script, but has changed to UTF-8.
        
        WWW-Mechanize-1.68
        </pre>
      reporter: arjen...@googlemail.com
    issue: 228
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Test t/live/encoding.t fails on 'http://oops-music.com/'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=228
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=229
    comments: []
    data: |+
      dmt3.14...@gmail.com reported on Jan 2, 2012 <!-- Mon Jan  2 13:41:58 2012 -->
      
      <pre>
      In the absence of a real perl javascript we can&#39;t actually use the content.
      However I use WWW::Mechanize for testing web site logins for our monitoring
      system and think it is useful to fetch script links, as problems loading
      such links are usually reflected in the user experience.
      
      
      --- WWW-Mechanize-1.71.orig/lib/WWW/Mechanize.pm	2011-11-26 04:33:10.000000000 +1000
      +++ WWW-Mechanize-1.71/lib/WWW/Mechanize.pm	2012-01-01 08:56:59.000000000 +1000
      @@ -2536,6 +2539,7 @@
           iframe =&gt; &#39;src&#39;,
           link   =&gt; &#39;href&#39;,
           meta   =&gt; &#39;content&#39;,
      +    script =&gt; &#39;src&#39;,
       );
       
       sub _extract_links {
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 229](http://code.google.com/p/www-mechanize/issues/detail?id=229) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=229)
      
      * **Type**:      Defect
      * **Date**:      Jan 2, 2012
      * **Reporter**:  dmt3.14...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Jan 2, 2012'
        timestamp: Mon Jan  2 13:41:58 2012
      description: |-
        <pre>
        In the absence of a real perl javascript we can&#39;t actually use the content.
        However I use WWW::Mechanize for testing web site logins for our monitoring
        system and think it is useful to fetch script links, as problems loading
        such links are usually reflected in the user experience.
        
        
        --- WWW-Mechanize-1.71.orig/lib/WWW/Mechanize.pm	2011-11-26 04:33:10.000000000 +1000
        +++ WWW-Mechanize-1.71/lib/WWW/Mechanize.pm	2012-01-01 08:56:59.000000000 +1000
        @@ -2536,6 +2539,7 @@
             iframe =&gt; &#39;src&#39;,
             link   =&gt; &#39;href&#39;,
             meta   =&gt; &#39;content&#39;,
        +    script =&gt; &#39;src&#39;,
         );
         
         sub _extract_links {
        
        </pre>
      reporter: dmt3.14...@gmail.com
    issue: 229
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'capture script links [enhancement, patch]'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=229
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=230
    comments: []
    data: |+
      koterpil...@gmail.com reported on Jan 30, 2012 <!-- Mon Jan 30 16:21:06 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. &quot;get&quot; a link (say A) which redirects to another page (say B).
      2. &quot;follow_link&quot; on page B to the page C.
      
      <b>What is the expected output? What do you see instead?</b>
      
      The page C should get B in &quot;Referer&quot; header. Instead, it gets A.
      
      <b>What version of the product are you using? On what operating system?</b>
      
      WWW::Mechanize 1.71
      Perl 5.12.4
      Ubuntu 11.10
      
      <b>Please provide any additional information below.</b>
      
      A test case using URL shorteners is attached. It should show the Referer as <a href="http://preview.tinyurl.com/6435yb" rel="nofollow">http://preview.tinyurl.com/6435yb</a> (B in the explanation) because that is the page on which the link is clicked, not <a href="http://bit.ly/zgSLNp" rel="nofollow">http://bit.ly/zgSLNp</a> (A in the explanation) which is the original URL.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 230](http://code.google.com/p/www-mechanize/issues/detail?id=230) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=230)
      
      * **Type**:      Defect
      * **Date**:      Jan 30, 2012
      * **Reporter**:  koterpil...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Jan 30, 2012'
        timestamp: Mon Jan 30 16:21:06 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. &quot;get&quot; a link (say A) which redirects to another page (say B).
        2. &quot;follow_link&quot; on page B to the page C.
        
        <b>What is the expected output? What do you see instead?</b>
        
        The page C should get B in &quot;Referer&quot; header. Instead, it gets A.
        
        <b>What version of the product are you using? On what operating system?</b>
        
        WWW::Mechanize 1.71
        Perl 5.12.4
        Ubuntu 11.10
        
        <b>Please provide any additional information below.</b>
        
        A test case using URL shorteners is attached. It should show the Referer as <a href="http://preview.tinyurl.com/6435yb" rel="nofollow">http://preview.tinyurl.com/6435yb</a> (B in the explanation) because that is the page on which the link is clicked, not <a href="http://bit.ly/zgSLNp" rel="nofollow">http://bit.ly/zgSLNp</a> (A in the explanation) which is the original URL.
        </pre>
      reporter: koterpil...@gmail.com
    issue: 230
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Referer doesn't change if the initial request is redirected
    url: http://code.google.com/p/www-mechanize/issues/detail?id=230
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=231
    comments:
      - author: Zivildie...@gmail.com
        comment: Turns out if I request http://wango.nonexistent.xx-only-testing/ on my server I get my apaches default page. No idea why but this issue report can be closed.
        date: 'Feb 26, 2012'
        date_long: Sun Feb 26 12:06:34 2012
        inner: ~
    data: |+
      Zivildie...@gmail.com reported on Feb 26, 2012 <!-- Sun Feb 26 11:43:34 2012 -->
      
      <pre>
      test fails when trying to install Test::WWW::Mechanize
      
      Perl 5.14.2
      Debian 6.04
      
      #   Failed test &#39;sanity check: we can&#39;t load NONEXISTENT.html&#39;
      #   at t/get_ok.t line 44.
      
      #   Failed test &#39;Fails to get nonexistent URI and reports failure&#39;
      #   at t/get_ok.t line 51.
      # STDOUT is:
      # ok 1 - Try to get bad URL
      #
      # not:
      # not ok 1 - Try to get bad URL
      #
      # as expected
      # STDERR is:
      #
      # not:
      # /#\s+Failed\ test.*?\n?.*?at\ t\/get_ok\.t line 50.*\n?/
      #
      # # 500
      #
      # # Can&#39;t connect to wango.nonexistent.xx-only-testing:80 (Bad hostname)
      #
      # as expected
      
      #   Failed test &#39;And the result should be false&#39;
      #   at t/get_ok.t line 54.
      t/get_ok.t .................
      Failed 3/11 subtests
      
      
      # perl -V
      Summary of my perl5 (<a href="/web/20130621055842/p/www-mechanize/source/detail?r=5">revision 5</a> version 14 subversion 2) configuration:
      
        Platform:
          osname=linux, osvers=2.6.32-5-amd64, archname=x86_64-linux
          uname=&#39;linux kvm6 2.6.32-5-amd64 #1 smp mon jan 16 16:22:28 utc 2012 x86_64 gnulinux &#39;
          config_args=&#39;-de -Dprefix=/opt/perlbrew/perls/perl-5.14.2&#39;
          hint=recommended, useposix=true, d_sigaction=define
          useithreads=undef, usemultiplicity=undef
          useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
          use64bitint=define, use64bitall=define, uselongdouble=undef
          usemymalloc=n, bincompat5005=undef
      
        Compiler:
          cc=&#39;cc&#39;, ccflags =&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&#39;,
          optimize=&#39;-O2&#39;,
          cppflags=&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include&#39;
          ccversion=&#39;&#39;, gccversion=&#39;4.4.5&#39;, gccosandvers=&#39;&#39;
          intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678
          d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16
          ivtype=&#39;long&#39;, ivsize=8, nvtype=&#39;double&#39;, nvsize=8, Off_t=&#39;off_t&#39;, lseeksize=8
          alignbytes=8, prototype=define
        Linker and Libraries:
          ld=&#39;cc&#39;, ldflags =&#39; -fstack-protector -L/usr/local/lib&#39;
          libpth=/usr/local/lib /lib/../lib /usr/lib/../lib /lib /usr/lib /lib64 /usr/lib64
          libs=-lnsl -ldl -lm -lcrypt -lutil -lc
          perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc
          libc=/lib/libc-2.11.3.so, so=so, useshrplib=false, libperl=libperl.a
          gnulibc_version=&#39;2.11.3&#39;
        Dynamic Linking:
          dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=&#39;-Wl,-E&#39;
          cccdlflags=&#39;-fPIC&#39;, lddlflags=&#39;-shared -O2 -L/usr/local/lib -fstack-protector&#39;
      
      
      Characteristics of this binary (from libperl): 
        Compile-time options: PERL_DONT_CREATE_GVSV PERL_MALLOC_WRAP
                              PERL_PRESERVE_IVUV USE_64_BIT_ALL USE_64_BIT_INT
                              USE_LARGE_FILES USE_PERLIO USE_PERL_ATOF
        Built under linux
        Compiled at Feb 19 2012 16:40:50
        %ENV:
          PERLBREW_BASHRC_VERSION=&quot;0.41&quot;
          PERLBREW_HOME=&quot;/root/.perlbrew&quot;
          PERLBREW_MANPATH=&quot;/opt/perlbrew/perls/perl-5.14.2/man&quot;
          PERLBREW_PATH=&quot;/opt/perlbrew/bin:/opt/perlbrew/perls/perl-5.14.2/bin&quot;
          PERLBREW_PERL=&quot;perl-5.14.2&quot;
          PERLBREW_ROOT=&quot;/opt/perlbrew&quot;
          PERLBREW_VERSION=&quot;0.41&quot;
        @INC:
          /opt/perlbrew/perls/perl-5.14.2/lib/site_perl/5.14.2/x86_64-linux
          /opt/perlbrew/perls/perl-5.14.2/lib/site_perl/5.14.2
          /opt/perlbrew/perls/perl-5.14.2/lib/5.14.2/x86_64-linux
          /opt/perlbrew/perls/perl-5.14.2/lib/5.14.2
      
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 231](http://code.google.com/p/www-mechanize/issues/detail?id=231) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=231)
      
      * **Type**:      Defect
      * **Date**:      Feb 26, 2012
      * **Reporter**:  Zivildie...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **Zivildie...@gmail.com** commented on Feb 26, 2012 <!-- Sun Feb 26 12:06:34 2012 -->:
      
      <pre>
      Turns out if I request http://wango.nonexistent.xx-only-testing/ on my server I get my apaches default page. No idea why but this issue report can be closed.
      </pre>
      

    description:
      date:
        date: 'Feb 26, 2012'
        timestamp: Sun Feb 26 11:43:34 2012
      description: |-
        <pre>
        test fails when trying to install Test::WWW::Mechanize
        
        Perl 5.14.2
        Debian 6.04
        
        #   Failed test &#39;sanity check: we can&#39;t load NONEXISTENT.html&#39;
        #   at t/get_ok.t line 44.
        
        #   Failed test &#39;Fails to get nonexistent URI and reports failure&#39;
        #   at t/get_ok.t line 51.
        # STDOUT is:
        # ok 1 - Try to get bad URL
        #
        # not:
        # not ok 1 - Try to get bad URL
        #
        # as expected
        # STDERR is:
        #
        # not:
        # /#\s+Failed\ test.*?\n?.*?at\ t\/get_ok\.t line 50.*\n?/
        #
        # # 500
        #
        # # Can&#39;t connect to wango.nonexistent.xx-only-testing:80 (Bad hostname)
        #
        # as expected
        
        #   Failed test &#39;And the result should be false&#39;
        #   at t/get_ok.t line 54.
        t/get_ok.t .................
        Failed 3/11 subtests
        
        
        # perl -V
        Summary of my perl5 (<a href="/web/20130621055842/p/www-mechanize/source/detail?r=5">revision 5</a> version 14 subversion 2) configuration:
        
          Platform:
            osname=linux, osvers=2.6.32-5-amd64, archname=x86_64-linux
            uname=&#39;linux kvm6 2.6.32-5-amd64 #1 smp mon jan 16 16:22:28 utc 2012 x86_64 gnulinux &#39;
            config_args=&#39;-de -Dprefix=/opt/perlbrew/perls/perl-5.14.2&#39;
            hint=recommended, useposix=true, d_sigaction=define
            useithreads=undef, usemultiplicity=undef
            useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
            use64bitint=define, use64bitall=define, uselongdouble=undef
            usemymalloc=n, bincompat5005=undef
        
          Compiler:
            cc=&#39;cc&#39;, ccflags =&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&#39;,
            optimize=&#39;-O2&#39;,
            cppflags=&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include&#39;
            ccversion=&#39;&#39;, gccversion=&#39;4.4.5&#39;, gccosandvers=&#39;&#39;
            intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678
            d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16
            ivtype=&#39;long&#39;, ivsize=8, nvtype=&#39;double&#39;, nvsize=8, Off_t=&#39;off_t&#39;, lseeksize=8
            alignbytes=8, prototype=define
          Linker and Libraries:
            ld=&#39;cc&#39;, ldflags =&#39; -fstack-protector -L/usr/local/lib&#39;
            libpth=/usr/local/lib /lib/../lib /usr/lib/../lib /lib /usr/lib /lib64 /usr/lib64
            libs=-lnsl -ldl -lm -lcrypt -lutil -lc
            perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc
            libc=/lib/libc-2.11.3.so, so=so, useshrplib=false, libperl=libperl.a
            gnulibc_version=&#39;2.11.3&#39;
          Dynamic Linking:
            dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=&#39;-Wl,-E&#39;
            cccdlflags=&#39;-fPIC&#39;, lddlflags=&#39;-shared -O2 -L/usr/local/lib -fstack-protector&#39;
        
        
        Characteristics of this binary (from libperl): 
          Compile-time options: PERL_DONT_CREATE_GVSV PERL_MALLOC_WRAP
                                PERL_PRESERVE_IVUV USE_64_BIT_ALL USE_64_BIT_INT
                                USE_LARGE_FILES USE_PERLIO USE_PERL_ATOF
          Built under linux
          Compiled at Feb 19 2012 16:40:50
          %ENV:
            PERLBREW_BASHRC_VERSION=&quot;0.41&quot;
            PERLBREW_HOME=&quot;/root/.perlbrew&quot;
            PERLBREW_MANPATH=&quot;/opt/perlbrew/perls/perl-5.14.2/man&quot;
            PERLBREW_PATH=&quot;/opt/perlbrew/bin:/opt/perlbrew/perls/perl-5.14.2/bin&quot;
            PERLBREW_PERL=&quot;perl-5.14.2&quot;
            PERLBREW_ROOT=&quot;/opt/perlbrew&quot;
            PERLBREW_VERSION=&quot;0.41&quot;
          @INC:
            /opt/perlbrew/perls/perl-5.14.2/lib/site_perl/5.14.2/x86_64-linux
            /opt/perlbrew/perls/perl-5.14.2/lib/site_perl/5.14.2
            /opt/perlbrew/perls/perl-5.14.2/lib/5.14.2/x86_64-linux
            /opt/perlbrew/perls/perl-5.14.2/lib/5.14.2
        
        
        
        </pre>
      reporter: Zivildie...@gmail.com
    issue: 231
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: tes get_ok.t failing
    url: http://code.google.com/p/www-mechanize/issues/detail?id=231
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=232
    comments: []
    data: |+
      ccolu...@gmail.com reported on Mar 8, 2012 <!-- Thu Mar  8 17:48:32 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Try calling method DELETE
      <b>2.</b>
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      DELETE is not currently supported
      
      <b>What version of the product are you using? On what operating system?</b>
      1.72 linux centos 6
      
      <b>Please provide any additional information below.</b>
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 232](http://code.google.com/p/www-mechanize/issues/detail?id=232) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=232)
      
      * **Type**:      Defect
      * **Date**:      Mar 8, 2012
      * **Reporter**:  ccolu...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Mar 8, 2012'
        timestamp: Thu Mar  8 17:48:32 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Try calling method DELETE
        <b>2.</b>
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        DELETE is not currently supported
        
        <b>What version of the product are you using? On what operating system?</b>
        1.72 linux centos 6
        
        <b>Please provide any additional information below.</b>
        
        
        </pre>
      reporter: ccolu...@gmail.com
    issue: 232
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Please add support for the DELETE method.
    url: http://code.google.com/p/www-mechanize/issues/detail?id=232
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=233
    comments: []
    data: |+
      michael....@gmail.com reported on Mar 25, 2012 <!-- Sun Mar 25 05:28:04 2012 -->
      
      <pre>
          use 5.014;
          use WWW::Mechanize;
      
          my $mech = WWW::Mechanize;
          say $mech-&gt;uri();
      
      gives:
      
          Can&#39;t call method &quot;request&quot; on an undefined value at /opt/perl-5.14/lib/site_perl/5.14.2/WWW/Mechanize.pm
      
      uri() should probably just return null if no request has been performed, like other methods (such as content()).
      
      WWW::Mechanize version 1.72.
      
       – Michael
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 233](http://code.google.com/p/www-mechanize/issues/detail?id=233) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=233)
      
      * **Type**:      Defect
      * **Date**:      Mar 25, 2012
      * **Reporter**:  michael....@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Mar 25, 2012'
        timestamp: Sun Mar 25 05:28:04 2012
      description: |-
        <pre>
            use 5.014;
            use WWW::Mechanize;
        
            my $mech = WWW::Mechanize;
            say $mech-&gt;uri();
        
        gives:
        
            Can&#39;t call method &quot;request&quot; on an undefined value at /opt/perl-5.14/lib/site_perl/5.14.2/WWW/Mechanize.pm
        
        uri() should probably just return null if no request has been performed, like other methods (such as content()).
        
        WWW::Mechanize version 1.72.
        
         – Michael
        </pre>
      reporter: michael....@gmail.com
    issue: 233
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'WM: uri() dies if no request has been performed'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=233
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=234
    comments: []
    data: |+
      rfl...@acsalaska.net reported on Apr 6, 2012 <!-- Fri Apr  6 16:50:48 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1.env PERL_DL_NONLAZY=1 /usr/local/bin/perl5.12.4 &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(1, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/local/back.t
      
      <b>What is the expected output? What do you see instead?</b>
      Test to finish.
      Instead it hangs because servers are not dying.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.72 on FreeBSD 8.2
      
      <b>Please provide any additional information below.</b>
      The actual hang is in $self-&gt;stop at line 157. The file handle doesn&#39;t close and SIGINFO shows perl to be stuck in accept.
      
      As a work around, I&#39;m using:
      --- t/local/LocalServer.pm.orig 2011-08-05 12:48:08.000000000 -0800
      +++ t/local/LocalServer.pm      2012-04-06 14:37:36.000000000 -0800
      @@ -152,7 +152,7 @@
       sub stop {
           my ($self) = @_;
           get( $self-&gt;quit_server );
      -    undef $self-&gt;{_server_url};
      +    $self-&gt;kill();
           if ( $self-&gt;{_fh} ) {
               close $self-&gt;{_fh};
               delete $self-&gt;{_fh};
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 234](http://code.google.com/p/www-mechanize/issues/detail?id=234) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=234)
      
      * **Type**:      Defect
      * **Date**:      Apr 6, 2012
      * **Reporter**:  rfl...@acsalaska.net
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Apr 6, 2012'
        timestamp: Fri Apr  6 16:50:48 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1.env PERL_DL_NONLAZY=1 /usr/local/bin/perl5.12.4 &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(1, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot; t/local/back.t
        
        <b>What is the expected output? What do you see instead?</b>
        Test to finish.
        Instead it hangs because servers are not dying.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.72 on FreeBSD 8.2
        
        <b>Please provide any additional information below.</b>
        The actual hang is in $self-&gt;stop at line 157. The file handle doesn&#39;t close and SIGINFO shows perl to be stuck in accept.
        
        As a work around, I&#39;m using:
        --- t/local/LocalServer.pm.orig 2011-08-05 12:48:08.000000000 -0800
        +++ t/local/LocalServer.pm      2012-04-06 14:37:36.000000000 -0800
        @@ -152,7 +152,7 @@
         sub stop {
             my ($self) = @_;
             get( $self-&gt;quit_server );
        -    undef $self-&gt;{_server_url};
        +    $self-&gt;kill();
             if ( $self-&gt;{_fh} ) {
                 close $self-&gt;{_fh};
                 delete $self-&gt;{_fh};
        
        
        </pre>
      reporter: rfl...@acsalaska.net
    issue: 234
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'LocalServer.pm: Shutdown sequence not working on FreeBSD'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=234
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=235
    comments:
      - author: kmr.p...@gmail.com
        comment: |-
          My preliminary analysis says that the problem lies in Modules's subroutine with name 
          sub _extract_links which calls another subroutine with name _link_from_token
          
          In the sub _link_from_token  , closing tag is being searched (and which is not found for the current open tag) at line number 2613 (in my version).
        date: 'Apr 9, 2012'
        date_long: Mon Apr  9 08:12:30 2012
        inner: ~
    data: |+
      kmr.p...@gmail.com reported on Apr 9, 2012 <!-- Mon Apr  9 04:04:05 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. create an html page with more than one (say 15) anchor tags (corresponding closing tag also)
      2. Now remove a closing anchor tag for the 11th anchor tag
      3. Run mechanize and dump find_all_links contents. YOu will get only 10 entries.
      
      <b>What is the expected output? What do you see instead?</b>
      Expected all 15 links in the dump
      
      <b>What version of the product are you using? On what operating system?</b>
      VERSION = &#39;1.70&#39;
      
      <b>Please provide any additional information below.</b>
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 235](http://code.google.com/p/www-mechanize/issues/detail?id=235) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=235)
      
      * **Type**:      Defect
      * **Date**:      Apr 9, 2012
      * **Reporter**:  kmr.p...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **kmr.p...@gmail.com** commented on Apr 9, 2012 <!-- Mon Apr  9 08:12:30 2012 -->:
      
      <pre>
      My preliminary analysis says that the problem lies in Modules's subroutine with name 
      sub _extract_links which calls another subroutine with name _link_from_token
      
      In the sub _link_from_token  , closing tag is being searched (and which is not found for the current open tag) at line number 2613 (in my version).
      </pre>
      

    description:
      date:
        date: 'Apr 9, 2012'
        timestamp: Mon Apr  9 04:04:05 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. create an html page with more than one (say 15) anchor tags (corresponding closing tag also)
        2. Now remove a closing anchor tag for the 11th anchor tag
        3. Run mechanize and dump find_all_links contents. YOu will get only 10 entries.
        
        <b>What is the expected output? What do you see instead?</b>
        Expected all 15 links in the dump
        
        <b>What version of the product are you using? On what operating system?</b>
        VERSION = &#39;1.70&#39;
        
        <b>Please provide any additional information below.</b>
        
        </pre>
      reporter: kmr.p...@gmail.com
    issue: 235
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: find_all_links fails if any one anchor tag is not closed properly
    url: http://code.google.com/p/www-mechanize/issues/detail?id=235
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=236
    comments: []
    data: |+
      violapir...@gmail.com reported on Jun 12, 2012 <!-- Tue Jun 12 10:15:19 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. $mech-&gt;max_size(1024);
      2. $mech-&gt;get($url);
      3. print $mech-&gt;content;
      
      Since this is a subclass of LWP::UserAgent, what should be shown is all of the content up until it hit (approximately) 1024 bytes. However, instead what is shown is something like this:
      
      ?|???-???+&quot;?O&lt;?p}?,?ܙmW ?`E??\\ސ???ѧ??U{3???
      
      Whenever I do this exact same process with LWP::UserAgent, it gives me actual content. As a subclass I would think WWW::Mechanize would do the same thing.
      
      I am using version 1.66 and I am on centos5.5
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 236](http://code.google.com/p/www-mechanize/issues/detail?id=236) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=236)
      
      * **Type**:      Defect
      * **Date**:      Jun 12, 2012
      * **Reporter**:  violapir...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Jun 12, 2012'
        timestamp: Tue Jun 12 10:15:19 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. $mech-&gt;max_size(1024);
        2. $mech-&gt;get($url);
        3. print $mech-&gt;content;
        
        Since this is a subclass of LWP::UserAgent, what should be shown is all of the content up until it hit (approximately) 1024 bytes. However, instead what is shown is something like this:
        
        ?|???-???+&quot;?O&lt;?p}?,?ܙmW ?`E??\\ސ???ѧ??U{3???
        
        Whenever I do this exact same process with LWP::UserAgent, it gives me actual content. As a subclass I would think WWW::Mechanize would do the same thing.
        
        I am using version 1.66 and I am on centos5.5
        
        </pre>
      reporter: violapir...@gmail.com
    issue: 236
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: setting max_size returns nonsense for content
    url: http://code.google.com/p/www-mechanize/issues/detail?id=236
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=237
    comments: []
    data: |+
      fumeoftheday reported on Jul 5, 2012 <!-- Thu Jul  5 19:43:24 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. N/A
      <b>2.</b>
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      N/A
      
      
      <b>What version of the product are you using? On what operating system?</b>
      All.
      
      <b>Please provide any additional information below.</b>
      
      Sometimes when a website misbehaves I find that I want to be able to reset things because the back() method won&#39;t do what I want.  I&#39;d like to be able to clear the history so that back() fails and I can reload the data using get.
      
      I could delete the object and create a new one - but I&#39;d rather not.
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 237](http://code.google.com/p/www-mechanize/issues/detail?id=237) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=237)
      
      * **Type**:      Defect
      * **Date**:      Jul 5, 2012
      * **Reporter**:  fumeoftheday
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Jul 5, 2012'
        timestamp: Thu Jul  5 19:43:24 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. N/A
        <b>2.</b>
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        N/A
        
        
        <b>What version of the product are you using? On what operating system?</b>
        All.
        
        <b>Please provide any additional information below.</b>
        
        Sometimes when a website misbehaves I find that I want to be able to reset things because the back() method won&#39;t do what I want.  I&#39;d like to be able to clear the history so that back() fails and I can reload the data using get.
        
        I could delete the object and create a new one - but I&#39;d rather not.
        
        
        </pre>
      reporter: fumeoftheday
    issue: 237
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Please add clear_history method
    url: http://code.google.com/p/www-mechanize/issues/detail?id=237
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=238
    comments: []
    data: |+
      sineswi...@gmail.com reported on Jul 20, 2012 <!-- Fri Jul 20 12:19:45 2012 -->
      
      <pre>
      Currently, you redefine agent on a new method, but $self-&gt;_agent will still passthru to the LWP::UA version.  Since _agent is actually a documented method (ie: non-private), you should redefine _agent to be the same thing as the new method default.
      
      sub _agent { &quot;WWW::Mechanize/$VERSION&quot; }
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 238](http://code.google.com/p/www-mechanize/issues/detail?id=238) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=238)
      
      * **Type**:      Defect
      * **Date**:      Jul 20, 2012
      * **Reporter**:  sineswi...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Jul 20, 2012'
        timestamp: Fri Jul 20 12:19:45 2012
      description: |-
        <pre>
        Currently, you redefine agent on a new method, but $self-&gt;_agent will still passthru to the LWP::UA version.  Since _agent is actually a documented method (ie: non-private), you should redefine _agent to be the same thing as the new method default.
        
        sub _agent { &quot;WWW::Mechanize/$VERSION&quot; }
        
        </pre>
      reporter: sineswi...@gmail.com
    issue: 238
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Should redefine $self->_agent
    url: http://code.google.com/p/www-mechanize/issues/detail?id=238
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=239
    comments: []
    data: |+
      m...@summersault.com reported on Sep 25, 2012 <!-- Tue Sep 25 07:36:30 2012 -->
      
      <pre>
      I&#39;m interested to know if this project would be interested in accepting the following feature enhancement:
      
      HTTP::CookieMonster provides a great, user-friendly way to get and set cookies, which Mechanize is missing. The key method names don&#39;t have any conflicts in WWW::Mechanize or LWP::UserAgent, so I suggest the functionality is merged in. This would include adding the following methods, based on the implementations in HTTP::CookieMonster:
      
       get_cookie()
       set_cookie() 
       all_cookies()
      
      Rather than depending on HTTP::CookieMonster, I recommend manually merging in the methods we want. It&#39;s a small amount of code, and would eliminate the &quot;Moo&quot; dependency, as well as dropping the methods and procedural interface we don&#39;t need. The documentation would be simpler as well, as the complete docs would be in WWW::Mechanize.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 239](http://code.google.com/p/www-mechanize/issues/detail?id=239) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=239)
      
      * **Type**:      Defect
      * **Date**:      Sep 25, 2012
      * **Reporter**:  m...@summersault.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Sep 25, 2012'
        timestamp: Tue Sep 25 07:36:30 2012
      description: |-
        <pre>
        I&#39;m interested to know if this project would be interested in accepting the following feature enhancement:
        
        HTTP::CookieMonster provides a great, user-friendly way to get and set cookies, which Mechanize is missing. The key method names don&#39;t have any conflicts in WWW::Mechanize or LWP::UserAgent, so I suggest the functionality is merged in. This would include adding the following methods, based on the implementations in HTTP::CookieMonster:
        
         get_cookie()
         set_cookie() 
         all_cookies()
        
        Rather than depending on HTTP::CookieMonster, I recommend manually merging in the methods we want. It&#39;s a small amount of code, and would eliminate the &quot;Moo&quot; dependency, as well as dropping the methods and procedural interface we don&#39;t need. The documentation would be simpler as well, as the complete docs would be in WWW::Mechanize.
        </pre>
      reporter: m...@summersault.com
    issue: 239
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: 'Wish: adopt user-friendly cookie API from HTTP::CookieMonster'
    url: http://code.google.com/p/www-mechanize/issues/detail?id=239
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=240
    comments:
      - author: kabac...@gmail.com
        comment: Did you ever Got this resolved ?
        date: 'Feb 4, 2013'
        date_long: Mon Feb  4 12:45:14 2013
        inner: ~
    data: |+
      ch...@chrisduffin.org reported on Oct 31, 2012 <!-- Wed Oct 31 05:45:40 2012 -->
      
      <pre>
      Hello,
      
      So I recently created a script that get&#39;s a login page, fills out the form, and submits it, in order to test the functionality on a website. This code works perfectly fine on my desktop, however, when running it on my server, the get request seems to fail (with a 500 error) and I get a number of errors about missing or undefined object.
      
      code snippet:
      
      
      sub canLogin
      {
      
      	$mech-&gt;get($loginurl);
      	$mech-&gt;save_content( &#39;login.html&#39; );
      	print &quot;Status code:&quot;.$mech-&gt;status().&quot;\n&quot;;
      	if($@)
      	{ 
      		$loginfail = 1;
      		return &quot;Could not load login page - Status Code: &quot;.$mech-&gt;status();
      	}
      	print $mech-&gt;text();
      	$mech-&gt;cookie_jar(HTTP::Cookies-&gt;new());
      	$mech-&gt;form_id(&#39;login-form&#39;);
      	$mech-&gt;field (&#39;username&#39; =&gt; $username);
      	$mech-&gt;field (&#39;password&#39; =&gt; $password);
      	eval { $mech-&gt;submit() };
      	$logintime = $mech-&gt;client_total_time;
      	if($@)
      	{
      		$loginfail = 1;
      		return &quot;Could not login - Status Code: &quot;.$mech-&gt;status();
      	}
      	if(index($mech-&gt;text(), &quot;Login failed&quot;) != -1)
      	{
      		$loginfail = 1;
      		return &quot;Page loaded fine but login failed, check credentials. &quot;;
      	}
      	return &quot;Login succeded: $logintime ms :- &quot;;
      }
      
      
      On my desktop, this produces the following output:
      
      
      Status code:200
      Text content from page
      
      
      On the server, I get
      
      
      Status code:500
       There is no form with ID &quot;login-form&quot; at ./check_boards_func line 52.
      Can&#39;t call method &quot;value&quot; on an undefined value at /usr/local/share/perl/5.14.2/WWW/Mechanize.pm line 1407.
      Can&#39;t locate object method &quot;new&quot; via package &quot;LWPx::TimedHTTP::https::Socket&quot; at /usr/local/share/perl/5.14.2/LWP/Protocol/http.pm line 31.
      
      
      Both machines have the WWW::Mechanize and WWW::Mechanize::Timed modules installed, as well as LWPx::TimedHTTP::https, and both are running Ubuntu 12.04 x64.
      
      Both using 
      
      WWW::Mechanize	1.72
      WWW::Mechanize::Timed	0.44
      
      
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 240](http://code.google.com/p/www-mechanize/issues/detail?id=240) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=240)
      
      * **Type**:      Defect
      * **Date**:      Oct 31, 2012
      * **Reporter**:  ch...@chrisduffin.org
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **kabac...@gmail.com** commented on Feb 4, 2013 <!-- Mon Feb  4 12:45:14 2013 -->:
      
      <pre>
      Did you ever Got this resolved ?
      </pre>
      

    description:
      date:
        date: 'Oct 31, 2012'
        timestamp: Wed Oct 31 05:45:40 2012
      description: |-
        <pre>
        Hello,
        
        So I recently created a script that get&#39;s a login page, fills out the form, and submits it, in order to test the functionality on a website. This code works perfectly fine on my desktop, however, when running it on my server, the get request seems to fail (with a 500 error) and I get a number of errors about missing or undefined object.
        
        code snippet:
        
        
        sub canLogin
        {
        
        	$mech-&gt;get($loginurl);
        	$mech-&gt;save_content( &#39;login.html&#39; );
        	print &quot;Status code:&quot;.$mech-&gt;status().&quot;\n&quot;;
        	if($@)
        	{ 
        		$loginfail = 1;
        		return &quot;Could not load login page - Status Code: &quot;.$mech-&gt;status();
        	}
        	print $mech-&gt;text();
        	$mech-&gt;cookie_jar(HTTP::Cookies-&gt;new());
        	$mech-&gt;form_id(&#39;login-form&#39;);
        	$mech-&gt;field (&#39;username&#39; =&gt; $username);
        	$mech-&gt;field (&#39;password&#39; =&gt; $password);
        	eval { $mech-&gt;submit() };
        	$logintime = $mech-&gt;client_total_time;
        	if($@)
        	{
        		$loginfail = 1;
        		return &quot;Could not login - Status Code: &quot;.$mech-&gt;status();
        	}
        	if(index($mech-&gt;text(), &quot;Login failed&quot;) != -1)
        	{
        		$loginfail = 1;
        		return &quot;Page loaded fine but login failed, check credentials. &quot;;
        	}
        	return &quot;Login succeded: $logintime ms :- &quot;;
        }
        
        
        On my desktop, this produces the following output:
        
        
        Status code:200
        Text content from page
        
        
        On the server, I get
        
        
        Status code:500
         There is no form with ID &quot;login-form&quot; at ./check_boards_func line 52.
        Can&#39;t call method &quot;value&quot; on an undefined value at /usr/local/share/perl/5.14.2/WWW/Mechanize.pm line 1407.
        Can&#39;t locate object method &quot;new&quot; via package &quot;LWPx::TimedHTTP::https::Socket&quot; at /usr/local/share/perl/5.14.2/LWP/Protocol/http.pm line 31.
        
        
        Both machines have the WWW::Mechanize and WWW::Mechanize::Timed modules installed, as well as LWPx::TimedHTTP::https, and both are running Ubuntu 12.04 x64.
        
        Both using 
        
        WWW::Mechanize	1.72
        WWW::Mechanize::Timed	0.44
        
        
        
        </pre>
      reporter: ch...@chrisduffin.org
    issue: 240
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: get() giving 500 and object errors
    url: http://code.google.com/p/www-mechanize/issues/detail?id=240
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=241
    comments: []
    data: |+
      lee...@gmail.com reported on Nov 23, 2012 <!-- Fri Nov 23 04:28:33 2012 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Add a form to (an empty) document using the update_html method
      2. Call the forms method
      3. Find no forms
      
      <b>What is the expected output? What do you see instead?</b>
      I expected to see a form 
      
      <b>What version of the product are you using? On what operating system?</b>
      Latest
      
      <b>Please provide any additional information below.</b>
      Could just put a call at the end of update_html to _extract_forms, and allow updated documents to continue to function as one might expect
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 241](http://code.google.com/p/www-mechanize/issues/detail?id=241) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=241)
      
      * **Type**:      Defect
      * **Date**:      Nov 23, 2012
      * **Reporter**:  lee...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Nov 23, 2012'
        timestamp: Fri Nov 23 04:28:33 2012
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Add a form to (an empty) document using the update_html method
        2. Call the forms method
        3. Find no forms
        
        <b>What is the expected output? What do you see instead?</b>
        I expected to see a form 
        
        <b>What version of the product are you using? On what operating system?</b>
        Latest
        
        <b>Please provide any additional information below.</b>
        Could just put a call at the end of update_html to _extract_forms, and allow updated documents to continue to function as one might expect
        
        </pre>
      reporter: lee...@gmail.com
    issue: 241
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: update_html does not call forms or _extract_forms
    url: http://code.google.com/p/www-mechanize/issues/detail?id=241
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=242
    comments: []
    data: |+
      mark.sto...@gmail.com reported on Feb 4, 2013 <!-- Mon Feb  4 13:53:40 2013 -->
      
      <pre>
      The Mech docs for get() currently say:
      
      &quot; Because :content_file causes the page contents to be stored in a file instead of the response object, some Mech functions that expect it to be there won&#39;t work as expected. Use with caution.&quot;
      
      Instead of the vaque &quot;some Mech functions&quot; language, the docs should be updated to state which methods do or do not work as expected. 
      
      With the current vague docs, each user of :content_file is left to rediscover on their own trial and error which methods work with it, and which don&#39;t. 
      
        Mark
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 242](http://code.google.com/p/www-mechanize/issues/detail?id=242) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=242)
      
      * **Type**:      Defect
      * **Date**:      Feb 4, 2013
      * **Reporter**:  mark.sto...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Feb 4, 2013'
        timestamp: Mon Feb  4 13:53:40 2013
      description: |-
        <pre>
        The Mech docs for get() currently say:
        
        &quot; Because :content_file causes the page contents to be stored in a file instead of the response object, some Mech functions that expect it to be there won&#39;t work as expected. Use with caution.&quot;
        
        Instead of the vaque &quot;some Mech functions&quot; language, the docs should be updated to state which methods do or do not work as expected. 
        
        With the current vague docs, each user of :content_file is left to rediscover on their own trial and error which methods work with it, and which don&#39;t. 
        
          Mark
        </pre>
      reporter: mark.sto...@gmail.com
    issue: 242
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: "WM: get() docs should be specific about which method don't work with :content_file"
    url: http://code.google.com/p/www-mechanize/issues/detail?id=242
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=243
    comments: []
    data: |+
      abhipata...@gmail.com reported on Feb 14, 2013 <!-- Thu Feb 14 01:11:48 2013 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      <b>1.</b>
      The text area is:
      &lt;textarea rows=&quot;5&quot; cols=&quot;60&quot; id=&quot;p_input&quot; name=&quot;p_input&quot;&gt;&lt;/textarea&gt;
      <b>2.</b>
      I m filling this textarea using the following code
      my $mech = WWW::Mechanize-&gt;new();
      $mech-&gt;timeout(5000);
      $mech-&gt;agent(&#39;Mozilla/5.0&#39;);
      $mech-&gt;proxy([&#39;http&#39;], &#39;http://202.41.70.84:6588&#39;);
      
      	$url=&quot;<a href="http://pridb.gdcb.iastate.edu/RPISeq/index.html&quot;" rel="nofollow">http://pridb.gdcb.iastate.edu/RPISeq/index.html&quot;;</a>
      	$mech-&gt;get($url);
      	die $mech -&gt;res-&gt;status_line unless $mech -&gt;success ;
      	$mech-&gt;form_name( &#39;myform&#39; ) or die (&quot;CANT FIND&quot;);
      
      	
      	my @in = $mech-&gt;find_all_inputs(
              type       =&gt; &#39;textarea&#39;,
              name_regex =&gt; qr/input/,
          );								
      	print @in;
      	$one=&quot;p_input&quot;;
      	$two=&quot;r_input&quot;;
      		$mech-&gt; field($one,&quot;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&quot;) or die (&quot;CF&quot;);
      		$mech-&gt; field($two,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;);
      								    							   		$mech-&gt;submit();
      
      3. This is not working and i am getting the death &#39;C F&#39;
      
      <b>What is the expected output? What do you see instead?</b>
      I get a death instead out the html page output
      
      
      <b>What version of the product are you using? On what operating system?</b>
      I am using this very mechanize on windows 7
      
      <b>Please provide any additional information below.</b>
      
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 243](http://code.google.com/p/www-mechanize/issues/detail?id=243) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=243)
      
      * **Type**:      Defect
      * **Date**:      Feb 14, 2013
      * **Reporter**:  abhipata...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Feb 14, 2013'
        timestamp: Thu Feb 14 01:11:48 2013
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        <b>1.</b>
        The text area is:
        &lt;textarea rows=&quot;5&quot; cols=&quot;60&quot; id=&quot;p_input&quot; name=&quot;p_input&quot;&gt;&lt;/textarea&gt;
        <b>2.</b>
        I m filling this textarea using the following code
        my $mech = WWW::Mechanize-&gt;new();
        $mech-&gt;timeout(5000);
        $mech-&gt;agent(&#39;Mozilla/5.0&#39;);
        $mech-&gt;proxy([&#39;http&#39;], &#39;http://202.41.70.84:6588&#39;);
        
        	$url=&quot;<a href="http://pridb.gdcb.iastate.edu/RPISeq/index.html&quot;" rel="nofollow">http://pridb.gdcb.iastate.edu/RPISeq/index.html&quot;;</a>
        	$mech-&gt;get($url);
        	die $mech -&gt;res-&gt;status_line unless $mech -&gt;success ;
        	$mech-&gt;form_name( &#39;myform&#39; ) or die (&quot;CANT FIND&quot;);
        
        	
        	my @in = $mech-&gt;find_all_inputs(
                type       =&gt; &#39;textarea&#39;,
                name_regex =&gt; qr/input/,
            );								
        	print @in;
        	$one=&quot;p_input&quot;;
        	$two=&quot;r_input&quot;;
        		$mech-&gt; field($one,&quot;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&quot;) or die (&quot;CF&quot;);
        		$mech-&gt; field($two,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;);
        								    							   		$mech-&gt;submit();
        
        3. This is not working and i am getting the death &#39;C F&#39;
        
        <b>What is the expected output? What do you see instead?</b>
        I get a death instead out the html page output
        
        
        <b>What version of the product are you using? On what operating system?</b>
        I am using this very mechanize on windows 7
        
        <b>Please provide any additional information below.</b>
        
        </pre>
      reporter: abhipata...@gmail.com
    issue: 243
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: PROBLEM WITH FILLING TEXTAREA
    url: http://code.google.com/p/www-mechanize/issues/detail?id=243
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=244
    comments: []
    data: |+
      creaktive@gmail.com reported on Mar 16, 2013 <!-- Sat Mar 16 06:07:34 2013 -->
      
      <pre>
      (also issued at <a href="http://web.archive.org/web/20130621091334/https://github.com/libwww-perl/WWW-Mechanize/pull/14" rel="nofollow">https://github.com/libwww-perl/WWW-Mechanize/pull/14</a>)
      
      The t/local/encoding.t &amp; t/local/referer.t tests are potentially deadlockable:
      
      PERL5OPT=-MLWP::Protocol::Net::Curl=http_version,2 prove -lv t/local/encoding.t t/local/referer.t
      
      Here, the testing server waits for the client to close connection, and vice-versa. The client could be forced to use a non-keepalive connection, which solves the deadlock:
      
      PERL5OPT=-MLWP::Protocol::Net::Curl=http_version,1 prove -lv t/local/encoding.t t/local/referer.t
      
      Both tests could also include an explicit undef $agent. The attached code uses the already-available /quit_server URI to do the things in a safest way.
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 244](http://code.google.com/p/www-mechanize/issues/detail?id=244) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=244)
      
      * **Type**:      Defect
      * **Date**:      Mar 16, 2013
      * **Reporter**:  creaktive@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Mar 16, 2013'
        timestamp: Sat Mar 16 06:07:34 2013
      description: |-
        <pre>
        (also issued at <a href="http://web.archive.org/web/20130621091334/https://github.com/libwww-perl/WWW-Mechanize/pull/14" rel="nofollow">https://github.com/libwww-perl/WWW-Mechanize/pull/14</a>)
        
        The t/local/encoding.t &amp; t/local/referer.t tests are potentially deadlockable:
        
        PERL5OPT=-MLWP::Protocol::Net::Curl=http_version,2 prove -lv t/local/encoding.t t/local/referer.t
        
        Here, the testing server waits for the client to close connection, and vice-versa. The client could be forced to use a non-keepalive connection, which solves the deadlock:
        
        PERL5OPT=-MLWP::Protocol::Net::Curl=http_version,1 prove -lv t/local/encoding.t t/local/referer.t
        
        Both tests could also include an explicit undef $agent. The attached code uses the already-available /quit_server URI to do the things in a safest way.
        </pre>
      reporter: creaktive@gmail.com
    issue: 244
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: ensure /quit_server calls for full HTTP/1.1 keepalive compatibility
    url: http://code.google.com/p/www-mechanize/issues/detail?id=244
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=245
    comments: []
    data: |+
      XenoTerr...@gmail.com reported on Mar 21, 2013 <!-- Thu Mar 21 12:53:50 2013 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      
      use strict;
      use warnings;
      use Test::More;
      use Test::WWW::Mechanize;
      
      my $client  = Test::WWW::Mechanize-&gt;new;
      my $url     = &#39;http://localhost/search&#39;;
      my $headers = {&#39;Content-Type&#39; =&gt; &#39;application/x-www-form-urlencoded&#39;, Accept =&gt; &#39;application/json&#39;};
      my $data    = &#39;query=server-management&amp;limit=1&#39;;
      
      $client-&gt;post_ok( $url, { %$headers, Content =&gt; $data });
      note $client-&gt;content;
      
      done_testing;
      
      
      
      <b>What is the expected output? What do you see instead?</b>
      Expected
      {&quot;params&quot;:[&quot;query&quot;,&quot;limit&quot;],&quot;query&quot;:&quot;server-management&quot;,&quot;Accept&quot;:&quot;application/json&quot;,&quot;limit&quot;:&quot;1&quot;}
      
      Instead
       {&quot;params&quot;:[&quot;Accept&quot;,&quot;Content-Type&quot;,&quot;Content&quot;],&quot;query&quot;:&quot;&quot;,&quot;Accept&quot;:&quot;&quot;,&quot;limit&quot;:&quot;&quot;}
      
      <b>What version of the product are you using? On what operating system?</b>
      1.72 Linux/Windows both
      
      <b>Please provide any additional information below.</b>
      
      the problem is at
      
      <a href="http://web.archive.org/web/20130621115017/https://metacpan.org/source/PETDANCE/Test-WWW-Mechanize-1.44/Mechanize.pm#L236" rel="nofollow">https://metacpan.org/source/PETDANCE/Test-WWW-Mechanize-1.44/Mechanize.pm#L236</a>
      
      LWP::Useragent-&gt;post expects an array (or url + hash) not a url + hashref. removing the \ from %opts fixes the problem
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 245](http://code.google.com/p/www-mechanize/issues/detail?id=245) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=245)
      
      * **Type**:      Defect
      * **Date**:      Mar 21, 2013
      * **Reporter**:  XenoTerr...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'Mar 21, 2013'
        timestamp: Thu Mar 21 12:53:50 2013
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        
        use strict;
        use warnings;
        use Test::More;
        use Test::WWW::Mechanize;
        
        my $client  = Test::WWW::Mechanize-&gt;new;
        my $url     = &#39;http://localhost/search&#39;;
        my $headers = {&#39;Content-Type&#39; =&gt; &#39;application/x-www-form-urlencoded&#39;, Accept =&gt; &#39;application/json&#39;};
        my $data    = &#39;query=server-management&amp;limit=1&#39;;
        
        $client-&gt;post_ok( $url, { %$headers, Content =&gt; $data });
        note $client-&gt;content;
        
        done_testing;
        
        
        
        <b>What is the expected output? What do you see instead?</b>
        Expected
        {&quot;params&quot;:[&quot;query&quot;,&quot;limit&quot;],&quot;query&quot;:&quot;server-management&quot;,&quot;Accept&quot;:&quot;application/json&quot;,&quot;limit&quot;:&quot;1&quot;}
        
        Instead
         {&quot;params&quot;:[&quot;Accept&quot;,&quot;Content-Type&quot;,&quot;Content&quot;],&quot;query&quot;:&quot;&quot;,&quot;Accept&quot;:&quot;&quot;,&quot;limit&quot;:&quot;&quot;}
        
        <b>What version of the product are you using? On what operating system?</b>
        1.72 Linux/Windows both
        
        <b>Please provide any additional information below.</b>
        
        the problem is at
        
        <a href="http://web.archive.org/web/20130621115017/https://metacpan.org/source/PETDANCE/Test-WWW-Mechanize-1.44/Mechanize.pm#L236" rel="nofollow">https://metacpan.org/source/PETDANCE/Test-WWW-Mechanize-1.44/Mechanize.pm#L236</a>
        
        LWP::Useragent-&gt;post expects an array (or url + hash) not a url + hashref. removing the \ from %opts fixes the problem
        </pre>
      reporter: XenoTerr...@gmail.com
    issue: 245
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: ->post_ok won't pass headers
    url: http://code.google.com/p/www-mechanize/issues/detail?id=245
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=246
    comments:
      - author: nigel.ho...@gmail.com
        comment: "This should be of type 'enhancement', but I can't see a way of changing the type :-("
        date: 'Apr 24, 2013'
        date_long: Wed Apr 24 11:05:06 2013
        inner: ~
    data: |+
      nigel.ho...@gmail.com reported on Apr 24, 2013 <!-- Wed Apr 24 09:47:58 2013 -->
      
      <pre>
      <b>What steps will reproduce the problem?</b>
      1. Run my program
      <b>2.</b>
      <b>3.</b>
      
      <b>What is the expected output? What do you see instead?</b>
      
      A helpful error message. There is no form numbered 1 at /Users/hornenj/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/WWW/Mechanize.pm line 1900, &lt;DATA&gt; line 165.
      
      <b>What version of the product are you using? On what operating system?</b>
      1.72.  MacOS/X
      <b>Please provide any additional information below.</b>
      
      I understand the message and why I get it, the problem is that I talk to 5 different URLs and I don&#39;t know which is failing and when in the loop.  So, please would you enhance the message to give the URL, something like:
      
      &#39;There is no form numbered 1 on <a href="http://www.example.com" rel="nofollow">http://www.example.com</a> at...&quot;
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 246](http://code.google.com/p/www-mechanize/issues/detail?id=246) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=246)
      
      * **Type**:      Defect
      * **Date**:      Apr 24, 2013
      * **Reporter**:  nigel.ho...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      
      
      ### Comments
      **nigel.ho...@gmail.com** commented on Apr 24, 2013 <!-- Wed Apr 24 11:05:06 2013 -->:
      
      <pre>
      This should be of type 'enhancement', but I can't see a way of changing the type :-(
      </pre>
      

    description:
      date:
        date: 'Apr 24, 2013'
        timestamp: Wed Apr 24 09:47:58 2013
      description: |-
        <pre>
        <b>What steps will reproduce the problem?</b>
        1. Run my program
        <b>2.</b>
        <b>3.</b>
        
        <b>What is the expected output? What do you see instead?</b>
        
        A helpful error message. There is no form numbered 1 at /Users/hornenj/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/WWW/Mechanize.pm line 1900, &lt;DATA&gt; line 165.
        
        <b>What version of the product are you using? On what operating system?</b>
        1.72.  MacOS/X
        <b>Please provide any additional information below.</b>
        
        I understand the message and why I get it, the problem is that I talk to 5 different URLs and I don&#39;t know which is failing and when in the loop.  So, please would you enhance the message to give the URL, something like:
        
        &#39;There is no form numbered 1 on <a href="http://www.example.com" rel="nofollow">http://www.example.com</a> at...&quot;
        </pre>
      reporter: nigel.ho...@gmail.com
    issue: 246
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Error message could be more helpful.
    url: http://code.google.com/p/www-mechanize/issues/detail?id=246
  - archive_url: https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=247
    comments: []
    data: |+
      DouglasG...@gmail.com reported on May 9, 2013 <!-- Thu May  9 08:04:16 2013 -->
      
      <pre>
      
      <b>What version of the product are you using? On what operating system?</b>
      1.72_02
      
      Would be nice if click() and click_button() could pass on the content_file/callback and/or read_size_hint to the request() method:
      
      Suggested changes:
      
      sub click {
          my ($self, $button, $x, $y, @args) = @_;
          for ($x, $y) { $_ = 1 unless defined; }
          my $request = $self-&gt;current_form-&gt;click($button, $x, $y);
          return $self-&gt;request( $request, @args );
      }
      
      sub click_button {
          my $self = shift;
          my %args = @_;
      
          for ( keys %args ) {
              if ( !/^(number|name|value|input|x|y)$/ ) {
                  $self-&gt;warn( qq{Unknown click_button parameter &quot;$_&quot;} );
              }
          }
      
          for ($args{x}, $args{y}) {
              $_ = 1 unless defined;
          }
      
          my $form = $self-&gt;current_form or $self-&gt;die( &#39;click_button: No form has been selected&#39; );
      
          my $request;
          if ( $args{name} ) {
              $request = $form-&gt;click( $args{name}, $args{x}, $args{y} );
          }
          elsif ( $args{number} ) {
              my $input = $form-&gt;find_input( undef, &#39;submit&#39;, $args{number} );
              $request = $input-&gt;click( $form, $args{x}, $args{y} );
          }
          elsif ( $args{input} ) {
              $request = $args{input}-&gt;click( $form, $args{x}, $args{y} );
          }
          elsif ( $args{value} ) {
              my $i = 1;
              while ( my $input = $form-&gt;find_input(undef, &#39;submit&#39;, $i) ) {
                  if ( $args{value} &amp;&amp; ($args{value} eq $input-&gt;value) ) {
                      $request = $input-&gt;click( $form, $args{x}, $args{y} );
                      last;
                  }
                  $i++;
              } # while
          } # $args{value}
      
          return $self-&gt;request(
              $request,
              $args{content_file} || $args{content_cb},
              $args{read_size_hint},
          );
      }
      </pre>
      
      ### Details
      
      Imported from [Google Code issue 247](http://code.google.com/p/www-mechanize/issues/detail?id=247) via [archive](https://web.archive.org/web/20150227111857/http://code.google.com/p/www-mechanize/issues/detail?id=247)
      
      * **Type**:      Defect
      * **Date**:      May 9, 2013
      * **Reporter**:  DouglasG...@gmail.com
      * **Owner**:     ----
      * **Priority**:  Medium
      * **Status**:    New
      

    description:
      date:
        date: 'May 9, 2013'
        timestamp: Thu May  9 08:04:16 2013
      description: |-
        <pre>
        
        <b>What version of the product are you using? On what operating system?</b>
        1.72_02
        
        Would be nice if click() and click_button() could pass on the content_file/callback and/or read_size_hint to the request() method:
        
        Suggested changes:
        
        sub click {
            my ($self, $button, $x, $y, @args) = @_;
            for ($x, $y) { $_ = 1 unless defined; }
            my $request = $self-&gt;current_form-&gt;click($button, $x, $y);
            return $self-&gt;request( $request, @args );
        }
        
        sub click_button {
            my $self = shift;
            my %args = @_;
        
            for ( keys %args ) {
                if ( !/^(number|name|value|input|x|y)$/ ) {
                    $self-&gt;warn( qq{Unknown click_button parameter &quot;$_&quot;} );
                }
            }
        
            for ($args{x}, $args{y}) {
                $_ = 1 unless defined;
            }
        
            my $form = $self-&gt;current_form or $self-&gt;die( &#39;click_button: No form has been selected&#39; );
        
            my $request;
            if ( $args{name} ) {
                $request = $form-&gt;click( $args{name}, $args{x}, $args{y} );
            }
            elsif ( $args{number} ) {
                my $input = $form-&gt;find_input( undef, &#39;submit&#39;, $args{number} );
                $request = $input-&gt;click( $form, $args{x}, $args{y} );
            }
            elsif ( $args{input} ) {
                $request = $args{input}-&gt;click( $form, $args{x}, $args{y} );
            }
            elsif ( $args{value} ) {
                my $i = 1;
                while ( my $input = $form-&gt;find_input(undef, &#39;submit&#39;, $i) ) {
                    if ( $args{value} &amp;&amp; ($args{value} eq $input-&gt;value) ) {
                        $request = $input-&gt;click( $form, $args{x}, $args{y} );
                        last;
                    }
                    $i++;
                } # while
            } # $args{value}
        
            return $self-&gt;request(
                $request,
                $args{content_file} || $args{content_cb},
                $args{read_size_hint},
            );
        }
        </pre>
      reporter: DouglasG...@gmail.com
    issue: 247
    meta:
      Owner: ----
      Priority: Medium
      Status: New
      Type: Defect
    title: Allow content file/callback and read size hint in click and click_button
    url: http://code.google.com/p/www-mechanize/issues/detail?id=247
